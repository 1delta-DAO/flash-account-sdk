// Generated Viem ABI exports

import type { Abi } from "viem";

export const FlashAccountAbi = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "entryPoint_",
          type: "address",
          internalType: "contract IEntryPoint",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "receive",
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "addDeposit",
      inputs: [],
      outputs: [],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "eip712Domain",
      inputs: [],
      outputs: [
        {
          name: "fields",
          type: "bytes1",
          internalType: "bytes1",
        },
        {
          name: "name",
          type: "string",
          internalType: "string",
        },
        {
          name: "version",
          type: "string",
          internalType: "string",
        },
        {
          name: "chainId",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "verifyingContract",
          type: "address",
          internalType: "address",
        },
        {
          name: "salt",
          type: "bytes32",
          internalType: "bytes32",
        },
        {
          name: "extensions",
          type: "uint256[]",
          internalType: "uint256[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "entryPoint",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract IEntryPoint",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "execute",
      inputs: [
        {
          name: "dest",
          type: "address",
          internalType: "address",
        },
        {
          name: "value",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "func",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "executeBatch",
      inputs: [
        {
          name: "dest",
          type: "address[]",
          internalType: "address[]",
        },
        {
          name: "func",
          type: "bytes[]",
          internalType: "bytes[]",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "executeBatch",
      inputs: [
        {
          name: "dest",
          type: "address[]",
          internalType: "address[]",
        },
        {
          name: "value",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "func",
          type: "bytes[]",
          internalType: "bytes[]",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "executeOperation",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "params",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "executeOperation",
      inputs: [
        {
          name: "assets",
          type: "address[]",
          internalType: "address[]",
        },
        {
          name: "amounts",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "premiums",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "initiator",
          type: "address",
          internalType: "address",
        },
        {
          name: "params",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "getDeposit",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getMessageHash",
      inputs: [
        {
          name: "message",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getNonce",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "initialize",
      inputs: [
        {
          name: "owner_",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "isValidSignature",
      inputs: [
        {
          name: "hash",
          type: "bytes32",
          internalType: "bytes32",
        },
        {
          name: "signature",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "onERC1155BatchReceived",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "pure",
    },
    {
      type: "function",
      name: "onERC1155Received",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "pure",
    },
    {
      type: "function",
      name: "onERC721Received",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "pure",
    },
    {
      type: "function",
      name: "onMorphoFlashLoan",
      inputs: [
        {
          name: "assets",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "params",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "owner",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "performCreate",
      inputs: [
        {
          name: "value",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "initCode",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "createdAddr",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "performCreate2",
      inputs: [
        {
          name: "value",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "initCode",
          type: "bytes",
          internalType: "bytes",
        },
        {
          name: "salt",
          type: "bytes32",
          internalType: "bytes32",
        },
      ],
      outputs: [
        {
          name: "createdAddr",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "receiveFlashLoan",
      inputs: [
        {
          name: "data",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "receiveFlashLoan",
      inputs: [
        {
          name: "",
          type: "address[]",
          internalType: "address[]",
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "params",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "supportsInterface",
      inputs: [
        {
          name: "interfaceId",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "transferOwnership",
      inputs: [
        {
          name: "newOwner",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "validateUserOp",
      inputs: [
        {
          name: "userOp",
          type: "tuple",
          internalType: "struct PackedUserOperation",
          components: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "initCode",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "accountGasLimits",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "preVerificationGas",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "gasFees",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "paymasterAndData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
        },
        {
          name: "userOpHash",
          type: "bytes32",
          internalType: "bytes32",
        },
        {
          name: "missingAccountFunds",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [
        {
          name: "validationData",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "withdrawDepositTo",
      inputs: [
        {
          name: "withdrawAddress",
          type: "address",
          internalType: "address payable",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "event",
      name: "Initialized",
      inputs: [
        {
          name: "version",
          type: "uint64",
          indexed: false,
          internalType: "uint64",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "LightAccountInitialized",
      inputs: [
        {
          name: "entryPoint",
          type: "address",
          indexed: true,
          internalType: "contract IEntryPoint",
        },
        {
          name: "owner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "OwnershipTransferred",
      inputs: [
        {
          name: "previousOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "newOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "error",
      name: "ArrayLengthMismatch",
      inputs: [],
    },
    {
      type: "error",
      name: "CreateFailed",
      inputs: [],
    },
    {
      type: "error",
      name: "ECDSAInvalidSignature",
      inputs: [],
    },
    {
      type: "error",
      name: "ECDSAInvalidSignatureLength",
      inputs: [
        {
          name: "length",
          type: "uint256",
          internalType: "uint256",
        },
      ],
    },
    {
      type: "error",
      name: "ECDSAInvalidSignatureS",
      inputs: [
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32",
        },
      ],
    },
    {
      type: "error",
      name: "InvalidInitialization",
      inputs: [],
    },
    {
      type: "error",
      name: "InvalidOwner",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "InvalidSignatureType",
      inputs: [],
    },
    {
      type: "error",
      name: "Locked",
      inputs: [],
    },
    {
      type: "error",
      name: "NotAuthorized",
      inputs: [
        {
          name: "caller",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "NotInitializing",
      inputs: [],
    },
    {
      type: "error",
      name: "ZeroAddressNotAllowed",
      inputs: [],
    },
  ],
  bytecode: {
    object:
      "0x610160604052348015610010575f5ffd5b50604051612f83380380612f8383398101604081905261002f916101c0565b306080524660a052807f5886a89854f64cffde2e739819f75451c42a85563516fe8eab2ef059d7e9f52660608061009d604080518082018252600c81526b119b185cda1058d8dbdd5b9d60a21b602080830191909152825180840190935260018352603160f81b9083015291565b815160209283012081519183019190912060c082905260e0819052604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152938401929092529082015246606082015230608082015260a09020610100525050610140526001600160a01b0381166101205261011a610121565b50506101ed565b5f61012c6101405190565b805490915068010000000000000000900460ff161561015e5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101bd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b5f602082840312156101d0575f5ffd5b81516001600160a01b03811681146101e6575f5ffd5b9392505050565b60805160a05160c05160e051610100516101205161014051612d1461026f5f395f61100901525f818161046701528181610b3001528181610ca101528181610f98015281816111d00152818161158a0152818161163e0152611a6901525f61130601525f6113c001525f61139a01525f61134a01525f6113270152612d145ff3fe60806040526004361061019c575f3560e01c80637b72d2ce116100dc578063bc197c8111610087578063d087d28811610062578063d087d28814610524578063f04f270714610538578063f23a6e6114610557578063f2fde38b1461059c575f5ffd5b8063bc197c81146104aa578063c399ec88146104f1578063c4d66de814610505575f5ffd5b8063920f5c84116100b7578063920f5c841461043a578063b0d691fe14610459578063b61d27f61461048b575f5ffd5b80637b72d2ce146103ab57806384b0196e146103ca5780638da5cb5b146103f1575f5ffd5b80631b11d0ff116101475780634847be6f116101225780634847be6f146103395780634a58db19146103715780634c8c9ea1146103795780634d44560d1461038c575f5ffd5b80631b11d0ff146102dc57806331f57072146102fb57806347e1da2a1461031a575f5ffd5b80631626ba7e116101775780631626ba7e1461027d57806318dfb3c71461029c57806319822f7c146102bd575f5ffd5b806301ffc9a7146101a75780630a1028c4146101db578063150b7a0214610208575f5ffd5b366101a357005b5f5ffd5b3480156101b2575f5ffd5b506101c66101c13660046120a6565b6105bb565b60405190151581526020015b60405180910390f35b3480156101e6575f5ffd5b506101fa6101f53660046121af565b61069f565b6040519081526020016101d2565b348015610213575f5ffd5b5061024c61022236600461224f565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b348015610288575f5ffd5b5061024c6102973660046122bd565b61070c565b3480156102a7575f5ffd5b506102bb6102b6366004612346565b610796565b005b3480156102c8575f5ffd5b506101fa6102d73660046123b2565b6108c2565b3480156102e7575f5ffd5b506101c66102f6366004612401565b6108e0565b348015610306575f5ffd5b506102bb6103153660046122bd565b61094a565b348015610325575f5ffd5b506102bb610334366004612478565b6109aa565b61034c610347366004612505565b610ab2565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b6102bb610b2e565b61034c6103873660046122bd565b610bd0565b348015610397575f5ffd5b506102bb6103a6366004612554565b610c4a565b3480156103b6575f5ffd5b506102bb6103c536600461257e565b610d49565b3480156103d5575f5ffd5b506103de610da8565b6040516101d297969594939291906125eb565b3480156103fc575f5ffd5b507ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1661034c565b348015610445575f5ffd5b506101c66104543660046126aa565b610e50565b348015610464575f5ffd5b507f000000000000000000000000000000000000000000000000000000000000000061034c565b348015610496575f5ffd5b506102bb6104a536600461278c565b610ebd565b3480156104b5575f5ffd5b5061024c6104c43660046127d8565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b3480156104fc575f5ffd5b506101fa610f53565b348015610510575f5ffd5b506102bb61051f36600461289b565b611007565b34801561052f575f5ffd5b506101fa611184565b348015610543575f5ffd5b506102bb6105523660046128b6565b6111ff565b348015610562575f5ffd5b5061024c610571366004612964565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b3480156105a7575f5ffd5b506102bb6105b636600461289b565b611264565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000148061064d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061069957507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b5f5f7f5e3baca2936049843f06038876a12f03627b5edc98025751ecf2ac756264019983805190602001206040516020016106e4929190918252602082015260400190565b60405160208183030381529060405280519060200120905061070581611304565b9392505050565b5f61074161073a8560405160200161072691815260200190565b60405160208183030381529060405261069f565b848461141a565b1561076d57507f1626ba7e00000000000000000000000000000000000000000000000000000000610705565b507fffffffff000000000000000000000000000000000000000000000000000000009392505050565b61079e611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d558281146107fb576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825f5b818110156108965761088e86868381811061081b5761081b6129bd565b9050602002016020810190610830919061289b565b5f868685818110610843576108436129bd565b905060200281019061085591906129ea565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061160492505050565b6001016107fe565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b5f6108cb611626565b6108d584846116c5565b905061070582611876565b5f7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5460021815610933577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b61093d83836118de565b5060019695505050505050565b7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5460021461099b577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b6109a582826118de565b505050565b6109b2611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5584811415806109e55750848314155b15610a1c576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845f5b81811015610a8457610a7c888883818110610a3c57610a3c6129bd565b9050602002016020810190610a51919061289b565b878784818110610a6357610a636129bd565b90506020020135868685818110610843576108436129bd565b600101610a1f565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55505050505050565b5f610abb611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55604051838086833783818389f59250505080610b0257637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063b760faf99034906024015f604051808303818588803b158015610bb7575f5ffd5b505af1158015610bc9573d5f5f3e3d5ffd5b5050505050565b5f610bd9611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d556040518280858337808287f09250505080610c1f57637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d559392505050565b610c52611572565b73ffffffffffffffffffffffffffffffffffffffff8216610c9f576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c2878906044015f604051808303815f87803b158015610d2f575f5ffd5b505af1158015610d41573d5f5f3e3d5ffd5b505050505050565b7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d54600214610d9a577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b610da482826118de565b5050565b7f0f000000000000000000000000000000000000000000000000000000000000006060805f808083610e3e604080518082018252600c81527f466c6173684163636f756e7400000000000000000000000000000000000000006020808301919091528251808401909352600183527f31000000000000000000000000000000000000000000000000000000000000009083015291565b97989097965046955030945091925090565b5f7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5460021815610ea3577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b610ead83836118de565b5060019998505050505050505050565b610ec5611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55610f29848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061160492505050565b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610fde573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110029190612a4b565b905090565b7f0000000000000000000000000000000000000000000000000000000000000000805468010000000000000000810460ff16159067ffffffffffffffff165f811580156110515750825b90505f8267ffffffffffffffff16600114801561106d5750303b155b90508115801561107b575080155b156110b2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156111135784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b61111c866119b0565b8315610d415784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201525f602482018190529073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610fc3565b7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d54600214611250577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b61125a82826118de565b5050505050505050565b61126c611572565b73ffffffffffffffffffffffffffffffffffffffff811615806112a4575073ffffffffffffffffffffffffffffffffffffffff811630145b156112f8576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b61130181611af4565b50565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030147f00000000000000000000000000000000000000000000000000000000000000004614166113f75750604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000009181019190915246606082015230608082015260a090205b6719010000000000005f5280601a5281603a52604260182090505f603a52919050565b5f6001821015611456576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83835f818110611469576114696129bd565b919091013560f81c91508190506114cc576114c48561148b8560018189612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611bf592505050565b915050610705565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611540576114c4856115078560018189612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611c6392505050565b6040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906115b85750333014155b80156115c957506115c7611cac565b155b15611602576040517f4a0bfec10000000000000000000000000000000000000000000000000000000081523360048201526024016112ef565b565b5f5f82516020840185875af180611620576040513d5f823e3d81fd5b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016112ef565b5f60016116d66101008501856129ea565b90501015611710576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61171f6101008501856129ea565b5f81811061172f5761172f6129bd565b919091013560f81c91508190506117e0577f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f908152601c849052603c81209061177d6101008701876129ea565b61178b916001908290612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509293506117d692506117d1915084905083611bf5565b611d1e565b9350505050610699565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611540575f6118196101008601866129ea565b611827916001908290612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092935061186d92506117d1915086905083611c63565b95945050505050565b8015611301576040515f9033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d805f8114610bc9576040519150601f19603f3d011682016040523d82523d5f602084013e610bc9565b5f80806118ed84860186612bc2565b9250925092508051835114158061190657508151835114155b1561193d576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82515f5b818110156119a75761199f85828151811061195e5761195e6129bd565b6020026020010151858381518110611978576119786129bd565b6020026020010151858481518110611992576119926129bd565b6020026020010151611604565b600101611941565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166119ff576040517fb20f76e30000000000000000000000000000000000000000000000000000000081525f60048201526024016112ef565b807ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c0980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604051828216917f000000000000000000000000000000000000000000000000000000000000000016907fec6a23b49d2c363d250c9dda15610e835d428207d15ddb36a6c230e37371ddf1905f90a360405173ffffffffffffffffffffffffffffffffffffffff8216905f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c09805473ffffffffffffffffffffffffffffffffffffffff908116908316819003611b83576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016112ef565b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f80611c018484611d32565b9050611c417ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff9182169116149392505050565b5f610705611ca57ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b8484611d5a565b5f611ceb7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b5f81611d2b576001610699565b5f92915050565b5f5f5f5f611d408686611e85565b925092509250611d508282611ece565b5090949350505050565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff168585604051602401611d87929190612cb0565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1626ba7e0000000000000000000000000000000000000000000000000000000017905251611dea9190612cc8565b5f60405180830381855afa9150503d805f8114611e22576040519150601f19603f3d011682016040523d82523d5f602084013e611e27565b606091505b5091509150818015611e3b57506020815110155b8015611e7b575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611e799083016020908101908401612a4b565b145b9695505050505050565b5f5f5f8351604103611ebc576020840151604085015160608601515f1a611eae88828585611fd1565b955095509550505050611ec7565b505081515f91506002905b9250925092565b5f826003811115611ee157611ee1612a62565b03611eea575050565b6001826003811115611efe57611efe612a62565b03611f35576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115611f4957611f49612a62565b03611f83576040517ffce698f7000000000000000000000000000000000000000000000000000000008152600481018290526024016112ef565b6003826003811115611f9757611f97612a62565b03610da4576040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600481018290526024016112ef565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561200a57505f9150600390508261209c565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561205b573d5f5f3e3d5ffd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff811661209357505f92506001915082905061209c565b92505f91508190505b9450945094915050565b5f602082840312156120b6575f5ffd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610705575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561213b5761213b6120e5565b604052919050565b5f82601f830112612152575f5ffd5b813567ffffffffffffffff81111561216c5761216c6120e5565b61217f6020601f19601f84011601612112565b818152846020838601011115612193575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f602082840312156121bf575f5ffd5b813567ffffffffffffffff8111156121d5575f5ffd5b6121e184828501612143565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611301575f5ffd5b5f5f83601f84011261221a575f5ffd5b50813567ffffffffffffffff811115612231575f5ffd5b602083019150836020828501011115612248575f5ffd5b9250929050565b5f5f5f5f5f60808688031215612263575f5ffd5b853561226e816121e9565b9450602086013561227e816121e9565b935060408601359250606086013567ffffffffffffffff8111156122a0575f5ffd5b6122ac8882890161220a565b969995985093965092949392505050565b5f5f5f604084860312156122cf575f5ffd5b83359250602084013567ffffffffffffffff8111156122ec575f5ffd5b6122f88682870161220a565b9497909650939450505050565b5f5f83601f840112612315575f5ffd5b50813567ffffffffffffffff81111561232c575f5ffd5b6020830191508360208260051b8501011115612248575f5ffd5b5f5f5f5f60408587031215612359575f5ffd5b843567ffffffffffffffff81111561236f575f5ffd5b61237b87828801612305565b909550935050602085013567ffffffffffffffff81111561239a575f5ffd5b6123a687828801612305565b95989497509550505050565b5f5f5f606084860312156123c4575f5ffd5b833567ffffffffffffffff8111156123da575f5ffd5b840161012081870312156123ec575f5ffd5b95602085013595506040909401359392505050565b5f5f5f5f5f5f60a08789031215612416575f5ffd5b8635612421816121e9565b95506020870135945060408701359350606087013561243f816121e9565b9250608087013567ffffffffffffffff81111561245a575f5ffd5b61246689828a0161220a565b979a9699509497509295939492505050565b5f5f5f5f5f5f6060878903121561248d575f5ffd5b863567ffffffffffffffff8111156124a3575f5ffd5b6124af89828a01612305565b909750955050602087013567ffffffffffffffff8111156124ce575f5ffd5b6124da89828a01612305565b909550935050604087013567ffffffffffffffff8111156124f9575f5ffd5b61246689828a01612305565b5f5f5f5f60608587031215612518575f5ffd5b84359350602085013567ffffffffffffffff811115612535575f5ffd5b6125418782880161220a565b9598909750949560400135949350505050565b5f5f60408385031215612565575f5ffd5b8235612570816121e9565b946020939093013593505050565b5f5f6020838503121561258f575f5ffd5b823567ffffffffffffffff8111156125a5575f5ffd5b6125b18582860161220a565b90969095509350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f61262560e08301896125bd565b828103604084015261263781896125bd565b6060840188905273ffffffffffffffffffffffffffffffffffffffff8716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b8181101561269957835183526020938401939092019160010161267b565b50909b9a5050505050505050505050565b5f5f5f5f5f5f5f5f5f60a08a8c0312156126c2575f5ffd5b893567ffffffffffffffff8111156126d8575f5ffd5b6126e48c828d01612305565b909a5098505060208a013567ffffffffffffffff811115612703575f5ffd5b61270f8c828d01612305565b90985096505060408a013567ffffffffffffffff81111561272e575f5ffd5b61273a8c828d01612305565b90965094505060608a013561274e816121e9565b925060808a013567ffffffffffffffff811115612769575f5ffd5b6127758c828d0161220a565b915080935050809150509295985092959850929598565b5f5f5f5f6060858703121561279f575f5ffd5b84356127aa816121e9565b935060208501359250604085013567ffffffffffffffff8111156127cc575f5ffd5b6123a68782880161220a565b5f5f5f5f5f5f5f5f60a0898b0312156127ef575f5ffd5b88356127fa816121e9565b9750602089013561280a816121e9565b9650604089013567ffffffffffffffff811115612825575f5ffd5b6128318b828c01612305565b909750955050606089013567ffffffffffffffff811115612850575f5ffd5b61285c8b828c01612305565b909550935050608089013567ffffffffffffffff81111561287b575f5ffd5b6128878b828c0161220a565b999c989b5096995094979396929594505050565b5f602082840312156128ab575f5ffd5b8135610705816121e9565b5f5f5f5f5f5f5f5f6080898b0312156128cd575f5ffd5b883567ffffffffffffffff8111156128e3575f5ffd5b6128ef8b828c01612305565b909950975050602089013567ffffffffffffffff81111561290e575f5ffd5b61291a8b828c01612305565b909750955050604089013567ffffffffffffffff811115612939575f5ffd5b6129458b828c01612305565b909550935050606089013567ffffffffffffffff81111561287b575f5ffd5b5f5f5f5f5f5f60a08789031215612979575f5ffd5b8635612984816121e9565b95506020870135612994816121e9565b94506040870135935060608701359250608087013567ffffffffffffffff81111561245a575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612a1d575f5ffd5b83018035915067ffffffffffffffff821115612a37575f5ffd5b602001915036819003821315612248575f5ffd5b5f60208284031215612a5b575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f5f85851115612a9d575f5ffd5b83861115612aa9575f5ffd5b5050820193919092039150565b5f67ffffffffffffffff821115612acf57612acf6120e5565b5060051b60200190565b5f82601f830112612ae8575f5ffd5b8135612afb612af682612ab6565b612112565b8082825260208201915060208360051b860101925085831115612b1c575f5ffd5b602085015b83811015612b39578035835260209283019201612b21565b5095945050505050565b5f82601f830112612b52575f5ffd5b8135612b60612af682612ab6565b8082825260208201915060208360051b860101925085831115612b81575f5ffd5b602085015b83811015612b3957803567ffffffffffffffff811115612ba4575f5ffd5b612bb3886020838a0101612143565b84525060209283019201612b86565b5f5f5f60608486031215612bd4575f5ffd5b833567ffffffffffffffff811115612bea575f5ffd5b8401601f81018613612bfa575f5ffd5b8035612c08612af682612ab6565b8082825260208201915060208360051b850101925088831115612c29575f5ffd5b6020840193505b82841015612c54578335612c43816121e9565b825260209384019390910190612c30565b9550505050602084013567ffffffffffffffff811115612c72575f5ffd5b612c7e86828701612ad9565b925050604084013567ffffffffffffffff811115612c9a575f5ffd5b612ca686828701612b43565b9150509250925092565b828152604060208201525f6121e160408301846125bd565b5f82518060208501845e5f92019182525091905056fea2646970667358221220feb32d151bee9ae1d63dedd2c016d225577b807df04828df2c012bce1219a43164736f6c634300081c0033",
    sourceMap:
      "196:2347:0:-:0;;;244:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:4:12;2119:45;;2191:13;2174:30;;298:11:0;1725:66:1;2215:18:12;;2331:23;8405:21:1;;;;;;;;;;;-1:-1:-1;;;8405:21:1;;;;;;;;8534:13;;;;;;;;;;;-1:-1:-1;;;8534:13:1;;;;8405:21;8235:319;2331:23:12;2431:22;;;;;;;2545:25;;;;;;;;;2580:26;;;;2616:32;;;;2828:4;2822:11;;2893:16;2883:27;;2934:12;;;2927:30;;;;2981:12;;;2974:33;3045:9;3038:4;3031:12;;3024:31;3093:9;3086:4;3079:12;;3072:31;3146:4;3133:18;;3184:34;;-1:-1:-1;;3215:34:11;;-1:-1:-1;;;;;2666:26:1;::::1;;::::0;2702:22:::1;:20;:22::i;:::-;2562:169:::0;244:69:0;196:2347;;7249:401:11;7308:47;7358:26;8234:16;;;8098:242;7358:26;7399:21;;;;-1:-1:-1;7399:21:11;;;;;7395:82;;;7443:23;;-1:-1:-1;;;7443:23:11;;;;;;;;;;;7395:82;7490:20;;-1:-1:-1;;;;;7490:20:11;;;:40;7486:158;;7546:39;;-1:-1:-1;;;;;;7546:39:11;-1:-1:-1;;;;;7546:39:11;;;;;7604:29;;474:50:231;;;7604:29:11;;462:2:231;447:18;7604:29:11;;;;;;;7486:158;7298:352;7249:401::o;14:311:231:-;105:6;158:2;146:9;137:7;133:23;129:32;126:52;;;174:1;171;164:12;126:52;200:16;;-1:-1:-1;;;;;245:31:231;;235:42;;225:70;;291:1;288;281:12;225:70;314:5;14:311;-1:-1:-1;;;14:311:231:o;330:200::-;196:2347:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      "0x60806040526004361061019c575f3560e01c80637b72d2ce116100dc578063bc197c8111610087578063d087d28811610062578063d087d28814610524578063f04f270714610538578063f23a6e6114610557578063f2fde38b1461059c575f5ffd5b8063bc197c81146104aa578063c399ec88146104f1578063c4d66de814610505575f5ffd5b8063920f5c84116100b7578063920f5c841461043a578063b0d691fe14610459578063b61d27f61461048b575f5ffd5b80637b72d2ce146103ab57806384b0196e146103ca5780638da5cb5b146103f1575f5ffd5b80631b11d0ff116101475780634847be6f116101225780634847be6f146103395780634a58db19146103715780634c8c9ea1146103795780634d44560d1461038c575f5ffd5b80631b11d0ff146102dc57806331f57072146102fb57806347e1da2a1461031a575f5ffd5b80631626ba7e116101775780631626ba7e1461027d57806318dfb3c71461029c57806319822f7c146102bd575f5ffd5b806301ffc9a7146101a75780630a1028c4146101db578063150b7a0214610208575f5ffd5b366101a357005b5f5ffd5b3480156101b2575f5ffd5b506101c66101c13660046120a6565b6105bb565b60405190151581526020015b60405180910390f35b3480156101e6575f5ffd5b506101fa6101f53660046121af565b61069f565b6040519081526020016101d2565b348015610213575f5ffd5b5061024c61022236600461224f565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b348015610288575f5ffd5b5061024c6102973660046122bd565b61070c565b3480156102a7575f5ffd5b506102bb6102b6366004612346565b610796565b005b3480156102c8575f5ffd5b506101fa6102d73660046123b2565b6108c2565b3480156102e7575f5ffd5b506101c66102f6366004612401565b6108e0565b348015610306575f5ffd5b506102bb6103153660046122bd565b61094a565b348015610325575f5ffd5b506102bb610334366004612478565b6109aa565b61034c610347366004612505565b610ab2565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b6102bb610b2e565b61034c6103873660046122bd565b610bd0565b348015610397575f5ffd5b506102bb6103a6366004612554565b610c4a565b3480156103b6575f5ffd5b506102bb6103c536600461257e565b610d49565b3480156103d5575f5ffd5b506103de610da8565b6040516101d297969594939291906125eb565b3480156103fc575f5ffd5b507ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1661034c565b348015610445575f5ffd5b506101c66104543660046126aa565b610e50565b348015610464575f5ffd5b507f000000000000000000000000000000000000000000000000000000000000000061034c565b348015610496575f5ffd5b506102bb6104a536600461278c565b610ebd565b3480156104b5575f5ffd5b5061024c6104c43660046127d8565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b3480156104fc575f5ffd5b506101fa610f53565b348015610510575f5ffd5b506102bb61051f36600461289b565b611007565b34801561052f575f5ffd5b506101fa611184565b348015610543575f5ffd5b506102bb6105523660046128b6565b6111ff565b348015610562575f5ffd5b5061024c610571366004612964565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b3480156105a7575f5ffd5b506102bb6105b636600461289b565b611264565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000148061064d57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061069957507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b5f5f7f5e3baca2936049843f06038876a12f03627b5edc98025751ecf2ac756264019983805190602001206040516020016106e4929190918252602082015260400190565b60405160208183030381529060405280519060200120905061070581611304565b9392505050565b5f61074161073a8560405160200161072691815260200190565b60405160208183030381529060405261069f565b848461141a565b1561076d57507f1626ba7e00000000000000000000000000000000000000000000000000000000610705565b507fffffffff000000000000000000000000000000000000000000000000000000009392505050565b61079e611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d558281146107fb576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825f5b818110156108965761088e86868381811061081b5761081b6129bd565b9050602002016020810190610830919061289b565b5f868685818110610843576108436129bd565b905060200281019061085591906129ea565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061160492505050565b6001016107fe565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b5f6108cb611626565b6108d584846116c5565b905061070582611876565b5f7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5460021815610933577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b61093d83836118de565b5060019695505050505050565b7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5460021461099b577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b6109a582826118de565b505050565b6109b2611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5584811415806109e55750848314155b15610a1c576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845f5b81811015610a8457610a7c888883818110610a3c57610a3c6129bd565b9050602002016020810190610a51919061289b565b878784818110610a6357610a636129bd565b90506020020135868685818110610843576108436129bd565b600101610a1f565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55505050505050565b5f610abb611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55604051838086833783818389f59250505080610b0257637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063b760faf99034906024015f604051808303818588803b158015610bb7575f5ffd5b505af1158015610bc9573d5f5f3e3d5ffd5b5050505050565b5f610bd9611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d556040518280858337808287f09250505080610c1f57637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d559392505050565b610c52611572565b73ffffffffffffffffffffffffffffffffffffffff8216610c9f576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c2878906044015f604051808303815f87803b158015610d2f575f5ffd5b505af1158015610d41573d5f5f3e3d5ffd5b505050505050565b7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d54600214610d9a577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b610da482826118de565b5050565b7f0f000000000000000000000000000000000000000000000000000000000000006060805f808083610e3e604080518082018252600c81527f466c6173684163636f756e7400000000000000000000000000000000000000006020808301919091528251808401909352600183527f31000000000000000000000000000000000000000000000000000000000000009083015291565b97989097965046955030945091925090565b5f7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5460021815610ea3577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b610ead83836118de565b5060019998505050505050505050565b610ec5611572565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55610f29848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061160492505050565b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610fde573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110029190612a4b565b905090565b7f0000000000000000000000000000000000000000000000000000000000000000805468010000000000000000810460ff16159067ffffffffffffffff165f811580156110515750825b90505f8267ffffffffffffffff16600114801561106d5750303b155b90508115801561107b575080155b156110b2576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000016600117855583156111135784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b61111c866119b0565b8315610d415784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201525f602482018190529073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610fc3565b7f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d54600214611250577f0f2e5b6c000000000000000000000000000000000000000000000000000000005f5260045ffd5b61125a82826118de565b5050505050505050565b61126c611572565b73ffffffffffffffffffffffffffffffffffffffff811615806112a4575073ffffffffffffffffffffffffffffffffffffffff811630145b156112f8576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b61130181611af4565b50565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030147f00000000000000000000000000000000000000000000000000000000000000004614166113f75750604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000009181019190915246606082015230608082015260a090205b6719010000000000005f5280601a5281603a52604260182090505f603a52919050565b5f6001821015611456576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83835f818110611469576114696129bd565b919091013560f81c91508190506114cc576114c48561148b8560018189612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611bf592505050565b915050610705565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611540576114c4856115078560018189612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611c6392505050565b6040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906115b85750333014155b80156115c957506115c7611cac565b155b15611602576040517f4a0bfec10000000000000000000000000000000000000000000000000000000081523360048201526024016112ef565b565b5f5f82516020840185875af180611620576040513d5f823e3d81fd5b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611602576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e740000000060448201526064016112ef565b5f60016116d66101008501856129ea565b90501015611710576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f61171f6101008501856129ea565b5f81811061172f5761172f6129bd565b919091013560f81c91508190506117e0577f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f908152601c849052603c81209061177d6101008701876129ea565b61178b916001908290612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509293506117d692506117d1915084905083611bf5565b611d1e565b9350505050610699565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611540575f6118196101008601866129ea565b611827916001908290612a8f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092935061186d92506117d1915086905083611c63565b95945050505050565b8015611301576040515f9033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d805f8114610bc9576040519150601f19603f3d011682016040523d82523d5f602084013e610bc9565b5f80806118ed84860186612bc2565b9250925092508051835114158061190657508151835114155b1561193d576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82515f5b818110156119a75761199f85828151811061195e5761195e6129bd565b6020026020010151858381518110611978576119786129bd565b6020026020010151858481518110611992576119926129bd565b6020026020010151611604565b600101611941565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff81166119ff576040517fb20f76e30000000000000000000000000000000000000000000000000000000081525f60048201526024016112ef565b807ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c0980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604051828216917f000000000000000000000000000000000000000000000000000000000000000016907fec6a23b49d2c363d250c9dda15610e835d428207d15ddb36a6c230e37371ddf1905f90a360405173ffffffffffffffffffffffffffffffffffffffff8216905f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c09805473ffffffffffffffffffffffffffffffffffffffff908116908316819003611b83576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016112ef565b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f80611c018484611d32565b9050611c417ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff9182169116149392505050565b5f610705611ca57ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b8484611d5a565b5f611ceb7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b5f81611d2b576001610699565b5f92915050565b5f5f5f5f611d408686611e85565b925092509250611d508282611ece565b5090949350505050565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff168585604051602401611d87929190612cb0565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1626ba7e0000000000000000000000000000000000000000000000000000000017905251611dea9190612cc8565b5f60405180830381855afa9150503d805f8114611e22576040519150601f19603f3d011682016040523d82523d5f602084013e611e27565b606091505b5091509150818015611e3b57506020815110155b8015611e7b575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611e799083016020908101908401612a4b565b145b9695505050505050565b5f5f5f8351604103611ebc576020840151604085015160608601515f1a611eae88828585611fd1565b955095509550505050611ec7565b505081515f91506002905b9250925092565b5f826003811115611ee157611ee1612a62565b03611eea575050565b6001826003811115611efe57611efe612a62565b03611f35576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115611f4957611f49612a62565b03611f83576040517ffce698f7000000000000000000000000000000000000000000000000000000008152600481018290526024016112ef565b6003826003811115611f9757611f97612a62565b03610da4576040517fd78bce0c000000000000000000000000000000000000000000000000000000008152600481018290526024016112ef565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561200a57505f9150600390508261209c565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561205b573d5f5f3e3d5ffd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff811661209357505f92506001915082905061209c565b92505f91508190505b9450945094915050565b5f602082840312156120b6575f5ffd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610705575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561213b5761213b6120e5565b604052919050565b5f82601f830112612152575f5ffd5b813567ffffffffffffffff81111561216c5761216c6120e5565b61217f6020601f19601f84011601612112565b818152846020838601011115612193575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f602082840312156121bf575f5ffd5b813567ffffffffffffffff8111156121d5575f5ffd5b6121e184828501612143565b949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611301575f5ffd5b5f5f83601f84011261221a575f5ffd5b50813567ffffffffffffffff811115612231575f5ffd5b602083019150836020828501011115612248575f5ffd5b9250929050565b5f5f5f5f5f60808688031215612263575f5ffd5b853561226e816121e9565b9450602086013561227e816121e9565b935060408601359250606086013567ffffffffffffffff8111156122a0575f5ffd5b6122ac8882890161220a565b969995985093965092949392505050565b5f5f5f604084860312156122cf575f5ffd5b83359250602084013567ffffffffffffffff8111156122ec575f5ffd5b6122f88682870161220a565b9497909650939450505050565b5f5f83601f840112612315575f5ffd5b50813567ffffffffffffffff81111561232c575f5ffd5b6020830191508360208260051b8501011115612248575f5ffd5b5f5f5f5f60408587031215612359575f5ffd5b843567ffffffffffffffff81111561236f575f5ffd5b61237b87828801612305565b909550935050602085013567ffffffffffffffff81111561239a575f5ffd5b6123a687828801612305565b95989497509550505050565b5f5f5f606084860312156123c4575f5ffd5b833567ffffffffffffffff8111156123da575f5ffd5b840161012081870312156123ec575f5ffd5b95602085013595506040909401359392505050565b5f5f5f5f5f5f60a08789031215612416575f5ffd5b8635612421816121e9565b95506020870135945060408701359350606087013561243f816121e9565b9250608087013567ffffffffffffffff81111561245a575f5ffd5b61246689828a0161220a565b979a9699509497509295939492505050565b5f5f5f5f5f5f6060878903121561248d575f5ffd5b863567ffffffffffffffff8111156124a3575f5ffd5b6124af89828a01612305565b909750955050602087013567ffffffffffffffff8111156124ce575f5ffd5b6124da89828a01612305565b909550935050604087013567ffffffffffffffff8111156124f9575f5ffd5b61246689828a01612305565b5f5f5f5f60608587031215612518575f5ffd5b84359350602085013567ffffffffffffffff811115612535575f5ffd5b6125418782880161220a565b9598909750949560400135949350505050565b5f5f60408385031215612565575f5ffd5b8235612570816121e9565b946020939093013593505050565b5f5f6020838503121561258f575f5ffd5b823567ffffffffffffffff8111156125a5575f5ffd5b6125b18582860161220a565b90969095509350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f61262560e08301896125bd565b828103604084015261263781896125bd565b6060840188905273ffffffffffffffffffffffffffffffffffffffff8716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b8181101561269957835183526020938401939092019160010161267b565b50909b9a5050505050505050505050565b5f5f5f5f5f5f5f5f5f60a08a8c0312156126c2575f5ffd5b893567ffffffffffffffff8111156126d8575f5ffd5b6126e48c828d01612305565b909a5098505060208a013567ffffffffffffffff811115612703575f5ffd5b61270f8c828d01612305565b90985096505060408a013567ffffffffffffffff81111561272e575f5ffd5b61273a8c828d01612305565b90965094505060608a013561274e816121e9565b925060808a013567ffffffffffffffff811115612769575f5ffd5b6127758c828d0161220a565b915080935050809150509295985092959850929598565b5f5f5f5f6060858703121561279f575f5ffd5b84356127aa816121e9565b935060208501359250604085013567ffffffffffffffff8111156127cc575f5ffd5b6123a68782880161220a565b5f5f5f5f5f5f5f5f60a0898b0312156127ef575f5ffd5b88356127fa816121e9565b9750602089013561280a816121e9565b9650604089013567ffffffffffffffff811115612825575f5ffd5b6128318b828c01612305565b909750955050606089013567ffffffffffffffff811115612850575f5ffd5b61285c8b828c01612305565b909550935050608089013567ffffffffffffffff81111561287b575f5ffd5b6128878b828c0161220a565b999c989b5096995094979396929594505050565b5f602082840312156128ab575f5ffd5b8135610705816121e9565b5f5f5f5f5f5f5f5f6080898b0312156128cd575f5ffd5b883567ffffffffffffffff8111156128e3575f5ffd5b6128ef8b828c01612305565b909950975050602089013567ffffffffffffffff81111561290e575f5ffd5b61291a8b828c01612305565b909750955050604089013567ffffffffffffffff811115612939575f5ffd5b6129458b828c01612305565b909550935050606089013567ffffffffffffffff81111561287b575f5ffd5b5f5f5f5f5f5f60a08789031215612979575f5ffd5b8635612984816121e9565b95506020870135612994816121e9565b94506040870135935060608701359250608087013567ffffffffffffffff81111561245a575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612a1d575f5ffd5b83018035915067ffffffffffffffff821115612a37575f5ffd5b602001915036819003821315612248575f5ffd5b5f60208284031215612a5b575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f5f85851115612a9d575f5ffd5b83861115612aa9575f5ffd5b5050820193919092039150565b5f67ffffffffffffffff821115612acf57612acf6120e5565b5060051b60200190565b5f82601f830112612ae8575f5ffd5b8135612afb612af682612ab6565b612112565b8082825260208201915060208360051b860101925085831115612b1c575f5ffd5b602085015b83811015612b39578035835260209283019201612b21565b5095945050505050565b5f82601f830112612b52575f5ffd5b8135612b60612af682612ab6565b8082825260208201915060208360051b860101925085831115612b81575f5ffd5b602085015b83811015612b3957803567ffffffffffffffff811115612ba4575f5ffd5b612bb3886020838a0101612143565b84525060209283019201612b86565b5f5f5f60608486031215612bd4575f5ffd5b833567ffffffffffffffff811115612bea575f5ffd5b8401601f81018613612bfa575f5ffd5b8035612c08612af682612ab6565b8082825260208201915060208360051b850101925088831115612c29575f5ffd5b6020840193505b82841015612c54578335612c43816121e9565b825260209384019390910190612c30565b9550505050602084013567ffffffffffffffff811115612c72575f5ffd5b612c7e86828701612ad9565b925050604084013567ffffffffffffffff811115612c9a575f5ffd5b612ca686828701612b43565b9150509250925092565b828152604060208201525f6121e160408301846125bd565b5f82518060208501845e5f92019182525091905056fea2646970667358221220feb32d151bee9ae1d63dedd2c016d225577b807df04828df2c012bce1219a43164736f6c634300081c0033",
    sourceMap:
      "196:2347:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1231:298:180;;;;;;;;;;-1:-1:-1;1231:298:180;;;;;:::i;:::-;;:::i;:::-;;;516:14:231;;509:22;491:41;;479:2;464:18;1231:298:180;;;;;;;;630:217:13;;;;;;;;;;-1:-1:-1;630:217:13;;;;;:::i;:::-;;:::i;:::-;;;2164:25:231;;;2152:2;2137:18;630:217:13;2018:177:231;505:212:180;;;;;;;;;;-1:-1:-1;505:212:180;;;;;:::i;:::-;669:41;505:212;;;;;;;;;;;3696:66:231;3684:79;;;3666:98;;3654:2;3639:18;505:212:180;3522:248:231;1257:286:13;;;;;;;;;;-1:-1:-1;1257:286:13;;;;;:::i;:::-;;:::i;2088:389:9:-;;;;;;;;;;-1:-1:-1;2088:389:9;;;;;:::i;:::-;;:::i;:::-;;1139:385:165;;;;;;;;;;-1:-1:-1;1139:385:165;;;;;:::i;:::-;;:::i;550:282:0:-;;;;;;;;;;-1:-1:-1;550:282:0;;;;;:::i;:::-;;:::i;1781:174::-;;;;;;;;;;-1:-1:-1;1781:174:0;;;;;:::i;:::-;;:::i;2894:453:9:-;;;;;;;;;;-1:-1:-1;2894:453:9;;;;;:::i;:::-;;:::i;5172:580::-;;;;;;:::i;:::-;;:::i;:::-;;;9679:42:231;9667:55;;;9649:74;;9637:2;9622:18;5172:580:9;9503:226:231;5830:111:9;;;:::i;3907:558::-;;;;;;:::i;:::-;;:::i;6098:264::-;;;;;;;;;;-1:-1:-1;6098:264:9;;;;;:::i;:::-;;:::i;1581:153:0:-;;;;;;;;;;-1:-1:-1;1581:153:0;;;;;:::i;:::-;;:::i;6989:596:12:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;3916:90:1:-;;;;;;;;;;-1:-1:-1;1530:66:1;3980:19;;;3916:90;;889:334:0;;;;;;;;;;-1:-1:-1;889:334:0;;;;;:::i;:::-;;:::i;6632:109:9:-;;;;;;;;;;-1:-1:-1;6722:12:9;6632:109;;1593:155;;;;;;;;;;-1:-1:-1;1593:155:9;;;;;:::i;:::-;;:::i;961:264:180:-;;;;;;;;;;-1:-1:-1;961:264:180;;;;;:::i;:::-;1170:48;961:264;;;;;;;;;;;6479:115:9;;;;;;;;;;;;;:::i;3224:101:1:-;;;;;;;;;;-1:-1:-1;3224:101:1;;;;;:::i;:::-;;:::i;771:121:165:-;;;;;;;;;;;;;:::i;1272:258:0:-;;;;;;;;;;-1:-1:-1;1272:258:0;;;;;:::i;:::-;;:::i;723:232:180:-;;;;;;;;;;-1:-1:-1;723:232:180;;;;;:::i;:::-;905:43;723:232;;;;;;;;;3575:242:1;;;;;;;;;;-1:-1:-1;3575:242:1;;;;;:::i;:::-;;:::i;1231:298:180:-;1318:4;1353:48;;;1368:33;1353:48;;:113;;-1:-1:-1;1417:49:180;;;1432:34;1417:49;1353:113;:169;;;-1:-1:-1;1482:40:180;;;1497:25;1482:40;1353:169;1334:188;1231:298;-1:-1:-1;;1231:298:180:o;630:217:13:-;697:7;716:18;388:47;787:7;777:18;;;;;;747:49;;;;;;;;18785:25:231;;;18841:2;18826:18;;18819:34;18773:2;18758:18;;18611:248;747:49:13;;;;;;;;;;;;;737:60;;;;;;716:81;;814:26;829:10;814:14;:26::i;:::-;807:33;630:217;-1:-1:-1;;;630:217:13:o;1257:286::-;1352:6;1374:62;1392:32;1418:4;1407:16;;;;;;2164:25:231;;2152:2;2137:18;;2018:177;1407:16:13;;;;;;;;;;;;;1392:14;:32::i;:::-;1426:9;;1374:17;:62::i;:::-;1370:125;;;-1:-1:-1;1459:25:13;1452:32;;1370:125;-1:-1:-1;1511:25:13;1257:286;;;;;:::o;2088:389:9:-;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29:::0;2255:26:9;;::::2;2251:85;;2304:21;;;;;;;;;;;;;;2251:85;2362:4:::0;2345:14:::2;2383:88;2407:6;2403:1;:10;2383:88;;;2434:26;2440:4;;2445:1;2440:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2449:1;2452:4;;2457:1;2452:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2434:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;;-1:-1:-1;2434:5:9::2;::::0;-1:-1:-1;;;2434:26:9:i:2;:::-;2415:3;;2383:88;;;;2241:236;953:1:14::1;933:18;926:29;2088:389:9::0;;;;:::o;1139:385:165:-;1314:22;1348:24;:22;:24::i;:::-;1399:38;1418:6;1426:10;1399:18;:38::i;:::-;1382:55;;1485:32;1497:19;1485:11;:32::i;550:282:0:-;733:4;1106:18:14;1100:25;1097:1;1093:33;1090:238;;;1157:66;1152:3;1145:79;1279:3;1274;1267:16;1090:238;778:25:0::1;796:6;;778:17;:25::i;:::-;-1:-1:-1::0;821:4:0::1;550:282:::0;;;;;;;;:::o;1781:174::-;1106:18:14;1100:25;1097:1;1090:238;;;1157:66;1152:3;1145:79;1279:3;1274;1267:16;1090:238;1923:25:0::1;1941:6;;1923:17;:25::i;:::-;1781:174:::0;;;:::o;2894:453:9:-;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29:::0;3087:26:9;;::::2;;::::0;:57:::2;;-1:-1:-1::0;3117:27:9;;::::2;;3087:57;3083:116;;;3167:21;;;;;;;;;;;;;;3083:116;3225:4:::0;3208:14:::2;3246:95;3270:6;3266:1;:10;3246:95;;;3297:33;3303:4;;3308:1;3303:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3312:5;;3318:1;3312:8;;;;;;;:::i;:::-;;;;;;;3322:4;;3327:1;3322:7;;;;;;;:::i;3297:33::-;3278:3;;3246:95;;;;3073:274;953:1:14::1;933:18;926:29;2894:453:9::0;;;;;;:::o;5172:580::-;5362:19;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29;5453:4:9::2;5447:11;5482:15;5545:3;5528:15;5523:3;5510:39;5603:4;5598:3;5593;5586:5;5578:30;5563:45;;;;5632:11;5622:114;;5676:10;5670:4;5663:24;5717:4;5711;5704:18;5622:114;953:1:14::1;933:18;926:29;5172:580:9::0;;;;;;:::o;5830:111::-;6722:12;5879:55;;;;;5928:4;5879:55;;;9649:74:231;5879:22:9;;;;;;;;5909:9;;9622:18:231;;5879:55:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5830:111::o;3907:558::-;4082:19;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29;4173:4:9::2;4167:11;4202:15;4265:3;4248:15;4243:3;4230:39;4317:3;4312;4305:5;4298:23;4283:38;;;;4345:11;4335:114;;4389:10;4383:4;4376:24;4430:4;4424;4417:18;4335:114;953:1:14::1;933:18;926:29;3907:558:9::0;;;;;:::o;6098:264::-;1142:17;:15;:17::i;:::-;6212:29:::1;::::0;::::1;6208:90;;6264:23;;;;;;;;;;;;;;6208:90;6722:12:::0;6307:48:::1;::::0;;;;:23:::1;19846:55:231::0;;;6307:48:9::1;::::0;::::1;19828:74:231::0;19918:18;;;19911:34;;;6307:23:9;;;::::1;::::0;::::1;::::0;19801:18:231;;6307:48:9::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6098:264:::0;;:::o;1581:153:0:-;1106:18:14;1100:25;1097:1;1090:238;;;1157:66;1152:3;1145:79;1279:3;1274;1267:16;1090:238;1704:23:0::1;1722:4;;1704:17;:23::i;:::-;1581:153:::0;;:::o;6989:596:12:-;7327:16;7114:18;;7087:13;;;7114:18;7385:23;8405:21:1;;;;;;;;;;;;;;;;;;;;8534:13;;;;;;;;;;;;;;;;8405:21;8235:319;7385:23:12;6989:596;;7367:41;;;-1:-1:-1;7428:13:12;;-1:-1:-1;7479:4:12;;-1:-1:-1;6989:596:12;;-1:-1:-1;6989:596:12;:::o;889:334:0:-;1124:4;1106:18:14;1100:25;1097:1;1093:33;1090:238;;;1157:66;1152:3;1145:79;1279:3;1274;1267:16;1090:238;1169:25:0::1;1187:6;;1169:17;:25::i;:::-;-1:-1:-1::0;1212:4:0::1;889:334:::0;;;;;;;;;;;:::o;1593:155:9:-;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29;1717:24:9::2;1723:4;1729:5;1736:4;;1717:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;;-1:-1:-1;1717:5:9::2;::::0;-1:-1:-1;;;1717:24:9:i:2;:::-;953:1:14::1;933:18;926:29;1593:155:9::0;;;;:::o;6479:115::-;6550:37;;;;;6581:4;6550:37;;;9649:74:231;6524:7:9;;6550:22;6722:12;6550:22;;;;9622:18:231;;6550:37:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6543:44;;6479:115;:::o;3224:101:1:-;8234:16:11;3851:21;;;;;;;3850:22;;3903:20;;3690:47;4287:16;;:34;;;;;4307:14;4287:34;4267:54;;4331:17;4351:11;:16;;4366:1;4351:16;:50;;;;-1:-1:-1;4379:4:11;4371:25;:30;4351:50;4331:70;;4417:12;4416:13;:30;;;;;4434:12;4433:13;4416:30;4412:91;;;4469:23;;;;;;;;;;;;;;4412:91;4512:24;;;;4535:1;4512:24;;;4546:73;;;;4580:28;;;;;;;;4546:73;3299:19:1::1;3311:6;3299:11;:19::i;:::-;4643:14:11::0;4639:107;;;4673:29;;;;;;4721:14;;-1:-1:-1;20298:50:231;;4721:14:11;;20286:2:231;20271:18;4721:14:11;;;;;;;3680:1072;;;;;3224:101:1;:::o;771:121:165:-;846:39;;;;;876:4;846:39;;;20541:74:231;820:7:165;20631:18:231;;;20624:91;;;820:7:165;846:21;6722:12:9;846:21:165;;;;20514:18:231;;846:39:165;20359:362:231;1272:258:0;1106:18:14;1100:25;1097:1;1090:238;;;1157:66;1152:3;1145:79;1279:3;1274;1267:16;1090:238;1498:25:0::1;1516:6;;1498:17;:25::i;:::-;1272:258:::0;;;;;;;;:::o;3575:242:1:-;1142:17:9;:15;:17::i;:::-;3666:22:1::1;::::0;::::1;::::0;;:51:::1;;-1:-1:-1::0;3692:25:1::1;::::0;::::1;3712:4;3692:25;3666:51;3662:111;;;3740:22;::::0;::::1;::::0;;9679:42:231;9667:55;;3740:22:1::1;::::0;::::1;9649:74:231::0;9622:18;;3740:22:1::1;;;;;;;;3662:111;3782:28;3801:8;3782:18;:28::i;:::-;3575:242:::0;:::o;5757:885:12:-;6066:22;9114:11;9255:9;9252:25;9069:14;9225:9;9222:28;9218:60;6102:73;;-1:-1:-1;8545:4:12;8539:11;;8606:16;8596:27;;8383:15;8650:4;8643:12;;8636:31;8426:18;8701:12;;;8694:33;;;;8761:9;8754:4;8747:12;;8740:31;8805:9;8798:4;8791:12;;8784:31;8854:4;8841:18;;6102:73;6309:18;6303:4;6296:32;6375:6;6369:4;6362:20;6439:10;6433:4;6426:24;6515:4;6509;6499:21;6489:31;;6624:1;6618:4;6611:15;5757:885;;;:::o;7499:730:1:-;7656:4;7699:1;7680:20;;7676:80;;;7723:22;;;;;;;;;;;;;;7676:80;7765:19;7793:9;;7803:1;7793:12;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;7793:12:1;;-1:-1:-1;7816:368:1;;7913:56;7939:14;7955:13;:9;7965:1;7955:9;;:13;:::i;:::-;7913:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7913:25:1;;-1:-1:-1;;;7913:56:1:i;:::-;7906:63;;;;;7816:368;7990:46;;;;;7986:198;;8109:64;8143:14;8159:13;:9;8169:1;8159:9;;:13;:::i;:::-;8109:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8109:33:1;;-1:-1:-1;;;8109:64:1:i;7986:198::-;8200:22;;;;;;;;;;;;;;7048:205:9;7103:10;:35;6722:12;7103:35;;;;;:66;;-1:-1:-1;7142:10:9;7164:4;7142:27;;7103:66;:85;;;;;7174:14;:12;:14::i;:::-;7173:15;7103:85;7099:148;;;7211:25;;;;;7225:10;7211:25;;;9649:74:231;9622:18;;7211:25:9;9503:226:231;7099:148:9;7048:205::o;8300:406::-;8498:1;8492:4;8485;8479:11;8472:4;8466;8462:15;8455:5;8447:6;8440:5;8435:65;8524:4;8514:176;;8565:4;8559:11;8613:16;8607:4;8602:3;8587:43;8659:16;8654:3;8647:29;8514:176;;8300:406;;;:::o;1605:183:165:-;1692:10;:35;6722:12:9;1692:35:165;;1671:110;;;;;;;21453:2:231;1671:110:165;;;21435:21:231;21492:2;21472:18;;;21465:30;21531;21511:18;;;21504:58;21579:18;;1671:110:165;21251:352:231;4962:981:1;5114:22;5182:1;5156:16;;;;:6;:16;:::i;:::-;:23;;:27;5152:87;;;5206:22;;;;;;;;;;;;;;5152:87;5248:19;5276:16;;;;:6;:16;:::i;:::-;5293:1;5276:19;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;5276:19:1;;-1:-1:-1;5306:592:1;;1401:34:215;5396:18:1;1388:48:215;;;1497:4;1490:25;;;1595:4;1579:21;;;5491:16:1;;;;;;:::i;:::-;:20;;5508:1;;5491:20;;;:::i;:::-;5466:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5466:45:1;;-1:-1:-1;5532:74:1;;-1:-1:-1;5557:48:1;;-1:-1:-1;5583:10:1;;-1:-1:-1;5466:45:1;5557:25;:48::i;:::-;5532:24;:74::i;:::-;5525:81;;;;;;;5306:592;5627:46;;;;;5623:275;;5739:22;5764:16;;;;:6;:16;:::i;:::-;:20;;5781:1;;5764:20;;;:::i;:::-;5739:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5739:45:1;;-1:-1:-1;5805:82:1;;-1:-1:-1;5830:56:1;;-1:-1:-1;5864:10:1;;-1:-1:-1;5739:45:1;5830:33;:56::i;5805:82::-;5798:89;4962:981;-1:-1:-1;;;;;4962:981:1:o;4356:382:165:-;4437:24;;4433:299;;4496:126;;4478:12;;4504:10;;4587:17;;4545:19;;4478:12;4496:126;4478:12;4496:126;4545:19;4504:10;4587:17;4496:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2027:514:0;2110:21;;;2216:51;;;;2227:6;2216:51;:::i;:::-;2096:171;;;;;;2296:4;:11;2281:4;:11;:26;;:57;;;;2326:5;:12;2311:4;:11;:27;;2281:57;2277:116;;;2361:21;;;;;;;;;;;;;;2277:116;2419:11;;2402:14;2440:95;2464:6;2460:1;:10;2440:95;;;2491:33;2497:4;2502:1;2497:7;;;;;;;;:::i;:::-;;;;;;;2506:5;2512:1;2506:8;;;;;;;;:::i;:::-;;;;;;;2516:4;2521:1;2516:7;;;;;;;;:::i;:::-;;;;;;;2491:5;:33::i;:::-;2472:3;;2440:95;;;;2086:455;;;;2027:514;;:::o;4012:305:1:-;4080:20;;;4076:82;;4123:24;;;;;4144:1;4123:24;;;9649:74:231;9622:18;;4123:24:1;9503:226:231;4076:82:1;4189:6;1530:66;4167:28;;;;;;;;;;;4210:45;;;;;;4234:12;4210:45;;;;-1:-1:-1;;4210:45:1;4270:40;;;;;;4299:1;;4270:40;;4299:1;;4270:40;4012:305;:::o;4323:354::-;1530:66;4477:14;;;;;;;4505:20;;;;;4501:80;;4548:22;;;;;9679:42:231;9667:55;;4548:22:1;;;9649:74:231;9622:18;;4548:22:1;9503:226:231;4501:80:1;4590:25;;;;;;;;;;;;;4630:40;;;;;;;;-1:-1:-1;;4630:40:1;4386:291;;4323:354;:::o;6338:203::-;6436:4;;6472:25;:6;6487:9;6472:14;:25::i;:::-;6452:45;;6527:7;1530:66;3980:19;;;;3916:90;6527:7;6514:20;;;;;;;;6338:203;-1:-1:-1;;;6338:203:1:o;6841:207::-;6947:4;6970:71;7014:7;1530:66;3980:19;;;;3916:90;7014:7;7023:6;7031:9;6970:43;:71::i;8560:115::-;8624:4;8661:7;1530:66;3980:19;;;;3916:90;8661:7;8647:21;;:10;:21;;;8640:28;;8560:115;:::o;7525:175:9:-;7596:22;7637:7;:56;;305:1:167;7637:56:9;;;465:1:167;7630:63:9;7525:175;-1:-1:-1;;7525:175:9:o;3714:255:214:-;3792:7;3812:17;3831:18;3851:16;3871:27;3882:4;3888:9;3871:10;:27::i;:::-;3811:87;;;;;;3908:28;3920:5;3927:8;3908:11;:28::i;:::-;-1:-1:-1;3953:9:214;;3714:255;-1:-1:-1;;;;3714:255:214:o;1877:458:216:-;2020:4;2037:12;2051:19;2074:6;:17;;2148:4;2154:9;2105:60;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2105:60:216;;;;;;;;;;;;;;;;;;;;2074:101;;;2105:60;2074:101;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2036:139;;;;2193:7;:42;;;;;2233:2;2216:6;:13;:19;;2193:42;:134;;;;-1:-1:-1;2251:29:216;;2292:34;;2251:29;;;;;;;;;;;;:::i;:::-;:76;2193:134;2185:143;1877:458;-1:-1:-1;;;;;;1877:458:216:o;2129:778:214:-;2232:17;2251:16;2269:14;2299:9;:16;2319:2;2299:22;2295:606;;2604:4;2589:20;;2583:27;2653:4;2638:20;;2632:27;2710:4;2695:20;;2689:27;2337:9;2681:36;2751:25;2762:4;2681:36;2583:27;2632;2751:10;:25::i;:::-;2744:32;;;;;;;;;;;2295:606;-1:-1:-1;;2872:16:214;;2823:1;;-1:-1:-1;2827:35:214;;2295:606;2129:778;;;;;:::o;7280:532::-;7375:20;7366:5;:29;;;;;;;;:::i;:::-;;7362:444;;7280:532;;:::o;7362:444::-;7471:29;7462:5;:38;;;;;;;;:::i;:::-;;7458:348;;7523:23;;;;;;;;;;;;;;7458:348;7576:35;7567:5;:44;;;;;;;;:::i;:::-;;7563:243;;7634:46;;;;;;;;2164:25:231;;;2137:18;;7634:46:214;2018:177:231;7563:243:214;7710:30;7701:5;:39;;;;;;;;:::i;:::-;;7697:109;;7763:32;;;;;;;;2164:25:231;;;2137:18;;7763:32:214;2018:177:231;5203:1551:214;5329:17;;;6283:66;6270:79;;6266:164;;;-1:-1:-1;6381:1:214;;-1:-1:-1;6385:30:214;;-1:-1:-1;6417:1:214;6365:54;;6266:164;6541:24;;;6524:14;6541:24;;;;;;;;;26049:25:231;;;26122:4;26110:17;;26090:18;;;26083:45;;;;26144:18;;;26137:34;;;26187:18;;;26180:34;;;6541:24:214;;26021:19:231;;6541:24:214;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6541:24:214;;-1:-1:-1;;6541:24:214;;;-1:-1:-1;;6579:20:214;;;6575:113;;-1:-1:-1;6631:1:214;;-1:-1:-1;6635:29:214;;-1:-1:-1;6631:1:214;;-1:-1:-1;6615:62:214;;6575:113;6706:6;-1:-1:-1;6714:20:214;;-1:-1:-1;6714:20:214;;-1:-1:-1;5203:1551:214;;;;;;;;;:::o;14:332:231:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:184;595:77;592:1;585:88;692:4;689:1;682:15;716:4;713:1;706:15;732:334;803:2;797:9;859:2;849:13;;-1:-1:-1;;845:86:231;833:99;;962:18;947:34;;983:22;;;944:62;941:88;;;1009:18;;:::i;:::-;1045:2;1038:22;732:334;;-1:-1:-1;732:334:231:o;1071:617::-;1113:5;1166:3;1159:4;1151:6;1147:17;1143:27;1133:55;;1184:1;1181;1174:12;1133:55;1224:6;1211:20;1254:18;1246:6;1243:30;1240:56;;;1276:18;;:::i;:::-;1320:118;1432:4;-1:-1:-1;;1356:4:231;1348:6;1344:17;1340:90;1336:101;1320:118;:::i;:::-;1463:6;1454:7;1447:23;1517:3;1510:4;1501:6;1493;1489:19;1485:30;1482:39;1479:59;;;1534:1;1531;1524:12;1479:59;1599:6;1592:4;1584:6;1580:17;1573:4;1564:7;1560:18;1547:59;1655:1;1626:20;;;1648:4;1622:31;1615:42;;;;1630:7;1071:617;-1:-1:-1;;;1071:617:231:o;1693:320::-;1761:6;1814:2;1802:9;1793:7;1789:23;1785:32;1782:52;;;1830:1;1827;1820:12;1782:52;1870:9;1857:23;1903:18;1895:6;1892:30;1889:50;;;1935:1;1932;1925:12;1889:50;1958:49;1999:7;1990:6;1979:9;1975:22;1958:49;:::i;:::-;1948:59;1693:320;-1:-1:-1;;;;1693:320:231:o;2200:154::-;2286:42;2279:5;2275:54;2268:5;2265:65;2255:93;;2344:1;2341;2334:12;2359:347;2410:8;2420:6;2474:3;2467:4;2459:6;2455:17;2451:27;2441:55;;2492:1;2489;2482:12;2441:55;-1:-1:-1;2515:20:231;;2558:18;2547:30;;2544:50;;;2590:1;2587;2580:12;2544:50;2627:4;2619:6;2615:17;2603:29;;2679:3;2672:4;2663:6;2655;2651:19;2647:30;2644:39;2641:59;;;2696:1;2693;2686:12;2641:59;2359:347;;;;;:::o;2711:806::-;2808:6;2816;2824;2832;2840;2893:3;2881:9;2872:7;2868:23;2864:33;2861:53;;;2910:1;2907;2900:12;2861:53;2949:9;2936:23;2968:31;2993:5;2968:31;:::i;:::-;3018:5;-1:-1:-1;3075:2:231;3060:18;;3047:32;3088:33;3047:32;3088:33;:::i;:::-;3140:7;-1:-1:-1;3220:2:231;3205:18;;3192:32;;-1:-1:-1;3301:2:231;3286:18;;3273:32;3328:18;3317:30;;3314:50;;;3360:1;3357;3350:12;3314:50;3399:58;3449:7;3440:6;3429:9;3425:22;3399:58;:::i;:::-;2711:806;;;;-1:-1:-1;2711:806:231;;-1:-1:-1;3476:8:231;;3373:84;2711:806;-1:-1:-1;;;2711:806:231:o;3775:523::-;3854:6;3862;3870;3923:2;3911:9;3902:7;3898:23;3894:32;3891:52;;;3939:1;3936;3929:12;3891:52;3984:23;;;-1:-1:-1;4082:2:231;4067:18;;4054:32;4109:18;4098:30;;4095:50;;;4141:1;4138;4131:12;4095:50;4180:58;4230:7;4221:6;4210:9;4206:22;4180:58;:::i;:::-;3775:523;;4257:8;;-1:-1:-1;4154:84:231;;-1:-1:-1;;;;3775:523:231:o;4303:367::-;4366:8;4376:6;4430:3;4423:4;4415:6;4411:17;4407:27;4397:55;;4448:1;4445;4438:12;4397:55;-1:-1:-1;4471:20:231;;4514:18;4503:30;;4500:50;;;4546:1;4543;4536:12;4500:50;4583:4;4575:6;4571:17;4559:29;;4643:3;4636:4;4626:6;4623:1;4619:14;4611:6;4607:27;4603:38;4600:47;4597:67;;;4660:1;4657;4650:12;4675:779;4808:6;4816;4824;4832;4885:2;4873:9;4864:7;4860:23;4856:32;4853:52;;;4901:1;4898;4891:12;4853:52;4941:9;4928:23;4974:18;4966:6;4963:30;4960:50;;;5006:1;5003;4996:12;4960:50;5045:70;5107:7;5098:6;5087:9;5083:22;5045:70;:::i;:::-;5134:8;;-1:-1:-1;5019:96:231;-1:-1:-1;;5222:2:231;5207:18;;5194:32;5251:18;5238:32;;5235:52;;;5283:1;5280;5273:12;5235:52;5322:72;5386:7;5375:8;5364:9;5360:24;5322:72;:::i;:::-;4675:779;;;;-1:-1:-1;5413:8:231;-1:-1:-1;;;;4675:779:231:o;5459:634::-;5576:6;5584;5592;5645:2;5633:9;5624:7;5620:23;5616:32;5613:52;;;5661:1;5658;5651:12;5613:52;5701:9;5688:23;5734:18;5726:6;5723:30;5720:50;;;5766:1;5763;5756:12;5720:50;5789:22;;5845:3;5827:16;;;5823:26;5820:46;;;5862:1;5859;5852:12;5820:46;5885:2;5956;5941:18;;5928:32;;-1:-1:-1;6057:2:231;6042:18;;;6029:32;;5459:634;-1:-1:-1;;;5459:634:231:o;6280:927::-;6386:6;6394;6402;6410;6418;6426;6479:3;6467:9;6458:7;6454:23;6450:33;6447:53;;;6496:1;6493;6486:12;6447:53;6535:9;6522:23;6554:31;6579:5;6554:31;:::i;:::-;6604:5;-1:-1:-1;6682:2:231;6667:18;;6654:32;;-1:-1:-1;6785:2:231;6770:18;;6757:32;;-1:-1:-1;6867:2:231;6852:18;;6839:32;6880:33;6839:32;6880:33;:::i;:::-;6932:7;-1:-1:-1;6990:3:231;6975:19;;6962:33;7018:18;7007:30;;7004:50;;;7050:1;7047;7040:12;7004:50;7089:58;7139:7;7130:6;7119:9;7115:22;7089:58;:::i;:::-;6280:927;;;;-1:-1:-1;6280:927:231;;-1:-1:-1;6280:927:231;;7166:8;;6280:927;-1:-1:-1;;;6280:927:231:o;7740:1110::-;7909:6;7917;7925;7933;7941;7949;8002:2;7990:9;7981:7;7977:23;7973:32;7970:52;;;8018:1;8015;8008:12;7970:52;8058:9;8045:23;8091:18;8083:6;8080:30;8077:50;;;8123:1;8120;8113:12;8077:50;8162:70;8224:7;8215:6;8204:9;8200:22;8162:70;:::i;:::-;8251:8;;-1:-1:-1;8136:96:231;-1:-1:-1;;8339:2:231;8324:18;;8311:32;8368:18;8355:32;;8352:52;;;8400:1;8397;8390:12;8352:52;8439:72;8503:7;8492:8;8481:9;8477:24;8439:72;:::i;:::-;8530:8;;-1:-1:-1;8413:98:231;-1:-1:-1;;8618:2:231;8603:18;;8590:32;8647:18;8634:32;;8631:52;;;8679:1;8676;8669:12;8631:52;8718:72;8782:7;8771:8;8760:9;8756:24;8718:72;:::i;8855:643::-;8943:6;8951;8959;8967;9020:2;9008:9;8999:7;8995:23;8991:32;8988:52;;;9036:1;9033;9026:12;8988:52;9081:23;;;-1:-1:-1;9179:2:231;9164:18;;9151:32;9206:18;9195:30;;9192:50;;;9238:1;9235;9228:12;9192:50;9277:58;9327:7;9318:6;9307:9;9303:22;9277:58;:::i;:::-;8855:643;;9354:8;;-1:-1:-1;9251:84:231;;9462:2;9447:18;9434:32;;8855:643;-1:-1:-1;;;;8855:643:231:o;9734:375::-;9810:6;9818;9871:2;9859:9;9850:7;9846:23;9842:32;9839:52;;;9887:1;9884;9877:12;9839:52;9926:9;9913:23;9945:31;9970:5;9945:31;:::i;:::-;9995:5;10073:2;10058:18;;;;10045:32;;-1:-1:-1;;;9734:375:231:o;10114:409::-;10184:6;10192;10245:2;10233:9;10224:7;10220:23;10216:32;10213:52;;;10261:1;10258;10251:12;10213:52;10301:9;10288:23;10334:18;10326:6;10323:30;10320:50;;;10366:1;10363;10356:12;10320:50;10405:58;10455:7;10446:6;10435:9;10431:22;10405:58;:::i;:::-;10482:8;;10379:84;;-1:-1:-1;10114:409:231;-1:-1:-1;;;;10114:409:231:o;10528:348::-;10570:3;10608:5;10602:12;10635:6;10630:3;10623:19;10691:6;10684:4;10677:5;10673:16;10666:4;10661:3;10657:14;10651:47;10743:1;10736:4;10727:6;10722:3;10718:16;10714:27;10707:38;10865:4;-1:-1:-1;;10790:2:231;10782:6;10778:15;10774:88;10769:3;10765:98;10761:109;10754:116;;;10528:348;;;;:::o;10881:1314::-;11278:66;11270:6;11266:79;11255:9;11248:98;11382:3;11377:2;11366:9;11362:18;11355:31;11229:4;11409:46;11450:3;11439:9;11435:19;11427:6;11409:46;:::i;:::-;11503:9;11495:6;11491:22;11486:2;11475:9;11471:18;11464:50;11537:33;11563:6;11555;11537:33;:::i;:::-;11601:2;11586:18;;11579:34;;;11662:42;11650:55;;11644:3;11629:19;;11622:84;11737:3;11722:19;;11715:35;;;11787:22;;;11781:3;11766:19;;11759:51;11859:13;;11881:22;;;11931:2;11957:15;;;;-1:-1:-1;11919:15:231;;;;-1:-1:-1;12000:169:231;12014:6;12011:1;12008:13;12000:169;;;12075:13;;12063:26;;12118:2;12144:15;;;;12109:12;;;;12036:1;12029:9;12000:169;;;-1:-1:-1;12186:3:231;;10881:1314;-1:-1:-1;;;;;;;;;;;10881:1314:231:o;12200:1539::-;12387:6;12395;12403;12411;12419;12427;12435;12443;12451;12504:3;12492:9;12483:7;12479:23;12475:33;12472:53;;;12521:1;12518;12511:12;12472:53;12561:9;12548:23;12594:18;12586:6;12583:30;12580:50;;;12626:1;12623;12616:12;12580:50;12665:70;12727:7;12718:6;12707:9;12703:22;12665:70;:::i;:::-;12754:8;;-1:-1:-1;12639:96:231;-1:-1:-1;;12842:2:231;12827:18;;12814:32;12871:18;12858:32;;12855:52;;;12903:1;12900;12893:12;12855:52;12942:72;13006:7;12995:8;12984:9;12980:24;12942:72;:::i;:::-;13033:8;;-1:-1:-1;12916:98:231;-1:-1:-1;;13121:2:231;13106:18;;13093:32;13150:18;13137:32;;13134:52;;;13182:1;13179;13172:12;13134:52;13221:72;13285:7;13274:8;13263:9;13259:24;13221:72;:::i;:::-;13312:8;;-1:-1:-1;13195:98:231;-1:-1:-1;;13397:2:231;13382:18;;13369:32;13410:31;13369:32;13410:31;:::i;:::-;13460:5;-1:-1:-1;13518:3:231;13503:19;;13490:33;13548:18;13535:32;;13532:52;;;13580:1;13577;13570:12;13532:52;13619:60;13671:7;13660:8;13649:9;13645:24;13619:60;:::i;:::-;13593:86;;13698:8;13688:18;;;13725:8;13715:18;;;12200:1539;;;;;;;;;;;:::o;13996:664::-;14084:6;14092;14100;14108;14161:2;14149:9;14140:7;14136:23;14132:32;14129:52;;;14177:1;14174;14167:12;14129:52;14216:9;14203:23;14235:31;14260:5;14235:31;:::i;:::-;14285:5;-1:-1:-1;14363:2:231;14348:18;;14335:32;;-1:-1:-1;14444:2:231;14429:18;;14416:32;14471:18;14460:30;;14457:50;;;14503:1;14500;14493:12;14457:50;14542:58;14592:7;14583:6;14572:9;14568:22;14542:58;:::i;14665:1349::-;14825:6;14833;14841;14849;14857;14865;14873;14881;14934:3;14922:9;14913:7;14909:23;14905:33;14902:53;;;14951:1;14948;14941:12;14902:53;14990:9;14977:23;15009:31;15034:5;15009:31;:::i;:::-;15059:5;-1:-1:-1;15116:2:231;15101:18;;15088:32;15129:33;15088:32;15129:33;:::i;:::-;15181:7;-1:-1:-1;15239:2:231;15224:18;;15211:32;15266:18;15255:30;;15252:50;;;15298:1;15295;15288:12;15252:50;15337:70;15399:7;15390:6;15379:9;15375:22;15337:70;:::i;:::-;15426:8;;-1:-1:-1;15311:96:231;-1:-1:-1;;15514:2:231;15499:18;;15486:32;15543:18;15530:32;;15527:52;;;15575:1;15572;15565:12;15527:52;15614:72;15678:7;15667:8;15656:9;15652:24;15614:72;:::i;:::-;15705:8;;-1:-1:-1;15588:98:231;-1:-1:-1;;15793:3:231;15778:19;;15765:33;15823:18;15810:32;;15807:52;;;15855:1;15852;15845:12;15807:52;15894:60;15946:7;15935:8;15924:9;15920:24;15894:60;:::i;:::-;14665:1349;;;;-1:-1:-1;14665:1349:231;;-1:-1:-1;14665:1349:231;;;;;;15973:8;-1:-1:-1;;;14665:1349:231:o;16019:247::-;16078:6;16131:2;16119:9;16110:7;16106:23;16102:32;16099:52;;;16147:1;16144;16137:12;16099:52;16186:9;16173:23;16205:31;16230:5;16205:31;:::i;16271:1403::-;16449:6;16457;16465;16473;16481;16489;16497;16505;16558:3;16546:9;16537:7;16533:23;16529:33;16526:53;;;16575:1;16572;16565:12;16526:53;16615:9;16602:23;16648:18;16640:6;16637:30;16634:50;;;16680:1;16677;16670:12;16634:50;16719:70;16781:7;16772:6;16761:9;16757:22;16719:70;:::i;:::-;16808:8;;-1:-1:-1;16693:96:231;-1:-1:-1;;16896:2:231;16881:18;;16868:32;16925:18;16912:32;;16909:52;;;16957:1;16954;16947:12;16909:52;16996:72;17060:7;17049:8;17038:9;17034:24;16996:72;:::i;:::-;17087:8;;-1:-1:-1;16970:98:231;-1:-1:-1;;17175:2:231;17160:18;;17147:32;17204:18;17191:32;;17188:52;;;17236:1;17233;17226:12;17188:52;17275:72;17339:7;17328:8;17317:9;17313:24;17275:72;:::i;:::-;17366:8;;-1:-1:-1;17249:98:231;-1:-1:-1;;17454:2:231;17439:18;;17426:32;17483:18;17470:32;;17467:52;;;17515:1;17512;17505:12;17679:927;17785:6;17793;17801;17809;17817;17825;17878:3;17866:9;17857:7;17853:23;17849:33;17846:53;;;17895:1;17892;17885:12;17846:53;17934:9;17921:23;17953:31;17978:5;17953:31;:::i;:::-;18003:5;-1:-1:-1;18060:2:231;18045:18;;18032:32;18073:33;18032:32;18073:33;:::i;:::-;18125:7;-1:-1:-1;18205:2:231;18190:18;;18177:32;;-1:-1:-1;18308:2:231;18293:18;;18280:32;;-1:-1:-1;18389:3:231;18374:19;;18361:33;18417:18;18406:30;;18403:50;;;18449:1;18446;18439:12;18864:184;18916:77;18913:1;18906:88;19013:4;19010:1;19003:15;19037:4;19034:1;19027:15;19053:580;19130:4;19136:6;19196:11;19183:25;19286:66;19275:8;19259:14;19255:29;19251:102;19231:18;19227:127;19217:155;;19368:1;19365;19358:12;19217:155;19395:33;;19447:20;;;-1:-1:-1;19490:18:231;19479:30;;19476:50;;;19522:1;19519;19512:12;19476:50;19555:4;19543:17;;-1:-1:-1;19586:14:231;19582:27;;;19572:38;;19569:58;;;19623:1;19620;19613:12;19956:184;20026:6;20079:2;20067:9;20058:7;20054:23;20050:32;20047:52;;;20095:1;20092;20085:12;20047:52;-1:-1:-1;20118:16:231;;19956:184;-1:-1:-1;19956:184:231:o;20726:::-;20778:77;20775:1;20768:88;20875:4;20872:1;20865:15;20899:4;20896:1;20889:15;20915:331;21020:9;21031;21073:8;21061:10;21058:24;21055:44;;;21095:1;21092;21085:12;21055:44;21124:6;21114:8;21111:20;21108:40;;;21144:1;21141;21134:12;21108:40;-1:-1:-1;;21170:23:231;;;21215:25;;;;;-1:-1:-1;20915:331:231:o;21818:183::-;21878:4;21911:18;21903:6;21900:30;21897:56;;;21933:18;;:::i;:::-;-1:-1:-1;21978:1:231;21974:14;21990:4;21970:25;;21818:183::o;22006:723::-;22060:5;22113:3;22106:4;22098:6;22094:17;22090:27;22080:55;;22131:1;22128;22121:12;22080:55;22171:6;22158:20;22198:64;22214:47;22254:6;22214:47;:::i;:::-;22198:64;:::i;:::-;22286:3;22310:6;22305:3;22298:19;22342:4;22337:3;22333:14;22326:21;;22403:4;22393:6;22390:1;22386:14;22378:6;22374:27;22370:38;22356:52;;22431:3;22423:6;22420:15;22417:35;;;22448:1;22445;22438:12;22417:35;22484:4;22476:6;22472:17;22498:200;22514:6;22509:3;22506:15;22498:200;;;22606:17;;22636:18;;22683:4;22674:14;;;;22531;22498:200;;;-1:-1:-1;22716:7:231;22006:723;-1:-1:-1;;;;;22006:723:231:o;22734:825::-;22786:5;22839:3;22832:4;22824:6;22820:17;22816:27;22806:55;;22857:1;22854;22847:12;22806:55;22897:6;22884:20;22924:64;22940:47;22980:6;22940:47;:::i;22924:64::-;23012:3;23036:6;23031:3;23024:19;23068:4;23063:3;23059:14;23052:21;;23129:4;23119:6;23116:1;23112:14;23104:6;23100:27;23096:38;23082:52;;23157:3;23149:6;23146:15;23143:35;;;23174:1;23171;23164:12;23143:35;23210:4;23202:6;23198:17;23224:304;23240:6;23235:3;23232:15;23224:304;;;23328:3;23315:17;23364:18;23351:11;23348:35;23345:55;;;23396:1;23393;23386:12;23345:55;23425:58;23479:3;23472:4;23458:11;23450:6;23446:24;23442:35;23425:58;:::i;:::-;23413:71;;-1:-1:-1;23513:4:231;23504:14;;;;23257;23224:304;;23564:1464;23725:6;23733;23741;23794:2;23782:9;23773:7;23769:23;23765:32;23762:52;;;23810:1;23807;23800:12;23762:52;23850:9;23837:23;23883:18;23875:6;23872:30;23869:50;;;23915:1;23912;23905:12;23869:50;23938:22;;23991:4;23983:13;;23979:27;-1:-1:-1;23969:55:231;;24020:1;24017;24010:12;23969:55;24060:2;24047:16;24083:64;24099:47;24139:6;24099:47;:::i;24083:64::-;24169:3;24193:6;24188:3;24181:19;24225:4;24220:3;24216:14;24209:21;;24282:4;24272:6;24269:1;24265:14;24261:2;24257:23;24253:34;24239:48;;24310:7;24302:6;24299:19;24296:39;;;24331:1;24328;24321:12;24296:39;24363:4;24359:2;24355:13;24344:24;;24377:221;24393:6;24388:3;24385:15;24377:221;;;24475:3;24462:17;24492:31;24517:5;24492:31;:::i;:::-;24536:18;;24583:4;24410:14;;;;24574;;;;24377:221;;;24617:5;-1:-1:-1;;;;24675:4:231;24660:20;;24647:34;24706:18;24693:32;;24690:52;;;24738:1;24735;24728:12;24690:52;24761:63;24816:7;24805:8;24794:9;24790:24;24761:63;:::i;:::-;24751:73;;;24877:2;24866:9;24862:18;24849:32;24906:18;24896:8;24893:32;24890:52;;;24938:1;24935;24928:12;24890:52;24961:61;25014:7;25003:8;24992:9;24988:24;24961:61;:::i;:::-;24951:71;;;23564:1464;;;;;:::o;25033:289::-;25208:6;25197:9;25190:25;25251:2;25246;25235:9;25231:18;25224:30;25171:4;25271:45;25312:2;25301:9;25297:18;25289:6;25271:45;:::i;25327:301::-;25456:3;25494:6;25488:13;25540:6;25533:4;25525:6;25521:17;25516:3;25510:37;25602:1;25566:16;;25591:13;;;-1:-1:-1;25566:16:231;25327:301;-1:-1:-1;25327:301:231:o",
    linkReferences: {},
    immutableReferences: {
      "2379": [
        {
          start: 1127,
          length: 32,
        },
        {
          start: 2864,
          length: 32,
        },
        {
          start: 3233,
          length: 32,
        },
        {
          start: 3992,
          length: 32,
        },
        {
          start: 4560,
          length: 32,
        },
        {
          start: 5514,
          length: 32,
        },
        {
          start: 5694,
          length: 32,
        },
        {
          start: 6761,
          length: 32,
        },
      ],
      "2912": [
        {
          start: 4105,
          length: 32,
        },
      ],
      "3181": [
        {
          start: 4903,
          length: 32,
        },
      ],
      "3183": [
        {
          start: 4938,
          length: 32,
        },
      ],
      "3185": [
        {
          start: 5018,
          length: 32,
        },
      ],
      "3187": [
        {
          start: 5056,
          length: 32,
        },
      ],
      "3189": [
        {
          start: 4870,
          length: 32,
        },
      ],
    },
  },
  methodIdentifiers: {
    "addDeposit()": "4a58db19",
    "eip712Domain()": "84b0196e",
    "entryPoint()": "b0d691fe",
    "execute(address,uint256,bytes)": "b61d27f6",
    "executeBatch(address[],bytes[])": "18dfb3c7",
    "executeBatch(address[],uint256[],bytes[])": "47e1da2a",
    "executeOperation(address,uint256,uint256,address,bytes)": "1b11d0ff",
    "executeOperation(address[],uint256[],uint256[],address,bytes)": "920f5c84",
    "getDeposit()": "c399ec88",
    "getMessageHash(bytes)": "0a1028c4",
    "getNonce()": "d087d288",
    "initialize(address)": "c4d66de8",
    "isValidSignature(bytes32,bytes)": "1626ba7e",
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":
      "bc197c81",
    "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
    "onERC721Received(address,address,uint256,bytes)": "150b7a02",
    "onMorphoFlashLoan(uint256,bytes)": "31f57072",
    "owner()": "8da5cb5b",
    "performCreate(uint256,bytes)": "4c8c9ea1",
    "performCreate2(uint256,bytes,bytes32)": "4847be6f",
    "receiveFlashLoan(address[],uint256[],uint256[],bytes)": "f04f2707",
    "receiveFlashLoan(bytes)": "7b72d2ce",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferOwnership(address)": "f2fde38b",
    "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":
      "19822f7c",
    "withdrawDepositTo(address,uint256)": "4d44560d",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEntryPoint","name":"entryPoint_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"CreateFailed","type":"error"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"InvalidOwner","type":"error"},{"inputs":[],"name":"InvalidSignatureType","type":"error"},{"inputs":[],"name":"Locked","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"NotAuthorized","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ZeroAddressNotAllowed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IEntryPoint","name":"entryPoint","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"LightAccountInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"addDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dest","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"func","type":"bytes"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"dest","type":"address[]"},{"internalType":"bytes[]","name":"func","type":"bytes[]"}],"name":"executeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"dest","type":"address[]"},{"internalType":"uint256[]","name":"value","type":"uint256[]"},{"internalType":"bytes[]","name":"func","type":"bytes[]"}],"name":"executeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"},{"internalType":"bytes","name":"params","type":"bytes"}],"name":"executeOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"assets","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256[]","name":"premiums","type":"uint256[]"},{"internalType":"address","name":"initiator","type":"address"},{"internalType":"bytes","name":"params","type":"bytes"}],"name":"executeOperation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"},{"internalType":"bytes","name":"params","type":"bytes"}],"name":"onMorphoFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"performCreate","outputs":[{"internalType":"address","name":"createdAddr","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes32","name":"salt","type":"bytes32"}],"name":"performCreate2","outputs":[{"internalType":"address","name":"createdAddr","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"}],"name":"receiveFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"","type":"address[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"params","type":"bytes"}],"name":"receiveFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawDepositTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"InvalidOwner(address)":[{"details":"The new owner is not a valid owner (e.g., `address(0)`, the account itself, or the current owner)."}],"Locked()":[{"details":"custom error for violating lok condition"}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"LightAccountInitialized(address,address)":{"params":{"entryPoint":"The entry point.","owner":"The initial owner."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"The new owner.","previousOwner":"The previous owner."}}},"kind":"dev","methods":{"eip712Domain()":{"details":"See: https://eips.ethereum.org/EIPS/eip-5267"},"execute(address,uint256,bytes)":{"params":{"dest":"The target of the transaction.","func":"The transaction\'s calldata.","value":"The amount of wei sent in the transaction."}},"executeBatch(address[],bytes[])":{"params":{"dest":"An array of the targets for each transaction in the sequence.","func":"An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction."}},"executeBatch(address[],uint256[],bytes[])":{"params":{"dest":"An array of the targets for each transaction in the sequence.","func":"An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction.","value":"An array of value for each transaction in the sequence."}},"getDeposit()":{"returns":{"_0":"The current account deposit."}},"getMessageHash(bytes)":{"params":{"message":"Message that should be hashed."},"returns":{"_0":"The replay-safe message hash."}},"initialize(address)":{"details":"The `_ENTRY_POINT` member is immutable, to reduce gas consumption. To update the entry point address, a new implementation of LightAccount must be deployed with the new entry point address, and then `upgradeToAndCall` must be called to upgrade the implementation.","params":{"owner_":"The initial owner of the account."}},"isValidSignature(bytes32,bytes)":{"details":"The signature is valid if it is signed by the owner\'s private key (if the owner is an EOA) or if it is a valid ERC-1271 signature from the owner (if the owner is a contract).","params":{"hash":"Hash of the data to be signed.","signature":"Signature byte array associated with the data."},"returns":{"_0":"Magic value `0x1626ba7e` if validation succeeded, else `0xffffffff`."}},"owner()":{"returns":{"_0":"The current owner."}},"performCreate(uint256,bytes)":{"details":"Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract.     5. If creation failed (the address returned is zero), revert with CreateFailed().","params":{"initCode":"The initCode to deploy.","value":"The value to send to the new contract constructor."},"returns":{"createdAddr":"The created contract address."}},"performCreate2(uint256,bytes,bytes32)":{"details":"Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract using Create2 with the passed salt parameter.     5. If creation failed (the address returned is zero), revert with CreateFailed().","params":{"initCode":"The initCode to deploy.","salt":"The salt to use for the create2 operation.","value":"The value to send to the new contract constructor."},"returns":{"createdAddr":"The created contract address."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferOwnership(address)":{"params":{"newOwner":"The new owner."}},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"details":"Must validate caller is the entryPoint.      Must validate the signature and nonce","params":{"missingAccountFunds":"- Missing funds on the account\'s deposit in the entrypoint.                              This is the minimum amount to transfer to the sender(entryPoint) to be                              able to make the call. The excess is left as a deposit in the entrypoint                              for future calls. Can be withdrawn anytime using \\"entryPoint.withdrawTo()\\".                              In case there is a paymaster in the request (or the current deposit is high                              enough), this value will be zero.","userOp":"- The operation that is about to be executed.","userOpHash":"- Hash of the user\'s request data. can be used as the basis for signature."},"returns":{"validationData":"      - Packaged ValidationData structure. use `_packValidationData` and                              `_unpackValidationData` to encode and decode.                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                 otherwise, an address of an \\"authorizer\\" contract.                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \\"indefinite\\"                              <6-byte> validAfter - First timestamp this operation is valid                                                    If an account doesn\'t use time-range, it is enough to                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.                              Note that the validation code cannot use block.timestamp (or block.number) directly."}},"withdrawDepositTo(address,uint256)":{"params":{"amount":"Amount to withdraw.","withdrawAddress":"Target to send to."}}},"version":1},"userdoc":{"events":{"LightAccountInitialized(address,address)":{"notice":"Emitted when this account is first initialized."},"OwnershipTransferred(address,address)":{"notice":"Emitted when this account\'s owner changes. Also emitted once at initialization, with a `previousOwner` of 0."}},"kind":"user","methods":{"addDeposit()":{"notice":"Deposit more funds for this account in the entry point."},"entryPoint()":{"notice":"Return the entryPoint used by this account. Subclass should return the current entryPoint used by this account."},"execute(address,uint256,bytes)":{"notice":"Execute a transaction. This may only be called directly by an owner or by the entry point via a user operation signed by an owner."},"executeBatch(address[],bytes[])":{"notice":"Execute a sequence of transactions."},"executeBatch(address[],uint256[],bytes[])":{"notice":"Execute a sequence of transactions."},"executeOperation(address,uint256,uint256,address,bytes)":{"notice":"Aave simple flash loan"},"executeOperation(address[],uint256[],uint256[],address,bytes)":{"notice":"Aave V2 flash loan callback"},"getDeposit()":{"notice":"Check current account deposit in the entry point."},"getMessageHash(bytes)":{"notice":"Returns the replay-safe hash of a message that can be signed by owners."},"getNonce()":{"notice":"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"initialize(address)":{"notice":"Called once as part of initialization, either during initial deployment or when first upgrading to this contract."},"onMorphoFlashLoan(uint256,bytes)":{"notice":"Morpho flash loan"},"owner()":{"notice":"Return the current owner of this account."},"performCreate(uint256,bytes)":{"notice":"Creates a contract."},"performCreate2(uint256,bytes,bytes32)":{"notice":"Creates a contract using create2 deterministic deployment."},"receiveFlashLoan(address[],uint256[],uint256[],bytes)":{"notice":"Balancer flash loan"},"receiveFlashLoan(bytes)":{"notice":"BalancerV3 flash loan"},"transferOwnership(address)":{"notice":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner or from the entry point via a user operation signed by the current owner."},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"notice":"Validate user\'s signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\"simulation call\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."},"withdrawDepositTo(address,uint256)":{"notice":"Withdraw value from the account\'s deposit."}},"version":1}},"settings":{"compilationTarget":{"contracts/1delta/flash-account/FlashAccount.sol":"FlashAccount"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"contracts/1delta/flash-account/FlashAccount.sol":{"keccak256":"0xf52cc45af1d15d718a9aed977d2c0b7e28e6ab45f8b2ce2adbfe890e853f3010","license":"GPL-3.0","urls":["bzz-raw://dc9b11b5e3a1db5e59aaef970e48baa86244c34db592fa4cd6a0940957f21983","dweb:/ipfs/QmYW7CCU9sXS2C5AmNuN8VkYnmkq4e9pLQLrKR712QVZfB"]},"contracts/1delta/flash-account/FlashAccountBase.sol":{"keccak256":"0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb","license":"GPL-3.0","urls":["bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7","dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11"]},"contracts/1delta/flash-account/common/BaseLightAccount.sol":{"keccak256":"0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869","license":"GPL-3.0","urls":["bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de","dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T"]},"contracts/1delta/flash-account/common/CustomSlotInitializable.sol":{"keccak256":"0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6","license":"MIT","urls":["bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c","dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny"]},"contracts/1delta/flash-account/common/EIP712.sol":{"keccak256":"0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3","license":"MIT","urls":["bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783","dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK"]},"contracts/1delta/flash-account/common/ERC1271.sol":{"keccak256":"0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a","license":"MIT","urls":["bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1","dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1"]},"contracts/1delta/flash-account/common/ExecutionLock.sol":{"keccak256":"0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e","license":"GPL-3.0","urls":["bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd","dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq"]},"lib/account-abstraction/contracts/core/BaseAccount.sol":{"keccak256":"0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358","license":"GPL-3.0","urls":["bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07","dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj"]},"lib/account-abstraction/contracts/core/Helpers.sol":{"keccak256":"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6","license":"GPL-3.0","urls":["bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e","dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc"]},"lib/account-abstraction/contracts/core/UserOperationLib.sol":{"keccak256":"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b","license":"GPL-3.0","urls":["bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc","dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS"]},"lib/account-abstraction/contracts/interfaces/IAccount.sol":{"keccak256":"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78","license":"GPL-3.0","urls":["bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020","dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP"]},"lib/account-abstraction/contracts/interfaces/IAggregator.sol":{"keccak256":"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588","license":"GPL-3.0","urls":["bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155","dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5"]},"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"keccak256":"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4","license":"GPL-3.0","urls":["bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9","dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe"]},"lib/account-abstraction/contracts/interfaces/INonceManager.sol":{"keccak256":"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb","license":"GPL-3.0","urls":["bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3","dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk"]},"lib/account-abstraction/contracts/interfaces/IStakeManager.sol":{"keccak256":"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04","license":"GPL-3.0-only","urls":["bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00","dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj"]},"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359","license":"GPL-3.0","urls":["bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be","dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3"]},"lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":{"keccak256":"0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7","license":"GPL-3.0","urls":["bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe","dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e","license":"MIT","urls":["bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2","dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715","license":"MIT","urls":["bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20","dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol":{"keccak256":"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d","license":"MIT","urls":["bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34","dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","license":"MIT","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865","license":"MIT","urls":["bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68","dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84","license":"MIT","urls":["bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9","dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7","license":"MIT","urls":["bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0","dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":{"keccak256":"0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f","license":"MIT","urls":["bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8","dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","license":"MIT","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c","license":"MIT","urls":["bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654","dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","license":"MIT","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3","license":"MIT","urls":["bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03","dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEntryPoint",
              name: "entryPoint_",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          type: "error",
          name: "ArrayLengthMismatch",
        },
        {
          inputs: [],
          type: "error",
          name: "CreateFailed",
        },
        {
          inputs: [],
          type: "error",
          name: "ECDSAInvalidSignature",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "length",
              type: "uint256",
            },
          ],
          type: "error",
          name: "ECDSAInvalidSignatureLength",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32",
            },
          ],
          type: "error",
          name: "ECDSAInvalidSignatureS",
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidInitialization",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          type: "error",
          name: "InvalidOwner",
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSignatureType",
        },
        {
          inputs: [],
          type: "error",
          name: "Locked",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "caller",
              type: "address",
            },
          ],
          type: "error",
          name: "NotAuthorized",
        },
        {
          inputs: [],
          type: "error",
          name: "NotInitializing",
        },
        {
          inputs: [],
          type: "error",
          name: "ZeroAddressNotAllowed",
        },
        {
          inputs: [
            {
              internalType: "uint64",
              name: "version",
              type: "uint64",
              indexed: false,
            },
          ],
          type: "event",
          name: "Initialized",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "contract IEntryPoint",
              name: "entryPoint",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "owner",
              type: "address",
              indexed: true,
            },
          ],
          type: "event",
          name: "LightAccountInitialized",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "previousOwner",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
              indexed: true,
            },
          ],
          type: "event",
          name: "OwnershipTransferred",
          anonymous: false,
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "function",
          name: "addDeposit",
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "eip712Domain",
          outputs: [
            {
              internalType: "bytes1",
              name: "fields",
              type: "bytes1",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "version",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "chainId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "verifyingContract",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32",
            },
            {
              internalType: "uint256[]",
              name: "extensions",
              type: "uint256[]",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "entryPoint",
          outputs: [
            {
              internalType: "contract IEntryPoint",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "dest",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "func",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "execute",
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "dest",
              type: "address[]",
            },
            {
              internalType: "bytes[]",
              name: "func",
              type: "bytes[]",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "executeBatch",
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "dest",
              type: "address[]",
            },
            {
              internalType: "uint256[]",
              name: "value",
              type: "uint256[]",
            },
            {
              internalType: "bytes[]",
              name: "func",
              type: "bytes[]",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "executeBatch",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "params",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "executeOperation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "assets",
              type: "address[]",
            },
            {
              internalType: "uint256[]",
              name: "amounts",
              type: "uint256[]",
            },
            {
              internalType: "uint256[]",
              name: "premiums",
              type: "uint256[]",
            },
            {
              internalType: "address",
              name: "initiator",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "params",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "executeOperation",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getDeposit",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getNonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner_",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "initialize",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32",
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "pure",
          type: "function",
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "pure",
          type: "function",
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "pure",
          type: "function",
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "assets",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "params",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "onMorphoFlashLoan",
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "initCode",
              type: "bytes",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "createdAddr",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "initCode",
              type: "bytes",
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "createdAddr",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "receiveFlashLoan",
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "",
              type: "address[]",
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
            {
              internalType: "bytes",
              name: "params",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "receiveFlashLoan",
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transferOwnership",
        },
        {
          inputs: [
            {
              internalType: "struct PackedUserOperation",
              name: "userOp",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "sender",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "initCode",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "callData",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "accountGasLimits",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "preVerificationGas",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "gasFees",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "paymasterAndData",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
            },
            {
              internalType: "bytes32",
              name: "userOpHash",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "missingAccountFunds",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "validateUserOp",
          outputs: [
            {
              internalType: "uint256",
              name: "validationData",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "withdrawAddress",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "withdrawDepositTo",
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive",
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "eip712Domain()": {
            details: "See: https://eips.ethereum.org/EIPS/eip-5267",
          },
          "execute(address,uint256,bytes)": {
            params: {
              dest: "The target of the transaction.",
              func: "The transaction's calldata.",
              value: "The amount of wei sent in the transaction.",
            },
          },
          "executeBatch(address[],bytes[])": {
            params: {
              dest: "An array of the targets for each transaction in the sequence.",
              func: "An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction.",
            },
          },
          "executeBatch(address[],uint256[],bytes[])": {
            params: {
              dest: "An array of the targets for each transaction in the sequence.",
              func: "An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction.",
              value: "An array of value for each transaction in the sequence.",
            },
          },
          "getDeposit()": {
            returns: {
              _0: "The current account deposit.",
            },
          },
          "getMessageHash(bytes)": {
            params: {
              message: "Message that should be hashed.",
            },
            returns: {
              _0: "The replay-safe message hash.",
            },
          },
          "initialize(address)": {
            details:
              "The `_ENTRY_POINT` member is immutable, to reduce gas consumption. To update the entry point address, a new implementation of LightAccount must be deployed with the new entry point address, and then `upgradeToAndCall` must be called to upgrade the implementation.",
            params: {
              owner_: "The initial owner of the account.",
            },
          },
          "isValidSignature(bytes32,bytes)": {
            details:
              "The signature is valid if it is signed by the owner's private key (if the owner is an EOA) or if it is a valid ERC-1271 signature from the owner (if the owner is a contract).",
            params: {
              hash: "Hash of the data to be signed.",
              signature: "Signature byte array associated with the data.",
            },
            returns: {
              _0: "Magic value `0x1626ba7e` if validation succeeded, else `0xffffffff`.",
            },
          },
          "owner()": {
            returns: {
              _0: "The current owner.",
            },
          },
          "performCreate(uint256,bytes)": {
            details:
              "Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract.     5. If creation failed (the address returned is zero), revert with CreateFailed().",
            params: {
              initCode: "The initCode to deploy.",
              value: "The value to send to the new contract constructor.",
            },
            returns: {
              createdAddr: "The created contract address.",
            },
          },
          "performCreate2(uint256,bytes,bytes32)": {
            details:
              "Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract using Create2 with the passed salt parameter.     5. If creation failed (the address returned is zero), revert with CreateFailed().",
            params: {
              initCode: "The initCode to deploy.",
              salt: "The salt to use for the create2 operation.",
              value: "The value to send to the new contract constructor.",
            },
            returns: {
              createdAddr: "The created contract address.",
            },
          },
          "supportsInterface(bytes4)": {
            details:
              "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.",
          },
          "transferOwnership(address)": {
            params: {
              newOwner: "The new owner.",
            },
          },
          "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":
            {
              details:
                "Must validate caller is the entryPoint.      Must validate the signature and nonce",
              params: {
                missingAccountFunds:
                  '- Missing funds on the account\'s deposit in the entrypoint.                              This is the minimum amount to transfer to the sender(entryPoint) to be                              able to make the call. The excess is left as a deposit in the entrypoint                              for future calls. Can be withdrawn anytime using "entryPoint.withdrawTo()".                              In case there is a paymaster in the request (or the current deposit is high                              enough), this value will be zero.',
                userOp: "- The operation that is about to be executed.",
                userOpHash:
                  "- Hash of the user's request data. can be used as the basis for signature.",
              },
              returns: {
                validationData:
                  '      - Packaged ValidationData structure. use `_packValidationData` and                              `_unpackValidationData` to encode and decode.                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                 otherwise, an address of an "authorizer" contract.                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for "indefinite"                              <6-byte> validAfter - First timestamp this operation is valid                                                    If an account doesn\'t use time-range, it is enough to                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.                              Note that the validation code cannot use block.timestamp (or block.number) directly.',
              },
            },
          "withdrawDepositTo(address,uint256)": {
            params: {
              amount: "Amount to withdraw.",
              withdrawAddress: "Target to send to.",
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {
          "addDeposit()": {
            notice: "Deposit more funds for this account in the entry point.",
          },
          "entryPoint()": {
            notice:
              "Return the entryPoint used by this account. Subclass should return the current entryPoint used by this account.",
          },
          "execute(address,uint256,bytes)": {
            notice:
              "Execute a transaction. This may only be called directly by an owner or by the entry point via a user operation signed by an owner.",
          },
          "executeBatch(address[],bytes[])": {
            notice: "Execute a sequence of transactions.",
          },
          "executeBatch(address[],uint256[],bytes[])": {
            notice: "Execute a sequence of transactions.",
          },
          "executeOperation(address,uint256,uint256,address,bytes)": {
            notice: "Aave simple flash loan",
          },
          "executeOperation(address[],uint256[],uint256[],address,bytes)": {
            notice: "Aave V2 flash loan callback",
          },
          "getDeposit()": {
            notice: "Check current account deposit in the entry point.",
          },
          "getMessageHash(bytes)": {
            notice:
              "Returns the replay-safe hash of a message that can be signed by owners.",
          },
          "getNonce()": {
            notice:
              "Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`",
          },
          "initialize(address)": {
            notice:
              "Called once as part of initialization, either during initial deployment or when first upgrading to this contract.",
          },
          "onMorphoFlashLoan(uint256,bytes)": {
            notice: "Morpho flash loan",
          },
          "owner()": {
            notice: "Return the current owner of this account.",
          },
          "performCreate(uint256,bytes)": {
            notice: "Creates a contract.",
          },
          "performCreate2(uint256,bytes,bytes32)": {
            notice:
              "Creates a contract using create2 deterministic deployment.",
          },
          "receiveFlashLoan(address[],uint256[],uint256[],bytes)": {
            notice: "Balancer flash loan",
          },
          "receiveFlashLoan(bytes)": {
            notice: "BalancerV3 flash loan",
          },
          "transferOwnership(address)": {
            notice:
              "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner or from the entry point via a user operation signed by the current owner.",
          },
          "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":
            {
              notice:
                'Validate user\'s signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a "simulation call" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.',
            },
          "withdrawDepositTo(address,uint256)": {
            notice: "Withdraw value from the account's deposit.",
          },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "contracts/1delta/flash-account/FlashAccount.sol": "FlashAccount",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "contracts/1delta/flash-account/FlashAccount.sol": {
        keccak256:
          "0xf52cc45af1d15d718a9aed977d2c0b7e28e6ab45f8b2ce2adbfe890e853f3010",
        urls: [
          "bzz-raw://dc9b11b5e3a1db5e59aaef970e48baa86244c34db592fa4cd6a0940957f21983",
          "dweb:/ipfs/QmYW7CCU9sXS2C5AmNuN8VkYnmkq4e9pLQLrKR712QVZfB",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/FlashAccountBase.sol": {
        keccak256:
          "0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb",
        urls: [
          "bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7",
          "dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/BaseLightAccount.sol": {
        keccak256:
          "0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869",
        urls: [
          "bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de",
          "dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/CustomSlotInitializable.sol": {
        keccak256:
          "0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6",
        urls: [
          "bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c",
          "dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/EIP712.sol": {
        keccak256:
          "0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3",
        urls: [
          "bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783",
          "dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ERC1271.sol": {
        keccak256:
          "0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a",
        urls: [
          "bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1",
          "dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ExecutionLock.sol": {
        keccak256:
          "0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e",
        urls: [
          "bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd",
          "dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/BaseAccount.sol": {
        keccak256:
          "0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358",
        urls: [
          "bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07",
          "dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/Helpers.sol": {
        keccak256:
          "0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6",
        urls: [
          "bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e",
          "dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/UserOperationLib.sol": {
        keccak256:
          "0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b",
        urls: [
          "bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc",
          "dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAccount.sol": {
        keccak256:
          "0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78",
        urls: [
          "bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020",
          "dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAggregator.sol": {
        keccak256:
          "0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588",
        urls: [
          "bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155",
          "dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IEntryPoint.sol": {
        keccak256:
          "0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4",
        urls: [
          "bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9",
          "dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/INonceManager.sol": {
        keccak256:
          "0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb",
        urls: [
          "bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3",
          "dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IStakeManager.sol": {
        keccak256:
          "0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04",
        urls: [
          "bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00",
          "dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj",
        ],
        license: "GPL-3.0-only",
      },
      "lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol": {
        keccak256:
          "0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359",
        urls: [
          "bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be",
          "dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":
        {
          keccak256:
            "0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7",
          urls: [
            "bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe",
            "dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi",
          ],
          license: "GPL-3.0",
        },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": {
        keccak256:
          "0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e",
        urls: [
          "bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2",
          "dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":
        {
          keccak256:
            "0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715",
          urls: [
            "bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20",
            "dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        keccak256:
          "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
        urls: [
          "bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
          "dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256:
          "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
        urls: [
          "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
          "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256:
          "0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865",
        urls: [
          "bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68",
          "dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        keccak256:
          "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
        urls: [
          "bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
          "dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":
        {
          keccak256:
            "0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7",
          urls: [
            "bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0",
            "dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":
        {
          keccak256:
            "0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f",
          urls: [
            "bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8",
            "dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256:
          "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        urls: [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256:
          "0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c",
        urls: [
          "bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654",
          "dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256:
          "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
        urls: [
          "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
          "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256:
          "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
        urls: [
          "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
          "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ",
        ],
        license: "MIT",
      },
    },
    version: 1,
  },
  id: 0,
} as const as Abi;
export type { FlashAccountAbiType } from "./FlashAccount";
export { getFlashAccountContract } from "./FlashAccount";

export const FlashAccountBaseTestAbi = {
  abi: [
    {
      type: "function",
      name: "IS_TEST",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "excludeArtifacts",
      inputs: [],
      outputs: [
        {
          name: "excludedArtifacts_",
          type: "string[]",
          internalType: "string[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "excludeContracts",
      inputs: [],
      outputs: [
        {
          name: "excludedContracts_",
          type: "address[]",
          internalType: "address[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "excludeSelectors",
      inputs: [],
      outputs: [
        {
          name: "excludedSelectors_",
          type: "tuple[]",
          internalType: "struct StdInvariant.FuzzSelector[]",
          components: [
            {
              name: "addr",
              type: "address",
              internalType: "address",
            },
            {
              name: "selectors",
              type: "bytes4[]",
              internalType: "bytes4[]",
            },
          ],
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "excludeSenders",
      inputs: [],
      outputs: [
        {
          name: "excludedSenders_",
          type: "address[]",
          internalType: "address[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "failed",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "targetArtifactSelectors",
      inputs: [],
      outputs: [
        {
          name: "targetedArtifactSelectors_",
          type: "tuple[]",
          internalType: "struct StdInvariant.FuzzArtifactSelector[]",
          components: [
            {
              name: "artifact",
              type: "string",
              internalType: "string",
            },
            {
              name: "selectors",
              type: "bytes4[]",
              internalType: "bytes4[]",
            },
          ],
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "targetArtifacts",
      inputs: [],
      outputs: [
        {
          name: "targetedArtifacts_",
          type: "string[]",
          internalType: "string[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "targetContracts",
      inputs: [],
      outputs: [
        {
          name: "targetedContracts_",
          type: "address[]",
          internalType: "address[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "targetInterfaces",
      inputs: [],
      outputs: [
        {
          name: "targetedInterfaces_",
          type: "tuple[]",
          internalType: "struct StdInvariant.FuzzInterface[]",
          components: [
            {
              name: "addr",
              type: "address",
              internalType: "address",
            },
            {
              name: "artifacts",
              type: "string[]",
              internalType: "string[]",
            },
          ],
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "targetSelectors",
      inputs: [],
      outputs: [
        {
          name: "targetedSelectors_",
          type: "tuple[]",
          internalType: "struct StdInvariant.FuzzSelector[]",
          components: [
            {
              name: "addr",
              type: "address",
              internalType: "address",
            },
            {
              name: "selectors",
              type: "bytes4[]",
              internalType: "bytes4[]",
            },
          ],
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "targetSenders",
      inputs: [],
      outputs: [
        {
          name: "targetedSenders_",
          type: "address[]",
          internalType: "address[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "event",
      name: "log",
      inputs: [
        {
          name: "",
          type: "string",
          indexed: false,
          internalType: "string",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_address",
      inputs: [
        {
          name: "",
          type: "address",
          indexed: false,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_array",
      inputs: [
        {
          name: "val",
          type: "uint256[]",
          indexed: false,
          internalType: "uint256[]",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_array",
      inputs: [
        {
          name: "val",
          type: "int256[]",
          indexed: false,
          internalType: "int256[]",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_array",
      inputs: [
        {
          name: "val",
          type: "address[]",
          indexed: false,
          internalType: "address[]",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_bytes",
      inputs: [
        {
          name: "",
          type: "bytes",
          indexed: false,
          internalType: "bytes",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_bytes32",
      inputs: [
        {
          name: "",
          type: "bytes32",
          indexed: false,
          internalType: "bytes32",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_int",
      inputs: [
        {
          name: "",
          type: "int256",
          indexed: false,
          internalType: "int256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_address",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "address",
          indexed: false,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_array",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "uint256[]",
          indexed: false,
          internalType: "uint256[]",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_array",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "int256[]",
          indexed: false,
          internalType: "int256[]",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_array",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "address[]",
          indexed: false,
          internalType: "address[]",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_bytes",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "bytes",
          indexed: false,
          internalType: "bytes",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_bytes32",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "bytes32",
          indexed: false,
          internalType: "bytes32",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_decimal_int",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "int256",
          indexed: false,
          internalType: "int256",
        },
        {
          name: "decimals",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_decimal_uint",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
        {
          name: "decimals",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_int",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "int256",
          indexed: false,
          internalType: "int256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_string",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "string",
          indexed: false,
          internalType: "string",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_named_uint",
      inputs: [
        {
          name: "key",
          type: "string",
          indexed: false,
          internalType: "string",
        },
        {
          name: "val",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_string",
      inputs: [
        {
          name: "",
          type: "string",
          indexed: false,
          internalType: "string",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "log_uint",
      inputs: [
        {
          name: "",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "logs",
      inputs: [
        {
          name: "",
          type: "bytes",
          indexed: false,
          internalType: "bytes",
        },
      ],
      anonymous: false,
    },
  ],
  bytecode: {
    object:
      "0x6080604052600c8054600160ff199182168117909255601f805490911682179055621de17a602055602280546001600160a01b03191690911790553480156044575f5ffd5b50610ed1806100525f395ff3fe608060405234801561000f575f5ffd5b50600436106100cf575f3560e01c8063916a17c61161007d578063ba414fa611610058578063ba414fa614610165578063e20c9f711461017d578063fa7626d414610185575f5ffd5b8063916a17c614610140578063b0464fdc14610155578063b5508aa91461015d575f5ffd5b80633f7286f4116100ad5780633f7286f41461010e57806366d9a9a01461011657806385226c811461012b575f5ffd5b80631ed7831c146100d35780632ade3880146100f15780633e5e3c2314610106575b5f5ffd5b6100db610192565b6040516100e89190610a6e565b60405180910390f35b6100f96101ff565b6040516100e89190610b12565b6100db610348565b6100db6103b3565b61011e61041e565b6040516100e89190610c80565b610133610597565b6040516100e89190610d1c565b610148610662565b6040516100e89190610d91565b610148610765565b610133610868565b61016d610933565b60405190151581526020016100e8565b6100db610a03565b601f5461016d9060ff1681565b606060168054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575b5050505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b8282101561033f575f848152602080822060408051808201825260028702909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939591948681019491929084015b82821015610328578382905f5260205f2001805461029d90610e33565b80601f01602080910402602001604051908101604052809291908181526020018280546102c990610e33565b80156103145780601f106102eb57610100808354040283529160200191610314565b820191905f5260205f20905b8154815290600101906020018083116102f757829003601f168201915b505050505081526020019060010190610280565b505050508152505081526020019060010190610222565b50505050905090565b606060188054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575050505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b8282101561033f578382905f5260205f2090600202016040518060400160405290815f8201805461047190610e33565b80601f016020809104026020016040519081016040528092919081815260200182805461049d90610e33565b80156104e85780601f106104bf576101008083540402835291602001916104e8565b820191905f5260205f20905b8154815290600101906020018083116104cb57829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561057f57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161052c5790505b50505050508152505081526020019060010190610441565b6060601a805480602002602001604051908101604052809291908181526020015f905b8282101561033f578382905f5260205f200180546105d790610e33565b80601f016020809104026020016040519081016040528092919081815260200182805461060390610e33565b801561064e5780601f106106255761010080835404028352916020019161064e565b820191905f5260205f20905b81548152906001019060200180831161063157829003601f168201915b5050505050815260200190600101906105ba565b6060601d805480602002602001604051908101604052809291908181526020015f905b8282101561033f575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561074d57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106fa5790505b50505050508152505081526020019060010190610685565b6060601c805480602002602001604051908101604052809291908181526020015f905b8282101561033f575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561085057602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116107fd5790505b50505050508152505081526020019060010190610788565b60606019805480602002602001604051908101604052809291908181526020015f905b8282101561033f578382905f5260205f200180546108a890610e33565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490610e33565b801561091f5780601f106108f65761010080835404028352916020019161091f565b820191905f5260205f20905b81548152906001019060200180831161090257829003601f168201915b50505050508152602001906001019061088b565b6008545f9060ff161561094a575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa1580156109d8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fc9190610e84565b1415905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575050505050905090565b602080825282518282018190525f918401906040840190835b81811015610abb57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101610a87565b509095945050505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805173ffffffffffffffffffffffffffffffffffffffff168652602090810151604082880181905281519088018190529101906060600582901b8801810191908801905f5b81811015610bfe577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a8503018352610be8848651610ac6565b6020958601959094509290920191600101610bae565b509197505050602094850194929092019150600101610b38565b50929695505050505050565b5f8151808452602084019350602083015f5b82811015610c765781517fffffffff0000000000000000000000000000000000000000000000000000000016865260209586019590910190600101610c36565b5093949350505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805160408752610cea6040880182610ac6565b9050602082015191508681036020880152610d058183610c24565b965050506020938401939190910190600101610ca6565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452610d7c858351610ac6565b94506020938401939190910190600101610d42565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815173ffffffffffffffffffffffffffffffffffffffff81511686526020810151905060406020870152610e1d6040870182610c24565b9550506020938401939190910190600101610db7565b600181811c90821680610e4757607f821691505b602082108103610e7e577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f60208284031215610e94575f5ffd5b505191905056fea2646970667358221220a6aa5d510b78ede6c1e09422050c2929c70594a960b7cd59be012f64a3a3ce6d64736f6c634300081c0033",
    sourceMap:
      "570:2461:224:-:0;;;3126:44:184;;;3166:4;-1:-1:-1;;3126:44:184;;;;;;;;1016:26:194;;;;;;;;;;665:8:224;631:42;;706:37;;;-1:-1:-1;;;;;;706:37:224;;;;;;570:2461;;;;;;;;;;;;;;;;",
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      "0x608060405234801561000f575f5ffd5b50600436106100cf575f3560e01c8063916a17c61161007d578063ba414fa611610058578063ba414fa614610165578063e20c9f711461017d578063fa7626d414610185575f5ffd5b8063916a17c614610140578063b0464fdc14610155578063b5508aa91461015d575f5ffd5b80633f7286f4116100ad5780633f7286f41461010e57806366d9a9a01461011657806385226c811461012b575f5ffd5b80631ed7831c146100d35780632ade3880146100f15780633e5e3c2314610106575b5f5ffd5b6100db610192565b6040516100e89190610a6e565b60405180910390f35b6100f96101ff565b6040516100e89190610b12565b6100db610348565b6100db6103b3565b61011e61041e565b6040516100e89190610c80565b610133610597565b6040516100e89190610d1c565b610148610662565b6040516100e89190610d91565b610148610765565b610133610868565b61016d610933565b60405190151581526020016100e8565b6100db610a03565b601f5461016d9060ff1681565b606060168054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575b5050505050905090565b6060601e805480602002602001604051908101604052809291908181526020015f905b8282101561033f575f848152602080822060408051808201825260028702909201805473ffffffffffffffffffffffffffffffffffffffff168352600181018054835181870281018701909452808452939591948681019491929084015b82821015610328578382905f5260205f2001805461029d90610e33565b80601f01602080910402602001604051908101604052809291908181526020018280546102c990610e33565b80156103145780601f106102eb57610100808354040283529160200191610314565b820191905f5260205f20905b8154815290600101906020018083116102f757829003601f168201915b505050505081526020019060010190610280565b505050508152505081526020019060010190610222565b50505050905090565b606060188054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575050505050905090565b6060601b805480602002602001604051908101604052809291908181526020015f905b8282101561033f578382905f5260205f2090600202016040518060400160405290815f8201805461047190610e33565b80601f016020809104026020016040519081016040528092919081815260200182805461049d90610e33565b80156104e85780601f106104bf576101008083540402835291602001916104e8565b820191905f5260205f20905b8154815290600101906020018083116104cb57829003601f168201915b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561057f57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168152602001906004019060208260030104928301926001038202915080841161052c5790505b50505050508152505081526020019060010190610441565b6060601a805480602002602001604051908101604052809291908181526020015f905b8282101561033f578382905f5260205f200180546105d790610e33565b80601f016020809104026020016040519081016040528092919081815260200182805461060390610e33565b801561064e5780601f106106255761010080835404028352916020019161064e565b820191905f5260205f20905b81548152906001019060200180831161063157829003601f168201915b5050505050815260200190600101906105ba565b6060601d805480602002602001604051908101604052809291908181526020015f905b8282101561033f575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561074d57602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116106fa5790505b50505050508152505081526020019060010190610685565b6060601c805480602002602001604051908101604052809291908181526020015f905b8282101561033f575f84815260209081902060408051808201825260028602909201805473ffffffffffffffffffffffffffffffffffffffff16835260018101805483518187028101870190945280845293949193858301939283018282801561085057602002820191905f5260205f20905f905b82829054906101000a900460e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190600401906020826003010492830192600103820291508084116107fd5790505b50505050508152505081526020019060010190610788565b60606019805480602002602001604051908101604052809291908181526020015f905b8282101561033f578382905f5260205f200180546108a890610e33565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490610e33565b801561091f5780601f106108f65761010080835404028352916020019161091f565b820191905f5260205f20905b81548152906001019060200180831161090257829003601f168201915b50505050508152602001906001019061088b565b6008545f9060ff161561094a575060085460ff1690565b6040517f667f9d70000000000000000000000000000000000000000000000000000000008152737109709ecfa91a80626ff3989d68f67f5b1dd12d600482018190527f6661696c6564000000000000000000000000000000000000000000000000000060248301525f9163667f9d7090604401602060405180830381865afa1580156109d8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109fc9190610e84565b1415905090565b606060158054806020026020016040519081016040528092919081815260200182805480156101f557602002820191905f5260205f2090815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116101ca575050505050905090565b602080825282518282018190525f918401906040840190835b81811015610abb57835173ffffffffffffffffffffffffffffffffffffffff16835260209384019390920191600101610a87565b509095945050505050565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805173ffffffffffffffffffffffffffffffffffffffff168652602090810151604082880181905281519088018190529101906060600582901b8801810191908801905f5b81811015610bfe577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa08a8503018352610be8848651610ac6565b6020958601959094509290920191600101610bae565b509197505050602094850194929092019150600101610b38565b50929695505050505050565b5f8151808452602084019350602083015f5b82811015610c765781517fffffffff0000000000000000000000000000000000000000000000000000000016865260209586019590910190600101610c36565b5093949350505050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184528151805160408752610cea6040880182610ac6565b9050602082015191508681036020880152610d058183610c24565b965050506020938401939190910190600101610ca6565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452610d7c858351610ac6565b94506020938401939190910190600101610d42565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610c18577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0878603018452815173ffffffffffffffffffffffffffffffffffffffff81511686526020810151905060406020870152610e1d6040870182610c24565b9550506020938401939190910190600101610db7565b600181811c90821680610e4757607f821691505b602082108103610e7e577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b5f60208284031215610e94575f5ffd5b505191905056fea2646970667358221220a6aa5d510b78ede6c1e09422050c2929c70594a960b7cd59be012f64a3a3ce6d64736f6c634300081c0033",
    sourceMap:
      "570:2461:224:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134:187;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3823:151;;;:::i;:::-;;;;;;;:::i;3684:133::-;;;:::i;3385:141::-;;;:::i;3193:186::-;;;:::i;:::-;;;;;;;:::i;3047:140::-;;;:::i;:::-;;;;;;;:::i;3532:146::-;;;:::i;:::-;;;;;;;:::i;2754:147::-;;;:::i;2459:141::-;;;:::i;1243:204:183:-;;;:::i;:::-;;;6643:14:231;;6636:22;6618:41;;6606:2;6591:18;1243:204:183;6478:187:231;2606:142:187;;;:::i;1016:26:194:-;;;;;;;;;2907:134:187;2954:33;3018:16;2999:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2907:134;:::o;3823:151::-;3872:42;3948:19;3926:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3823:151;:::o;3684:133::-;3730:33;3794:16;3775:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3684:133;:::o;3385:141::-;3433:35;3501:18;3480:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:141;:::o;3193:186::-;3249:56;3346:26;3317:55;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3047:140;3095:34;3162:18;3141:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3532:146;3580:40;3653:18;3632:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2754:147;2803:40;2876:18;2855:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2459:141;2508:34;2575:18;2554:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1243:204:183;1302:7;;1282:4;;1302:7;;1298:143;;;-1:-1:-1;1332:7:183;;;;;1243:204::o;1298:143::-;1377:39;;;;;:7;:39;;;7286:74:231;;;1398:17:183;7376:18:231;;;7369:34;1428:1:183;;1377:7;;7259:18:231;;1377:39:183;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:53;;1370:60;;1243:204;:::o;2606:142:187:-;2655:35;2723:18;2702:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2606:142;:::o;14:660:231:-;204:2;216:21;;;286:13;;189:18;;;308:22;;;156:4;;387:15;;;361:2;346:18;;;156:4;430:218;444:6;441:1;438:13;430:218;;;509:13;;524:42;505:62;493:75;;597:2;623:15;;;;588:12;;;;466:1;459:9;430:218;;;-1:-1:-1;665:3:231;;14:660;-1:-1:-1;;;;;14:660:231:o;679:348::-;721:3;759:5;753:12;786:6;781:3;774:19;842:6;835:4;828:5;824:16;817:4;812:3;808:14;802:47;894:1;887:4;878:6;873:3;869:16;865:27;858:38;1016:4;946:66;941:2;933:6;929:15;925:88;920:3;916:98;912:109;905:116;;;679:348;;;;:::o;1032:1769::-;1238:4;1286:2;1275:9;1271:18;1316:2;1305:9;1298:21;1339:6;1374;1368:13;1405:6;1397;1390:22;1443:2;1432:9;1428:18;1421:25;;1505:2;1495:6;1492:1;1488:14;1477:9;1473:30;1469:39;1455:53;;1543:2;1535:6;1531:15;1564:1;1574:1198;1588:6;1585:1;1582:13;1574:1198;;;1677:66;1653:22;;;1649:95;1637:108;;1768:13;;1855:9;;1866:42;1851:58;1836:74;;1957:2;1949:11;;;1943:18;1820:2;1981:15;;;1974:27;;;2062:19;;1808:15;;;2094:24;;;2249:21;;;2152:2;2202:1;2198:16;;;2186:29;;2182:38;;;2140:15;;;;-1:-1:-1;2308:355:231;2324:8;2319:3;2316:17;2308:355;;;2426:66;2417:6;2409;2405:19;2401:92;2394:5;2387:107;2521:42;2556:6;2545:8;2539:15;2521:42;:::i;:::-;2606:2;2592:17;;;;2511:52;;-1:-1:-1;2635:14:231;;;;;2352:1;2343:11;2308:355;;;-1:-1:-1;2686:6:231;;-1:-1:-1;;;2727:2:231;2750:12;;;;2715:15;;;;;-1:-1:-1;1610:1:231;1603:9;1574:1198;;;-1:-1:-1;2789:6:231;;1032:1769;-1:-1:-1;;;;;;1032:1769:231:o;2806:492::-;2858:3;2896:5;2890:12;2923:6;2918:3;2911:19;2955:4;2950:3;2946:14;2939:21;;2994:4;2987:5;2983:16;3017:1;3027:246;3041:6;3038:1;3035:13;3027:246;;;3106:13;;3121:66;3102:86;3090:99;;3218:4;3209:14;;;;3246:17;;;;3063:1;3056:9;3027:246;;;-1:-1:-1;3289:3:231;;2806:492;-1:-1:-1;;;;2806:492:231:o;3303:1204::-;3523:4;3571:2;3560:9;3556:18;3601:2;3590:9;3583:21;3624:6;3659;3653:13;3690:6;3682;3675:22;3728:2;3717:9;3713:18;3706:25;;3790:2;3780:6;3777:1;3773:14;3762:9;3758:30;3754:39;3740:53;;3828:2;3820:6;3816:15;3849:1;3859:619;3873:6;3870:1;3867:13;3859:619;;;3962:66;3950:9;3942:6;3938:22;3934:95;3929:3;3922:108;4059:6;4053:13;4105:2;4099:9;4136:2;4128:6;4121:18;4166:48;4210:2;4202:6;4198:15;4184:12;4166:48;:::i;:::-;4152:62;;4263:2;4259;4255:11;4249:18;4227:40;;4316:6;4308;4304:19;4299:2;4291:6;4287:15;4280:44;4347:51;4391:6;4375:14;4347:51;:::i;:::-;4337:61;-1:-1:-1;;;4433:2:231;4456:12;;;;4421:15;;;;;3895:1;3888:9;3859:619;;4512:841;4674:4;4722:2;4711:9;4707:18;4752:2;4741:9;4734:21;4775:6;4810;4804:13;4841:6;4833;4826:22;4879:2;4868:9;4864:18;4857:25;;4941:2;4931:6;4928:1;4924:14;4913:9;4909:30;4905:39;4891:53;;4979:2;4971:6;4967:15;5000:1;5010:314;5024:6;5021:1;5018:13;5010:314;;;5113:66;5101:9;5093:6;5089:22;5085:95;5080:3;5073:108;5204:40;5237:6;5228;5222:13;5204:40;:::i;:::-;5194:50;-1:-1:-1;5279:2:231;5302:12;;;;5267:15;;;;;5046:1;5039:9;5010:314;;5358:1115;5562:4;5610:2;5599:9;5595:18;5640:2;5629:9;5622:21;5663:6;5698;5692:13;5729:6;5721;5714:22;5767:2;5756:9;5752:18;5745:25;;5829:2;5819:6;5816:1;5812:14;5801:9;5797:30;5793:39;5779:53;;5867:2;5859:6;5855:15;5888:1;5898:546;5912:6;5909:1;5906:13;5898:546;;;6001:66;5989:9;5981:6;5977:22;5973:95;5968:3;5961:108;6098:6;6092:13;6148:42;6143:2;6137:9;6133:58;6125:6;6118:74;6239:2;6235;6231:11;6225:18;6205:38;;6280:2;6275;6267:6;6263:15;6256:27;6306:58;6360:2;6352:6;6348:15;6334:12;6306:58;:::i;:::-;6296:68;-1:-1:-1;;6399:2:231;6422:12;;;;6387:15;;;;;5934:1;5927:9;5898:546;;6670:437;6749:1;6745:12;;;;6792;;;6813:61;;6867:4;6859:6;6855:17;6845:27;;6813:61;6920:2;6912:6;6909:14;6889:18;6886:38;6883:218;;6957:77;6954:1;6947:88;7058:4;7055:1;7048:15;7086:4;7083:1;7076:15;6883:218;;6670:437;;;:::o;7414:184::-;7484:6;7537:2;7525:9;7516:7;7512:23;7508:32;7505:52;;;7553:1;7550;7543:12;7505:52;-1:-1:-1;7576:16:231;;7414:184;-1:-1:-1;7414:184:231:o",
    linkReferences: {},
  },
  methodIdentifiers: {
    "IS_TEST()": "fa7626d4",
    "excludeArtifacts()": "b5508aa9",
    "excludeContracts()": "e20c9f71",
    "excludeSelectors()": "b0464fdc",
    "excludeSenders()": "1ed7831c",
    "failed()": "ba414fa6",
    "targetArtifactSelectors()": "66d9a9a0",
    "targetArtifacts()": "85226c81",
    "targetContracts()": "3f7286f4",
    "targetInterfaces()": "2ade3880",
    "targetSelectors()": "916a17c6",
    "targetSenders()": "3e5e3c23",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"}],"name":"log","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"","type":"address"}],"name":"log_address","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256[]","name":"val","type":"uint256[]"}],"name":"log_array","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"int256[]","name":"val","type":"int256[]"}],"name":"log_array","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"val","type":"address[]"}],"name":"log_array","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"","type":"bytes"}],"name":"log_bytes","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"","type":"bytes32"}],"name":"log_bytes32","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"int256","name":"","type":"int256"}],"name":"log_int","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"address","name":"val","type":"address"}],"name":"log_named_address","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"uint256[]","name":"val","type":"uint256[]"}],"name":"log_named_array","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"int256[]","name":"val","type":"int256[]"}],"name":"log_named_array","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"address[]","name":"val","type":"address[]"}],"name":"log_named_array","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"bytes","name":"val","type":"bytes"}],"name":"log_named_bytes","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"bytes32","name":"val","type":"bytes32"}],"name":"log_named_bytes32","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"int256","name":"val","type":"int256"},{"indexed":false,"internalType":"uint256","name":"decimals","type":"uint256"}],"name":"log_named_decimal_int","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"uint256","name":"val","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"decimals","type":"uint256"}],"name":"log_named_decimal_uint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"int256","name":"val","type":"int256"}],"name":"log_named_int","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"val","type":"string"}],"name":"log_named_string","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"uint256","name":"val","type":"uint256"}],"name":"log_named_uint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"}],"name":"log_string","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"log_uint","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"","type":"bytes"}],"name":"logs","type":"event"},{"inputs":[],"name":"IS_TEST","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"excludeArtifacts","outputs":[{"internalType":"string[]","name":"excludedArtifacts_","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"excludeContracts","outputs":[{"internalType":"address[]","name":"excludedContracts_","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"excludeSelectors","outputs":[{"components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct StdInvariant.FuzzSelector[]","name":"excludedSelectors_","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"excludeSenders","outputs":[{"internalType":"address[]","name":"excludedSenders_","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"failed","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"targetArtifactSelectors","outputs":[{"components":[{"internalType":"string","name":"artifact","type":"string"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct StdInvariant.FuzzArtifactSelector[]","name":"targetedArtifactSelectors_","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"targetArtifacts","outputs":[{"internalType":"string[]","name":"targetedArtifacts_","type":"string[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"targetContracts","outputs":[{"internalType":"address[]","name":"targetedContracts_","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"targetInterfaces","outputs":[{"components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"string[]","name":"artifacts","type":"string[]"}],"internalType":"struct StdInvariant.FuzzInterface[]","name":"targetedInterfaces_","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"targetSelectors","outputs":[{"components":[{"internalType":"address","name":"addr","type":"address"},{"internalType":"bytes4[]","name":"selectors","type":"bytes4[]"}],"internalType":"struct StdInvariant.FuzzSelector[]","name":"targetedSelectors_","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"targetSenders","outputs":[{"internalType":"address[]","name":"targetedSenders_","type":"address[]"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"compilationTarget":{"test/flash-account/FlashAccountBaseTest.sol":"FlashAccountBaseTest"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"contracts/1delta/flash-account/FlashAccount.sol":{"keccak256":"0xf52cc45af1d15d718a9aed977d2c0b7e28e6ab45f8b2ce2adbfe890e853f3010","license":"GPL-3.0","urls":["bzz-raw://dc9b11b5e3a1db5e59aaef970e48baa86244c34db592fa4cd6a0940957f21983","dweb:/ipfs/QmYW7CCU9sXS2C5AmNuN8VkYnmkq4e9pLQLrKR712QVZfB"]},"contracts/1delta/flash-account/FlashAccountBase.sol":{"keccak256":"0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb","license":"GPL-3.0","urls":["bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7","dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11"]},"contracts/1delta/flash-account/FlashAccountFactory.sol":{"keccak256":"0x55710aeef2c452edb298d4993b3067fcf007a2c8cc0f9a6e40098ac1309304e1","license":"GPL-3.0","urls":["bzz-raw://b9d2fda34b5c5e026ee3844caf57eddbc432eaca767cb930c3e5a302bf411005","dweb:/ipfs/QmcL29CAQuVS2p3axrjrNwwSWzamo56rJx128YSVHwPT9Q"]},"contracts/1delta/flash-account/common/BaseLightAccount.sol":{"keccak256":"0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869","license":"GPL-3.0","urls":["bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de","dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T"]},"contracts/1delta/flash-account/common/BaseLightAccountFactory.sol":{"keccak256":"0x51ea9fe995d6edb55d035df8d9b340d02f600238dfe9688e00cb79050a6a613d","license":"GPL-3.0","urls":["bzz-raw://14e59a07ec07e28d25f8cfcee48abcec0b6ba4be2c40f2d9b5c04844fef04710","dweb:/ipfs/QmXHaf7ACQD9NRXWrsfqQ3CJWyigFE4QvYL2LBaZUxM53d"]},"contracts/1delta/flash-account/common/CustomSlotInitializable.sol":{"keccak256":"0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6","license":"MIT","urls":["bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c","dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny"]},"contracts/1delta/flash-account/common/EIP712.sol":{"keccak256":"0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3","license":"MIT","urls":["bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783","dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK"]},"contracts/1delta/flash-account/common/ERC1271.sol":{"keccak256":"0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a","license":"MIT","urls":["bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1","dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1"]},"contracts/1delta/flash-account/common/ExecutionLock.sol":{"keccak256":"0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e","license":"GPL-3.0","urls":["bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd","dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq"]},"contracts/1delta/flash-account/proxy/Beacon.sol":{"keccak256":"0xeb2ba1bd813b886f51233c05668c6cf9a65d7003fc84d0f48d8bf3e20dfa9177","license":"MIT","urls":["bzz-raw://4c53f0d17bbd2cfe12866562a234cf6ab61ea412caab8a2819619dcce3c2941b","dweb:/ipfs/QmQS6AewSsfSvn6s5dihXaJzai5yWn3uNpw1T4FUtWkrvW"]},"contracts/1delta/flash-account/proxy/IBeacon.sol":{"keccak256":"0x1f5d6e5e3ed41745c91221727d5de58a779e1aa83347d375f34203f3bcc4d757","license":"MIT","urls":["bzz-raw://166d7f47e1a313cbe1155fc800cf3c95e532451ea7fd12e888335acc0b1b03d2","dweb:/ipfs/QmaEYqBkmFyjNr9iSrLQHBBwynqkruEJLgNMUt9Gp9it2z"]},"contracts/1delta/flash-account/proxy/LibClone.sol":{"keccak256":"0x226151012faaff800114b3424350f5815430a455c631393418d52e28aa567e1a","license":"MIT","urls":["bzz-raw://542d094e5bd7a4b9335c22f2a1f23b3031a84e8ac95d9d1e5bc9b4d256778875","dweb:/ipfs/QmTLWL1Nwxmzq6uKAThsNXcqe8AWRXy5vQP6uo8ptGPh4e"]},"lib/account-abstraction/contracts/core/BaseAccount.sol":{"keccak256":"0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358","license":"GPL-3.0","urls":["bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07","dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj"]},"lib/account-abstraction/contracts/core/EntryPoint.sol":{"keccak256":"0x0eb1245b5541ff0fbc0f2a23c746e2b4eb9c46e801a4847f15d7d96d1cecc576","license":"GPL-3.0","urls":["bzz-raw://b002e499336c8f6ec05230762cccd3b48d67a2ec547e2789cfb70132af0b430f","dweb:/ipfs/QmfRGPNgBrfxmLt9PQUEjocVmC47Mx14Vie1tziTARRZfq"]},"lib/account-abstraction/contracts/core/Helpers.sol":{"keccak256":"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6","license":"GPL-3.0","urls":["bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e","dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc"]},"lib/account-abstraction/contracts/core/NonceManager.sol":{"keccak256":"0x1f951786ce6f171e7ed0242fee73ee4a205c7523404ee6cffca48b8c64ea5fe9","license":"GPL-3.0","urls":["bzz-raw://a602bf2274d478dae7a532cca31f8179131808c324cc26ece5c7e87c5a1015a6","dweb:/ipfs/QmaaSyw5GGbAWzUhAPCtsb38P3MmaVr1ngp61PYHCU2a5a"]},"lib/account-abstraction/contracts/core/SenderCreator.sol":{"keccak256":"0xeb95afb6e4cf921c1ed105ecb9f549ca46bee57f68acd1d2f4f84607ac0db5c5","license":"GPL-3.0","urls":["bzz-raw://d2ac91562f1fcabe4809a1b4256895efebcf46f89e08336a6c09ee2d29733238","dweb:/ipfs/QmPsQnPcCzioPwVtUhxkbnwKPC1bnhHSbAwK9GXVpjN3mH"]},"lib/account-abstraction/contracts/core/StakeManager.sol":{"keccak256":"0x673eb19600058d8642605ca409c9e1d4cab13735564b856270b92c330ffb1b8d","license":"GPL-3.0-only","urls":["bzz-raw://06599c57c7075ee8eb5f1710fccca3eb322876b968ec271e1fb34af41510ab2c","dweb:/ipfs/QmVsDEjmZYtzgXa4AYKxbQEYQVh6NBq8GmFJCariBUqK4G"]},"lib/account-abstraction/contracts/core/UserOperationLib.sol":{"keccak256":"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b","license":"GPL-3.0","urls":["bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc","dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS"]},"lib/account-abstraction/contracts/interfaces/IAccount.sol":{"keccak256":"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78","license":"GPL-3.0","urls":["bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020","dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP"]},"lib/account-abstraction/contracts/interfaces/IAccountExecute.sol":{"keccak256":"0xd3dc32dde1add1fb6377f939ceff6be31c2e21343522311f7b88db666be9ee6c","license":"GPL-3.0","urls":["bzz-raw://5b8f065171bd32e23b306868189c730f849ce6147f753c59e396e7afcf384577","dweb:/ipfs/QmZpDRNEZ9YNgGgyLQo5yM4bB1FNbtnfDABsChbgSQKXUh"]},"lib/account-abstraction/contracts/interfaces/IAggregator.sol":{"keccak256":"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588","license":"GPL-3.0","urls":["bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155","dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5"]},"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"keccak256":"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4","license":"GPL-3.0","urls":["bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9","dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe"]},"lib/account-abstraction/contracts/interfaces/INonceManager.sol":{"keccak256":"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb","license":"GPL-3.0","urls":["bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3","dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk"]},"lib/account-abstraction/contracts/interfaces/IPaymaster.sol":{"keccak256":"0x49d8dbf8a85b006bcd89bbc40e4e9e113997cc016007de85263bdae70572d07f","license":"GPL-3.0","urls":["bzz-raw://bc0d83804c1b795d5c216b3518cd176c48f90db28550f267cbd89746d6b476c8","dweb:/ipfs/QmNdCm4c6hnt7f6Q8q21QjtCNZWWRUaMVEYnQHEv68VnKt"]},"lib/account-abstraction/contracts/interfaces/IStakeManager.sol":{"keccak256":"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04","license":"GPL-3.0-only","urls":["bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00","dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj"]},"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359","license":"GPL-3.0","urls":["bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be","dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3"]},"lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":{"keccak256":"0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7","license":"GPL-3.0","urls":["bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe","dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi"]},"lib/account-abstraction/contracts/utils/Exec.sol":{"keccak256":"0x86b1b1cd11158dddb9d381040c57fdc643c74b5e4eed3e7e036f32452672ad74","license":"LGPL-3.0-only","urls":["bzz-raw://ad88663b6c76df73cf09a272cf333d038df7bb4c51281284b572bf9b46e1cd77","dweb:/ipfs/QmVKxYF8avyPBtqejVhFCM2CuHsfpsCh7TsPqkBLtrgwJQ"]},"lib/forge-std/src/Base.sol":{"keccak256":"0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c","license":"MIT","urls":["bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224","dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK"]},"lib/forge-std/src/StdAssertions.sol":{"keccak256":"0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270","license":"MIT","urls":["bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe","dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b"]},"lib/forge-std/src/StdChains.sol":{"keccak256":"0xcd3e64ec9ffa19a2c0715bbdaf7ddf28887cc418e079bec4373fd6a3f9961a7b","license":"MIT","urls":["bzz-raw://e981a2ab738590928e9efa5f3d95a408c718eb12d73a113d7675f3ed55a026a1","dweb:/ipfs/QmTgSEkWWsBRy32goRCaUkraSgpZHtgbZoKC3iEFNz5RDc"]},"lib/forge-std/src/StdCheats.sol":{"keccak256":"0x0fa6ec03602648b62cce41aab2096e6b7e052f2846075d967b6958dd586db746","license":"MIT","urls":["bzz-raw://cd84e2ca9c1eaed6b76768cc12bb8c1af8289170ea8b7706f58d516460d79c41","dweb:/ipfs/QmQ7BK7co6DE4eWUqMyv11s5eHYkS1tyx8tDSZGZVtf2aK"]},"lib/forge-std/src/StdError.sol":{"keccak256":"0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77","license":"MIT","urls":["bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6","dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj"]},"lib/forge-std/src/StdInvariant.sol":{"keccak256":"0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d","license":"MIT","urls":["bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391","dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5"]},"lib/forge-std/src/StdJson.sol":{"keccak256":"0xbc0132abe1c2accc2867c0f03667afffdf92f3e95a581bb03c9557eaa38ea500","license":"MIT","urls":["bzz-raw://eb6fab37dc73c219cfbb7b4f4998bcf7677ca5397a867e850f40232192073974","dweb:/ipfs/QmUHsbVdp9SKmgek7ZfPcLTKrpZFXpqaqt4sVejzxGEQL3"]},"lib/forge-std/src/StdMath.sol":{"keccak256":"0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2","license":"MIT","urls":["bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92","dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC"]},"lib/forge-std/src/StdStorage.sol":{"keccak256":"0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc","license":"MIT","urls":["bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57","dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ"]},"lib/forge-std/src/StdStyle.sol":{"keccak256":"0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d","license":"MIT","urls":["bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8","dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK"]},"lib/forge-std/src/StdToml.sol":{"keccak256":"0x58a72c765ed3f7ff6b105509689658795b8a3739b8931772a497155878381861","license":"MIT","urls":["bzz-raw://b4a3746f4fabaeb980bd77d9e091d3904ee38a6c0e191bfa8ba6874c6f8558a3","dweb:/ipfs/QmUfFDMEn461FgGEXt5HicyGD54sc28sLaQ9JRWDMBKed8"]},"lib/forge-std/src/StdUtils.sol":{"keccak256":"0x7274081e11c05164fd8eadde4de8305c033e58a43008dea58065f3170ccf0737","license":"MIT","urls":["bzz-raw://e9801614b6c9d3e472982e6cc68f5f1ad03682f84eafb686be65633c7132d138","dweb:/ipfs/QmcQSUcrm2A7XuektnxJjvYGmZtBeA6LKPxCXRqdXBX776"]},"lib/forge-std/src/Test.sol":{"keccak256":"0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe","license":"MIT","urls":["bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e","dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK"]},"lib/forge-std/src/Vm.sol":{"keccak256":"0x44bfadcf5a89b8058f80258f2259585c740f9cc45669a0579f4f2753ff2c6354","license":"MIT OR Apache-2.0","urls":["bzz-raw://bbc366c8b3499d5030e3b2e45bac23770531f2f5243a0e80e3d5a66b6f9a312c","dweb:/ipfs/QmNxDEB3BaVnKzNaWedtdMshhvCEddB1AsdJZcsQx6jdtC"]},"lib/forge-std/src/console.sol":{"keccak256":"0x4bbf47eb762cef93729d6ef15e78789957147039b113e5d4df48e3d3fd16d0f5","license":"MIT","urls":["bzz-raw://af9e3a7c3d82fb5b10b57ca4d1a82f2acbef80c077f6f6ef0cc0187c7bfd9f57","dweb:/ipfs/QmR9VzmnBDJpgiDP6CHT6truehukF9HpYvuP6kRiJbDwPP"]},"lib/forge-std/src/console2.sol":{"keccak256":"0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f","license":"MIT","urls":["bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d","dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ"]},"lib/forge-std/src/interfaces/IMulticall3.sol":{"keccak256":"0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a","license":"MIT","urls":["bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0","dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2"]},"lib/forge-std/src/safeconsole.sol":{"keccak256":"0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11","license":"MIT","urls":["bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab","dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3"]},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"keccak256":"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb","license":"MIT","urls":["bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6","dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"]},"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol":{"keccak256":"0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c","license":"MIT","urls":["bzz-raw://e2c9d517f0c136d54bd00cd57959d25681d4d6273f5bbbc263afe228303772f0","dweb:/ipfs/QmReNFjXBiufByiAAzfSQ2SM5r3qeUErn46BmN3yVRvrek"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e","license":"MIT","urls":["bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2","dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"keccak256":"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7","license":"MIT","urls":["bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b","dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"keccak256":"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724","license":"MIT","urls":["bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a","dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"keccak256":"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c","license":"MIT","urls":["bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba","dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715","license":"MIT","urls":["bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20","dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7","license":"MIT","urls":["bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db","dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"]},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e","license":"MIT","urls":["bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15","dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol":{"keccak256":"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d","license":"MIT","urls":["bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34","dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"]},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","license":"MIT","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","license":"MIT","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"]},"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol":{"keccak256":"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3","license":"MIT","urls":["bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a","dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865","license":"MIT","urls":["bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68","dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84","license":"MIT","urls":["bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9","dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7","license":"MIT","urls":["bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0","dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":{"keccak256":"0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f","license":"MIT","urls":["bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8","dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"keccak256":"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa","license":"MIT","urls":["bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287","dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol":{"keccak256":"0x27c3c648062924bd44cd6f38541c78e6de145dd49515ee62321e42fc1b72e5c2","license":"MIT","urls":["bzz-raw://1cce2ebc0392b5a96f5c7bbaaf5c3d23c0e7190e64cfa05a49978badc1496141","dweb:/ipfs/QmYQC1U12igR1osVyjRHaHiiTgYYuPjncAxwmjbZ452dCL"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","license":"MIT","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c","license":"MIT","urls":["bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654","dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","license":"MIT","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3","license":"MIT","urls":["bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03","dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"]},"test/flash-account/FlashAccountBaseTest.sol":{"keccak256":"0x14d83475ea9fa26241b3cbfeae59d3d86f6ded1b2da2f6155dfa2bcfbb68c8ec","license":"MIT","urls":["bzz-raw://7def9cd731b2704418eadb5d509da09cabc9b8d1c6ad7b8c396ce3e30e38e92a","dweb:/ipfs/Qmav83rLsTNWoAbf4faqGKKNWkX4c4ztxJQtnhPfXdK5CD"]},"test/flash-account/chain/Avalanche.sol":{"keccak256":"0xa208be72699ceee1a716a7a002c1266bfa8a583d5e86200f9711ce8441211c79","license":"MIT","urls":["bzz-raw://fe1de117971850fee19f9384028b526fa158a0a7775b8c986aeea110a7c6f3ce","dweb:/ipfs/QmaDfozBvSiAPCbyg382adsmSBvjRCmz9YDB2oP9G55Qjz"]},"test/flash-account/chain/ChainBase.sol":{"keccak256":"0xc2f16018737d6a5894b56026db2168511f85a6193777b099bae8efe84a10f7fb","license":"MIT","urls":["bzz-raw://904c0c49429fa2d48c2069fd98bfcd0f7ab7174e16166550e0f4c98e1c4b0e62","dweb:/ipfs/QmYxFXbxY7PKBNhCqAeoXy6Tg4hcJ4cdsfSBP5Xefb3pkQ"]},"test/flash-account/chain/ChainFactory.sol":{"keccak256":"0xd5a7227853f55adea154fd632f3b94b697f0bff4654a73fd126838b4eea1383b","license":"MIT","urls":["bzz-raw://890541d4ba551848443ccfc08d41b79706c21e78047940671330a83b10a4e2f5","dweb:/ipfs/QmaB3DiFiVmGk1tPtiNyr7DBTReUYJ1SGZ2PuWDVm5WE96"]},"test/flash-account/chain/Ethereum.sol":{"keccak256":"0xf2fff5b6175b50629b9b1b41b73650fed871f41065dd9878c7ff3fa9a6005eb2","license":"MIT","urls":["bzz-raw://24e19383fab2494d1c071770bf4603b9f959f274f4b82914f9fdcb0d19fb48b8","dweb:/ipfs/QmT1rHkiXcaKqg5pr28MCdmq7mu2iWGRxRp3VU9UuvyQvy"]},"test/flash-account/chain/Lib.sol":{"keccak256":"0x34759f0a6b2b8900a3c2572fe9601977527d16cdb93f518cd4cbdacd8b0dcae6","license":"MIT","urls":["bzz-raw://d774a1f71c3dcf7bedc61496233f1de7aab0f01c15057de85f4e162d4a67d303","dweb:/ipfs/QmQH9vfDJz8oKZRbwwu8G3CJ411155cxRwxmfvgpu1JjiZ"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
              indexed: false,
            },
          ],
          type: "event",
          name: "log",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_address",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "uint256[]",
              name: "val",
              type: "uint256[]",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_array",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "int256[]",
              name: "val",
              type: "int256[]",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_array",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "val",
              type: "address[]",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_array",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_bytes",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_bytes32",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "int256",
              name: "",
              type: "int256",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_int",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "address",
              name: "val",
              type: "address",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_address",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "uint256[]",
              name: "val",
              type: "uint256[]",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_array",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "int256[]",
              name: "val",
              type: "int256[]",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_array",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "address[]",
              name: "val",
              type: "address[]",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_array",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "bytes",
              name: "val",
              type: "bytes",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_bytes",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "bytes32",
              name: "val",
              type: "bytes32",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_bytes32",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "int256",
              name: "val",
              type: "int256",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "decimals",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_decimal_int",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "val",
              type: "uint256",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "decimals",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_decimal_uint",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "int256",
              name: "val",
              type: "int256",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_int",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "string",
              name: "val",
              type: "string",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_string",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "key",
              type: "string",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "val",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_named_uint",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "string",
              name: "",
              type: "string",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_string",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "log_uint",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
              indexed: false,
            },
          ],
          type: "event",
          name: "logs",
          anonymous: false,
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "IS_TEST",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "excludeArtifacts",
          outputs: [
            {
              internalType: "string[]",
              name: "excludedArtifacts_",
              type: "string[]",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "excludeContracts",
          outputs: [
            {
              internalType: "address[]",
              name: "excludedContracts_",
              type: "address[]",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "excludeSelectors",
          outputs: [
            {
              internalType: "struct StdInvariant.FuzzSelector[]",
              name: "excludedSelectors_",
              type: "tuple[]",
              components: [
                {
                  internalType: "address",
                  name: "addr",
                  type: "address",
                },
                {
                  internalType: "bytes4[]",
                  name: "selectors",
                  type: "bytes4[]",
                },
              ],
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "excludeSenders",
          outputs: [
            {
              internalType: "address[]",
              name: "excludedSenders_",
              type: "address[]",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "failed",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "targetArtifactSelectors",
          outputs: [
            {
              internalType: "struct StdInvariant.FuzzArtifactSelector[]",
              name: "targetedArtifactSelectors_",
              type: "tuple[]",
              components: [
                {
                  internalType: "string",
                  name: "artifact",
                  type: "string",
                },
                {
                  internalType: "bytes4[]",
                  name: "selectors",
                  type: "bytes4[]",
                },
              ],
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "targetArtifacts",
          outputs: [
            {
              internalType: "string[]",
              name: "targetedArtifacts_",
              type: "string[]",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "targetContracts",
          outputs: [
            {
              internalType: "address[]",
              name: "targetedContracts_",
              type: "address[]",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "targetInterfaces",
          outputs: [
            {
              internalType: "struct StdInvariant.FuzzInterface[]",
              name: "targetedInterfaces_",
              type: "tuple[]",
              components: [
                {
                  internalType: "address",
                  name: "addr",
                  type: "address",
                },
                {
                  internalType: "string[]",
                  name: "artifacts",
                  type: "string[]",
                },
              ],
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "targetSelectors",
          outputs: [
            {
              internalType: "struct StdInvariant.FuzzSelector[]",
              name: "targetedSelectors_",
              type: "tuple[]",
              components: [
                {
                  internalType: "address",
                  name: "addr",
                  type: "address",
                },
                {
                  internalType: "bytes4[]",
                  name: "selectors",
                  type: "bytes4[]",
                },
              ],
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "targetSenders",
          outputs: [
            {
              internalType: "address[]",
              name: "targetedSenders_",
              type: "address[]",
            },
          ],
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {},
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {},
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "test/flash-account/FlashAccountBaseTest.sol": "FlashAccountBaseTest",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "contracts/1delta/flash-account/FlashAccount.sol": {
        keccak256:
          "0xf52cc45af1d15d718a9aed977d2c0b7e28e6ab45f8b2ce2adbfe890e853f3010",
        urls: [
          "bzz-raw://dc9b11b5e3a1db5e59aaef970e48baa86244c34db592fa4cd6a0940957f21983",
          "dweb:/ipfs/QmYW7CCU9sXS2C5AmNuN8VkYnmkq4e9pLQLrKR712QVZfB",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/FlashAccountBase.sol": {
        keccak256:
          "0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb",
        urls: [
          "bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7",
          "dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/FlashAccountFactory.sol": {
        keccak256:
          "0x55710aeef2c452edb298d4993b3067fcf007a2c8cc0f9a6e40098ac1309304e1",
        urls: [
          "bzz-raw://b9d2fda34b5c5e026ee3844caf57eddbc432eaca767cb930c3e5a302bf411005",
          "dweb:/ipfs/QmcL29CAQuVS2p3axrjrNwwSWzamo56rJx128YSVHwPT9Q",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/BaseLightAccount.sol": {
        keccak256:
          "0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869",
        urls: [
          "bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de",
          "dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/BaseLightAccountFactory.sol": {
        keccak256:
          "0x51ea9fe995d6edb55d035df8d9b340d02f600238dfe9688e00cb79050a6a613d",
        urls: [
          "bzz-raw://14e59a07ec07e28d25f8cfcee48abcec0b6ba4be2c40f2d9b5c04844fef04710",
          "dweb:/ipfs/QmXHaf7ACQD9NRXWrsfqQ3CJWyigFE4QvYL2LBaZUxM53d",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/CustomSlotInitializable.sol": {
        keccak256:
          "0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6",
        urls: [
          "bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c",
          "dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/EIP712.sol": {
        keccak256:
          "0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3",
        urls: [
          "bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783",
          "dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ERC1271.sol": {
        keccak256:
          "0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a",
        urls: [
          "bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1",
          "dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ExecutionLock.sol": {
        keccak256:
          "0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e",
        urls: [
          "bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd",
          "dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/proxy/Beacon.sol": {
        keccak256:
          "0xeb2ba1bd813b886f51233c05668c6cf9a65d7003fc84d0f48d8bf3e20dfa9177",
        urls: [
          "bzz-raw://4c53f0d17bbd2cfe12866562a234cf6ab61ea412caab8a2819619dcce3c2941b",
          "dweb:/ipfs/QmQS6AewSsfSvn6s5dihXaJzai5yWn3uNpw1T4FUtWkrvW",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/proxy/IBeacon.sol": {
        keccak256:
          "0x1f5d6e5e3ed41745c91221727d5de58a779e1aa83347d375f34203f3bcc4d757",
        urls: [
          "bzz-raw://166d7f47e1a313cbe1155fc800cf3c95e532451ea7fd12e888335acc0b1b03d2",
          "dweb:/ipfs/QmaEYqBkmFyjNr9iSrLQHBBwynqkruEJLgNMUt9Gp9it2z",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/proxy/LibClone.sol": {
        keccak256:
          "0x226151012faaff800114b3424350f5815430a455c631393418d52e28aa567e1a",
        urls: [
          "bzz-raw://542d094e5bd7a4b9335c22f2a1f23b3031a84e8ac95d9d1e5bc9b4d256778875",
          "dweb:/ipfs/QmTLWL1Nwxmzq6uKAThsNXcqe8AWRXy5vQP6uo8ptGPh4e",
        ],
        license: "MIT",
      },
      "lib/account-abstraction/contracts/core/BaseAccount.sol": {
        keccak256:
          "0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358",
        urls: [
          "bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07",
          "dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/EntryPoint.sol": {
        keccak256:
          "0x0eb1245b5541ff0fbc0f2a23c746e2b4eb9c46e801a4847f15d7d96d1cecc576",
        urls: [
          "bzz-raw://b002e499336c8f6ec05230762cccd3b48d67a2ec547e2789cfb70132af0b430f",
          "dweb:/ipfs/QmfRGPNgBrfxmLt9PQUEjocVmC47Mx14Vie1tziTARRZfq",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/Helpers.sol": {
        keccak256:
          "0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6",
        urls: [
          "bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e",
          "dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/NonceManager.sol": {
        keccak256:
          "0x1f951786ce6f171e7ed0242fee73ee4a205c7523404ee6cffca48b8c64ea5fe9",
        urls: [
          "bzz-raw://a602bf2274d478dae7a532cca31f8179131808c324cc26ece5c7e87c5a1015a6",
          "dweb:/ipfs/QmaaSyw5GGbAWzUhAPCtsb38P3MmaVr1ngp61PYHCU2a5a",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/SenderCreator.sol": {
        keccak256:
          "0xeb95afb6e4cf921c1ed105ecb9f549ca46bee57f68acd1d2f4f84607ac0db5c5",
        urls: [
          "bzz-raw://d2ac91562f1fcabe4809a1b4256895efebcf46f89e08336a6c09ee2d29733238",
          "dweb:/ipfs/QmPsQnPcCzioPwVtUhxkbnwKPC1bnhHSbAwK9GXVpjN3mH",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/StakeManager.sol": {
        keccak256:
          "0x673eb19600058d8642605ca409c9e1d4cab13735564b856270b92c330ffb1b8d",
        urls: [
          "bzz-raw://06599c57c7075ee8eb5f1710fccca3eb322876b968ec271e1fb34af41510ab2c",
          "dweb:/ipfs/QmVsDEjmZYtzgXa4AYKxbQEYQVh6NBq8GmFJCariBUqK4G",
        ],
        license: "GPL-3.0-only",
      },
      "lib/account-abstraction/contracts/core/UserOperationLib.sol": {
        keccak256:
          "0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b",
        urls: [
          "bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc",
          "dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAccount.sol": {
        keccak256:
          "0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78",
        urls: [
          "bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020",
          "dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAccountExecute.sol": {
        keccak256:
          "0xd3dc32dde1add1fb6377f939ceff6be31c2e21343522311f7b88db666be9ee6c",
        urls: [
          "bzz-raw://5b8f065171bd32e23b306868189c730f849ce6147f753c59e396e7afcf384577",
          "dweb:/ipfs/QmZpDRNEZ9YNgGgyLQo5yM4bB1FNbtnfDABsChbgSQKXUh",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAggregator.sol": {
        keccak256:
          "0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588",
        urls: [
          "bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155",
          "dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IEntryPoint.sol": {
        keccak256:
          "0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4",
        urls: [
          "bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9",
          "dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/INonceManager.sol": {
        keccak256:
          "0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb",
        urls: [
          "bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3",
          "dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IPaymaster.sol": {
        keccak256:
          "0x49d8dbf8a85b006bcd89bbc40e4e9e113997cc016007de85263bdae70572d07f",
        urls: [
          "bzz-raw://bc0d83804c1b795d5c216b3518cd176c48f90db28550f267cbd89746d6b476c8",
          "dweb:/ipfs/QmNdCm4c6hnt7f6Q8q21QjtCNZWWRUaMVEYnQHEv68VnKt",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IStakeManager.sol": {
        keccak256:
          "0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04",
        urls: [
          "bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00",
          "dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj",
        ],
        license: "GPL-3.0-only",
      },
      "lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol": {
        keccak256:
          "0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359",
        urls: [
          "bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be",
          "dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":
        {
          keccak256:
            "0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7",
          urls: [
            "bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe",
            "dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi",
          ],
          license: "GPL-3.0",
        },
      "lib/account-abstraction/contracts/utils/Exec.sol": {
        keccak256:
          "0x86b1b1cd11158dddb9d381040c57fdc643c74b5e4eed3e7e036f32452672ad74",
        urls: [
          "bzz-raw://ad88663b6c76df73cf09a272cf333d038df7bb4c51281284b572bf9b46e1cd77",
          "dweb:/ipfs/QmVKxYF8avyPBtqejVhFCM2CuHsfpsCh7TsPqkBLtrgwJQ",
        ],
        license: "LGPL-3.0-only",
      },
      "lib/forge-std/src/Base.sol": {
        keccak256:
          "0x4ff1a785311017d1eedb1b4737956fa383067ad34eb439abfec1d989754dde1c",
        urls: [
          "bzz-raw://f553622969b9fdb930246704a4c10dfaee6b1a4468c142fa7eb9dc292a438224",
          "dweb:/ipfs/QmcxqHnqdQsMVtgsfH9VNLmZ3g7GhgNagfq7yvNCDcCHFK",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdAssertions.sol": {
        keccak256:
          "0x4584f551c3a875c26423c1e50a77179bc2f9c9c1ee6d0f0c6be0f89ca5ee8270",
        urls: [
          "bzz-raw://ef118876a862b60ba8a6612b8b3f3a6c226e11a0071a2e9695f021586d1bfdbe",
          "dweb:/ipfs/QmXd2vD91PkvoFWasFkgbDi89PctmgsHVxGvGNyhjmRK2b",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdChains.sol": {
        keccak256:
          "0xcd3e64ec9ffa19a2c0715bbdaf7ddf28887cc418e079bec4373fd6a3f9961a7b",
        urls: [
          "bzz-raw://e981a2ab738590928e9efa5f3d95a408c718eb12d73a113d7675f3ed55a026a1",
          "dweb:/ipfs/QmTgSEkWWsBRy32goRCaUkraSgpZHtgbZoKC3iEFNz5RDc",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdCheats.sol": {
        keccak256:
          "0x0fa6ec03602648b62cce41aab2096e6b7e052f2846075d967b6958dd586db746",
        urls: [
          "bzz-raw://cd84e2ca9c1eaed6b76768cc12bb8c1af8289170ea8b7706f58d516460d79c41",
          "dweb:/ipfs/QmQ7BK7co6DE4eWUqMyv11s5eHYkS1tyx8tDSZGZVtf2aK",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdError.sol": {
        keccak256:
          "0xbf477b11a42d7611696956546bcfaa29317d1166bf65e402344599c05943fc77",
        urls: [
          "bzz-raw://bc2e117d1135e030862b96a6526a43feb38d396cc79857f1fb696d4eff0e5fd6",
          "dweb:/ipfs/QmdSuQ5RrQudTLsNmWXGEeVJX8gR5U9XPm6m4dwwuQnJrj",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdInvariant.sol": {
        keccak256:
          "0x4dab3021edfa9511bbdd80c48f060ef62eaf457f99eaf841f561fc2557d9a08d",
        urls: [
          "bzz-raw://07668628673174cf8f27f8f4e1f862bab775013ec247eb34f698c5005f229391",
          "dweb:/ipfs/QmPJsiiYwmCZXMsHmQv5tg8VF3CAhNdat7WnKLTWZZH2v5",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdJson.sol": {
        keccak256:
          "0xbc0132abe1c2accc2867c0f03667afffdf92f3e95a581bb03c9557eaa38ea500",
        urls: [
          "bzz-raw://eb6fab37dc73c219cfbb7b4f4998bcf7677ca5397a867e850f40232192073974",
          "dweb:/ipfs/QmUHsbVdp9SKmgek7ZfPcLTKrpZFXpqaqt4sVejzxGEQL3",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdMath.sol": {
        keccak256:
          "0xd90ad4fd8aeaeb8929964e686e769fdedd5eded3fc3815df194a0ab9f91a3fb2",
        urls: [
          "bzz-raw://7919b70f636c7b805223992f28ad1ad0145d6c1385b5931a3589aface5fe6c92",
          "dweb:/ipfs/QmY7FRaULwoGgFteF8GawjQJRfasNgpWnU2aiMsFrYpuTC",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdStorage.sol": {
        keccak256:
          "0xb91ab24383a5872b894fc93325eef1add6cbbf981628f18e860068bf88bb7dcc",
        urls: [
          "bzz-raw://2651e33b9ac8fc5803ed0a43078c1bf4fa90a0b0347aafd95776b02daccdcc57",
          "dweb:/ipfs/QmbdRyPuGJdZgnCuMnp7c1WsBo1Spf7j1KMmws1Z5rd4BQ",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdStyle.sol": {
        keccak256:
          "0x43e2a8a9b9c2574dabe74f11adf6f782df218f463540e3b5b563609fe108597d",
        urls: [
          "bzz-raw://51363ca97404cf4128e1141428949768c31929e75e014b02c85e887fbbb4f1b8",
          "dweb:/ipfs/QmVhtbQc2fU4rRmbcfBtz34mAgG4BAZBsbna1Ca4SkoPsK",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdToml.sol": {
        keccak256:
          "0x58a72c765ed3f7ff6b105509689658795b8a3739b8931772a497155878381861",
        urls: [
          "bzz-raw://b4a3746f4fabaeb980bd77d9e091d3904ee38a6c0e191bfa8ba6874c6f8558a3",
          "dweb:/ipfs/QmUfFDMEn461FgGEXt5HicyGD54sc28sLaQ9JRWDMBKed8",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/StdUtils.sol": {
        keccak256:
          "0x7274081e11c05164fd8eadde4de8305c033e58a43008dea58065f3170ccf0737",
        urls: [
          "bzz-raw://e9801614b6c9d3e472982e6cc68f5f1ad03682f84eafb686be65633c7132d138",
          "dweb:/ipfs/QmcQSUcrm2A7XuektnxJjvYGmZtBeA6LKPxCXRqdXBX776",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/Test.sol": {
        keccak256:
          "0x3b4bb409a156dee9ce261458117fe9f81080ca844a8a26c07c857c46d155effe",
        urls: [
          "bzz-raw://5792c69fe24bdc063a14e08fe68275007fdb1e5e7e343840a77938cb7e95a64e",
          "dweb:/ipfs/QmcAMhaurUwzhytJFYix4vRNeZeV8g27b8LnV3t7dvYtiK",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/Vm.sol": {
        keccak256:
          "0x44bfadcf5a89b8058f80258f2259585c740f9cc45669a0579f4f2753ff2c6354",
        urls: [
          "bzz-raw://bbc366c8b3499d5030e3b2e45bac23770531f2f5243a0e80e3d5a66b6f9a312c",
          "dweb:/ipfs/QmNxDEB3BaVnKzNaWedtdMshhvCEddB1AsdJZcsQx6jdtC",
        ],
        license: "MIT OR Apache-2.0",
      },
      "lib/forge-std/src/console.sol": {
        keccak256:
          "0x4bbf47eb762cef93729d6ef15e78789957147039b113e5d4df48e3d3fd16d0f5",
        urls: [
          "bzz-raw://af9e3a7c3d82fb5b10b57ca4d1a82f2acbef80c077f6f6ef0cc0187c7bfd9f57",
          "dweb:/ipfs/QmR9VzmnBDJpgiDP6CHT6truehukF9HpYvuP6kRiJbDwPP",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/console2.sol": {
        keccak256:
          "0x3b8fe79f48f065a4e4d35362171304a33784c3a90febae5f2787805a438de12f",
        urls: [
          "bzz-raw://61de63af08803549299e68b6e6e88d40f3c5afac450e4ee0a228c66a61ba003d",
          "dweb:/ipfs/QmWVoQ5rrVxnczD4ZZoPbD4PC9Z3uExJtzjD4awTqd14MZ",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/interfaces/IMulticall3.sol": {
        keccak256:
          "0x7aac1389150499a922d1f9ef5749c908cef127cb2075b92fa17e9cb611263d0a",
        urls: [
          "bzz-raw://d95ebb7c7c463e08ebc12dab639945752fb2480acfc6e86da32f72732a7fd0c0",
          "dweb:/ipfs/QmNXK8P8oPWwajsQHvAHw3JPyQidPLCGQN3hWu1Lk6PBL2",
        ],
        license: "MIT",
      },
      "lib/forge-std/src/safeconsole.sol": {
        keccak256:
          "0xbef9786cb49d3eade757bad87568c49c8c8f35721f0193c95ffb055d9e466e11",
        urls: [
          "bzz-raw://3bafd2b0b2d28068d329f95ea8a1fbce3719c257fcb863fc01abcbafd8d531ab",
          "dweb:/ipfs/QmUeaFjKWTVDBsHVfSob4mwt6A5hTnKDz22HaUXeZhypa3",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        keccak256:
          "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
        urls: [
          "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
          "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
        keccak256:
          "0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c",
        urls: [
          "bzz-raw://e2c9d517f0c136d54bd00cd57959d25681d4d6273f5bbbc263afe228303772f0",
          "dweb:/ipfs/QmReNFjXBiufByiAAzfSQ2SM5r3qeUErn46BmN3yVRvrek",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": {
        keccak256:
          "0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e",
        urls: [
          "bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2",
          "dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
        keccak256:
          "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        urls: [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
        keccak256:
          "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        urls: [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
        keccak256:
          "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        urls: [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":
        {
          keccak256:
            "0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715",
          urls: [
            "bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20",
            "dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256:
          "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        urls: [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        keccak256:
          "0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e",
        urls: [
          "bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15",
          "dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        keccak256:
          "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
        urls: [
          "bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
          "dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        keccak256:
          "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        urls: [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256:
          "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
        urls: [
          "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
          "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol": {
        keccak256:
          "0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3",
        urls: [
          "bzz-raw://3cf0c69ab827e3251db9ee6a50647d62c90ba580a4d7bbff21f2bea39e7b2f4a",
          "dweb:/ipfs/QmZiKwtKU1SBX4RGfQtY7PZfiapbbu6SZ9vizGQD9UHjRA",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256:
          "0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865",
        urls: [
          "bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68",
          "dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        keccak256:
          "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
        urls: [
          "bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
          "dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":
        {
          keccak256:
            "0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7",
          urls: [
            "bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0",
            "dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":
        {
          keccak256:
            "0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f",
          urls: [
            "bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8",
            "dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
        keccak256:
          "0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa",
        urls: [
          "bzz-raw://8084aa71a4cc7d2980972412a88fe4f114869faea3fefa5436431644eb5c0287",
          "dweb:/ipfs/Qmbqfs5dRdPvHVKY8kTaeyc65NdqXRQwRK7h9s5UJEhD1p",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol":
        {
          keccak256:
            "0x27c3c648062924bd44cd6f38541c78e6de145dd49515ee62321e42fc1b72e5c2",
          urls: [
            "bzz-raw://1cce2ebc0392b5a96f5c7bbaaf5c3d23c0e7190e64cfa05a49978badc1496141",
            "dweb:/ipfs/QmYQC1U12igR1osVyjRHaHiiTgYYuPjncAxwmjbZ452dCL",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256:
          "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        urls: [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256:
          "0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c",
        urls: [
          "bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654",
          "dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256:
          "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
        urls: [
          "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
          "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256:
          "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
        urls: [
          "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
          "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ",
        ],
        license: "MIT",
      },
      "test/flash-account/FlashAccountBaseTest.sol": {
        keccak256:
          "0x14d83475ea9fa26241b3cbfeae59d3d86f6ded1b2da2f6155dfa2bcfbb68c8ec",
        urls: [
          "bzz-raw://7def9cd731b2704418eadb5d509da09cabc9b8d1c6ad7b8c396ce3e30e38e92a",
          "dweb:/ipfs/Qmav83rLsTNWoAbf4faqGKKNWkX4c4ztxJQtnhPfXdK5CD",
        ],
        license: "MIT",
      },
      "test/flash-account/chain/Avalanche.sol": {
        keccak256:
          "0xa208be72699ceee1a716a7a002c1266bfa8a583d5e86200f9711ce8441211c79",
        urls: [
          "bzz-raw://fe1de117971850fee19f9384028b526fa158a0a7775b8c986aeea110a7c6f3ce",
          "dweb:/ipfs/QmaDfozBvSiAPCbyg382adsmSBvjRCmz9YDB2oP9G55Qjz",
        ],
        license: "MIT",
      },
      "test/flash-account/chain/ChainBase.sol": {
        keccak256:
          "0xc2f16018737d6a5894b56026db2168511f85a6193777b099bae8efe84a10f7fb",
        urls: [
          "bzz-raw://904c0c49429fa2d48c2069fd98bfcd0f7ab7174e16166550e0f4c98e1c4b0e62",
          "dweb:/ipfs/QmYxFXbxY7PKBNhCqAeoXy6Tg4hcJ4cdsfSBP5Xefb3pkQ",
        ],
        license: "MIT",
      },
      "test/flash-account/chain/ChainFactory.sol": {
        keccak256:
          "0xd5a7227853f55adea154fd632f3b94b697f0bff4654a73fd126838b4eea1383b",
        urls: [
          "bzz-raw://890541d4ba551848443ccfc08d41b79706c21e78047940671330a83b10a4e2f5",
          "dweb:/ipfs/QmaB3DiFiVmGk1tPtiNyr7DBTReUYJ1SGZ2PuWDVm5WE96",
        ],
        license: "MIT",
      },
      "test/flash-account/chain/Ethereum.sol": {
        keccak256:
          "0xf2fff5b6175b50629b9b1b41b73650fed871f41065dd9878c7ff3fa9a6005eb2",
        urls: [
          "bzz-raw://24e19383fab2494d1c071770bf4603b9f959f274f4b82914f9fdcb0d19fb48b8",
          "dweb:/ipfs/QmT1rHkiXcaKqg5pr28MCdmq7mu2iWGRxRp3VU9UuvyQvy",
        ],
        license: "MIT",
      },
      "test/flash-account/chain/Lib.sol": {
        keccak256:
          "0x34759f0a6b2b8900a3c2572fe9601977527d16cdb93f518cd4cbdacd8b0dcae6",
        urls: [
          "bzz-raw://d774a1f71c3dcf7bedc61496233f1de7aab0f01c15057de85f4e162d4a67d303",
          "dweb:/ipfs/QmQH9vfDJz8oKZRbwwu8G3CJ411155cxRwxmfvgpu1JjiZ",
        ],
        license: "MIT",
      },
    },
    version: 1,
  },
  id: 224,
} as const as Abi;
export type { FlashAccountBaseTestAbiType } from "./FlashAccountBaseTest";
export { getFlashAccountBaseTestContract } from "./FlashAccountBaseTest";

export const UtilityAdapterAbi = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "weth_",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "NATIVE_ADDRESS",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "WETH",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "ZERO_ADDRESS",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getBalance",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address",
        },
        {
          name: "account",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "isApprovedAddress",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "transferERC20",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address",
        },
        {
          name: "to",
          type: "address",
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "transferFromERC20",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address",
        },
        {
          name: "from",
          type: "address",
          internalType: "address",
        },
        {
          name: "to",
          type: "address",
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "transferNative",
      inputs: [
        {
          name: "to",
          type: "address",
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "error",
      name: "SafeERC20FailedOperation",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "ZeroAddress",
      inputs: [],
    },
    {
      type: "error",
      name: "ZeroAmount",
      inputs: [],
    },
  ],
  bytecode: {
    object:
      "0x60a0604052348015600e575f5ffd5b50604051610a6d380380610a6d833981016040819052602b916063565b806001600160a01b03811660525760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b031660805250608e565b5f602082840312156072575f5ffd5b81516001600160a01b03811681146087575f5ffd5b9392505050565b6080516109c76100a65f395f61012001526109c75ff3fe608060405234801561000f575f5ffd5b5060043610610084575f3560e01c8063ad5c464811610058578063ad5c46481461011b578063d4fac45d14610142578063d5bcb61014610163578063dd71105d1461017e575f5ffd5b80628fbb4814610088578063538ba4f9146100c75780637d2e90c2146100f35780639db5dbe414610108575b5f5ffd5b6100b261009636600461089f565b5f60208181529281526040808220909352908152205460ff1681565b60405190151581526020015b60405180910390f35b6100ce5f81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100be565b6101066101013660046108d0565b610191565b005b6101066101163660046108f8565b610230565b6100ce7f000000000000000000000000000000000000000000000000000000000000000081565b61015561015036600461089f565b61031c565b6040519081526020016100be565b6100ce73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61010661018c366004610932565b610330565b73ffffffffffffffffffffffffffffffffffffffff82166101de576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f1981036101e95750475b805f03610222576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61022c82826104c7565b5050565b73ffffffffffffffffffffffffffffffffffffffff82161580610267575073ffffffffffffffffffffffffffffffffffffffff8316155b80610287575073ffffffffffffffffffffffffffffffffffffffff83163b155b156102be576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f1981036102d3576102d08330610549565b90505b805f0361030c576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610317838383610647565b505050565b5f6103278383610549565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff83161580610367575073ffffffffffffffffffffffffffffffffffffffff8216155b80610386575073ffffffffffffffffffffffffffffffffffffffff8416155b806103a6575073ffffffffffffffffffffffffffffffffffffffff84163b155b156103dd576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f19810361047c576040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015285169063dd62ed3e90604401602060405180830381865afa158015610455573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610479919061097a565b90505b805f036104b5576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104c1848484846106fb565b50505050565b5f811180156104d65750804710155b1561022c575f5f8373ffffffffffffffffffffffffffffffffffffffff16836040515f6040518083038185875af1925050503d805f8114610532576040519150601f19603f3d011682016040523d82523d5f602084013e610537565b606091505b5091509150816104c157805160208201fd5b5f73ffffffffffffffffffffffffffffffffffffffff83161580610596575073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b156105b9575073ffffffffffffffffffffffffffffffffffffffff81163161032a565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015610623573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610327919061097a565b8015610317575f1981036106f0576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156106bf573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e3919061097a565b90506104c184848361070d565b61031783838361070d565b80156104c1576104c18484848461078e565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261031791859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506107d4565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526104c19186918216906323b872dd90608401610747565b5f5f60205f8451602086015f885af1806107f3576040513d5f823e3d81fd5b50505f513d9150811561080a578060011415610824565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156104c1576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240160405180910390fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461089a575f5ffd5b919050565b5f5f604083850312156108b0575f5ffd5b6108b983610877565b91506108c760208401610877565b90509250929050565b5f5f604083850312156108e1575f5ffd5b6108ea83610877565b946020939093013593505050565b5f5f5f6060848603121561090a575f5ffd5b61091384610877565b925061092160208501610877565b929592945050506040919091013590565b5f5f5f5f60808587031215610945575f5ffd5b61094e85610877565b935061095c60208601610877565b925061096a60408601610877565b9396929550929360600135925050565b5f6020828403121561098a575f5ffd5b505191905056fea26469706673582212204a0803eae5165104ce8c72daadab1794706863246cc72245cc4a6894e9dd961c64736f6c634300081c0033",
    sourceMap:
      "475:3051:4:-:0;;;659:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;710:5;-1:-1:-1;;;;;953:21:3;;949:47;;983:13;;-1:-1:-1;;;983:13:3;;;;;;;;;;;949:47;-1:-1:-1;;;;;1006:12:3;;;-1:-1:-1;475:3051:4;;14:290:231;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:231;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:231:o;:::-;475:3051:4;;;;;;;;;;;;",
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      "0x608060405234801561000f575f5ffd5b5060043610610084575f3560e01c8063ad5c464811610058578063ad5c46481461011b578063d4fac45d14610142578063d5bcb61014610163578063dd71105d1461017e575f5ffd5b80628fbb4814610088578063538ba4f9146100c75780637d2e90c2146100f35780639db5dbe414610108575b5f5ffd5b6100b261009636600461089f565b5f60208181529281526040808220909352908152205460ff1681565b60405190151581526020015b60405180910390f35b6100ce5f81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100be565b6101066101013660046108d0565b610191565b005b6101066101163660046108f8565b610230565b6100ce7f000000000000000000000000000000000000000000000000000000000000000081565b61015561015036600461089f565b61031c565b6040519081526020016100be565b6100ce73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61010661018c366004610932565b610330565b73ffffffffffffffffffffffffffffffffffffffff82166101de576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f1981036101e95750475b805f03610222576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61022c82826104c7565b5050565b73ffffffffffffffffffffffffffffffffffffffff82161580610267575073ffffffffffffffffffffffffffffffffffffffff8316155b80610287575073ffffffffffffffffffffffffffffffffffffffff83163b155b156102be576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f1981036102d3576102d08330610549565b90505b805f0361030c576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610317838383610647565b505050565b5f6103278383610549565b90505b92915050565b73ffffffffffffffffffffffffffffffffffffffff83161580610367575073ffffffffffffffffffffffffffffffffffffffff8216155b80610386575073ffffffffffffffffffffffffffffffffffffffff8416155b806103a6575073ffffffffffffffffffffffffffffffffffffffff84163b155b156103dd576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f19810361047c576040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015230602483015285169063dd62ed3e90604401602060405180830381865afa158015610455573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610479919061097a565b90505b805f036104b5576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104c1848484846106fb565b50505050565b5f811180156104d65750804710155b1561022c575f5f8373ffffffffffffffffffffffffffffffffffffffff16836040515f6040518083038185875af1925050503d805f8114610532576040519150601f19603f3d011682016040523d82523d5f602084013e610537565b606091505b5091509150816104c157805160208201fd5b5f73ffffffffffffffffffffffffffffffffffffffff83161580610596575073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b156105b9575073ffffffffffffffffffffffffffffffffffffffff81163161032a565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015610623573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610327919061097a565b8015610317575f1981036106f0576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156106bf573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e3919061097a565b90506104c184848361070d565b61031783838361070d565b80156104c1576104c18484848461078e565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261031791859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506107d4565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526104c19186918216906323b872dd90608401610747565b5f5f60205f8451602086015f885af1806107f3576040513d5f823e3d81fd5b50505f513d9150811561080a578060011415610824565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156104c1576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240160405180910390fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461089a575f5ffd5b919050565b5f5f604083850312156108b0575f5ffd5b6108b983610877565b91506108c760208401610877565b90509250929050565b5f5f604083850312156108e1575f5ffd5b6108ea83610877565b946020939093013593505050565b5f5f5f6060848603121561090a575f5ffd5b61091384610877565b925061092160208501610877565b929592945050506040919091013590565b5f5f5f5f60808587031215610945575f5ffd5b61094e85610877565b935061095c60208601610877565b925061096a60408601610877565b9396929550929360600135925050565b5f6020828403121561098a575f5ffd5b505191905056fea26469706673582212204a0803eae5165104ce8c72daadab1794706863246cc72245cc4a6894e9dd961c64736f6c634300081c0033",
    sourceMap:
      "475:3051:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;700:69:3;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;645:14:231;;638:22;620:41;;608:2;593:18;700:69:3;;;;;;;;576:81;;615:42;576:81;;;;;848:42:231;836:55;;;818:74;;806:2;791:18;576:81:3;672:226:231;1787:303:4;;;;;;:::i;:::-;;:::i;:::-;;1073:384;;;;;;:::i;:::-;;:::i;664:29:3:-;;;;;3389:135:4;;;;;;:::i;:::-;;:::i;:::-;;;1733:25:231;;;1721:2;1706:18;3389:135:4;1587:177:231;487:83:3;;528:42;487:83;;2544:444:4;;;;;;:::i;:::-;;:::i;1787:303::-;1862:16;;;1858:42;;1887:13;;;;;;;;;;;;;;1858:42;-1:-1:-1;;1915:6:4;:27;1911:88;;-1:-1:-1;1967:21:4;1911:88;2013:6;2023:1;2013:11;2009:36;;2033:12;;;;;;;;;;;;;;2009:36;2056:27;2072:2;2076:6;2056:15;:27::i;:::-;1787:303;;:::o;1073:384::-;1162:16;;;;;:39;;-1:-1:-1;1182:19:4;;;;1162:39;:65;;;-1:-1:-1;1205:17:4;;;;:22;1162:65;1158:91;;;1236:13;;;;;;;;;;;;;;1158:91;-1:-1:-1;;1264:6:4;:27;1260:100;;1316:33;1328:5;1343:4;1316:11;:33::i;:::-;1307:42;;1260:100;1374:6;1384:1;1374:11;1370:36;;1394:12;;;;;;;;;;;;;;1370:36;1417:33;1432:5;1439:2;1443:6;1417:14;:33::i;:::-;1073:384;;;:::o;3389:135::-;3464:7;3490:27;3502:5;3509:7;3490:11;:27::i;:::-;3483:34;;3389:135;;;;;:::o;2544:444::-;2651:18;;;;;:38;;-1:-1:-1;2673:16:4;;;;2651:38;:61;;;-1:-1:-1;2693:19:4;;;;2651:61;:87;;;-1:-1:-1;2716:17:4;;;;:22;2651:87;2647:113;;;2747:13;;;;;;;;;;;;;;2647:113;-1:-1:-1;;2774:6:4;:27;2770:111;;2826:44;;;;;:23;2415:55:231;;;2826:44:4;;;2397:74:231;2864:4:4;2487:18:231;;;2480:83;2826:23:4;;;;;2370:18:231;;2826:44:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2817:53;;2770:111;2895:6;2905:1;2895:11;2891:36;;2915:12;;;;;;;;;;;;;;2891:36;2938:43;2957:5;2964:4;2970:2;2974:6;2938:18;:43::i;:::-;2544:444;;;;:::o;2538:412:3:-;2637:1;2628:6;:10;:45;;;;;2667:6;2642:21;:31;;2628:45;2624:320;;;2690:12;2704:23;2731:8;:13;;2752:6;2731:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2689:74;;;;2782:7;2777:157;;2890:10;2884:17;2879:2;2867:10;2863:19;2856:46;3377:227;3453:7;3476:21;;;;;:48;;-1:-1:-1;3501:23:3;;;528:42;3501:23;3476:48;3472:76;;;-1:-1:-1;3533:15:3;;;;3526:22;;3472:76;3565:32;;;;;:23;836:55:231;;;3565:32:3;;;818:74:231;3565:23:3;;;;;791:18:231;;3565:32:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1313:436::-;1417:10;;1413:330;;-1:-1:-1;;1447:6:3;:27;1443:290;;1512:38;;;;;1544:4;1512:38;;;818:74:231;1494:15:3;;1512:23;;;;;;791:18:231;;1512:38:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1494:56;;1568;1598:5;1606:8;1616:7;1568:22;:56::i;1443:290::-;1663:55;1693:5;1701:8;1711:6;1663:22;:55::i;2076:230::-;2198:10;;2194:106;;2224:65;2258:5;2266:4;2272:8;2282:6;2224:26;:65::i;1219:160:208:-;1328:43;;1343:14;3165:55:231;;;1328:43:208;;;3147:74:231;3237:18;;;3230:34;;;1301:71:208;;1321:5;;1343:14;;;;;3120:18:231;;1328:43:208;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1301:19;:71::i;1618:188::-;1745:53;;1760:18;3495:55:231;;;1745:53:208;;;3477:74:231;3587:55;;;3567:18;;;3560:83;3659:18;;;3652:34;;;1718:81:208;;1738:5;;1760:18;;;;;3450::231;;1745:53:208;3275:417:231;8370:720:208;8450:18;8478:19;8616:4;8613:1;8606:4;8600:11;8593:4;8587;8583:15;8580:1;8573:5;8566;8561:60;8673:7;8663:176;;8717:4;8711:11;8762:16;8759:1;8754:3;8739:40;8808:16;8803:3;8796:29;8663:176;-1:-1:-1;;8916:1:208;8910:8;8866:16;;-1:-1:-1;8942:15:208;;:68;;8994:11;9009:1;8994:16;;8942:68;;;8960:26;;;;:31;8942:68;8938:146;;;9033:40;;;;;848:42:231;836:55;;9033:40:208;;;818:74:231;791:18;;9033:40:208;;;;;;;14:196:231;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:260::-;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;;431:38;465:2;454:9;450:18;431:38;:::i;:::-;421:48;;215:260;;;;;:::o;903:300::-;971:6;979;1032:2;1020:9;1011:7;1007:23;1003:32;1000:52;;;1048:1;1045;1038:12;1000:52;1071:29;1090:9;1071:29;:::i;:::-;1061:39;1169:2;1154:18;;;;1141:32;;-1:-1:-1;;;903:300:231:o;1208:374::-;1285:6;1293;1301;1354:2;1342:9;1333:7;1329:23;1325:32;1322:52;;;1370:1;1367;1360:12;1322:52;1393:29;1412:9;1393:29;:::i;:::-;1383:39;;1441:38;1475:2;1464:9;1460:18;1441:38;:::i;:::-;1208:374;;1431:48;;-1:-1:-1;;;1548:2:231;1533:18;;;;1520:32;;1208:374::o;1769:449::-;1855:6;1863;1871;1879;1932:3;1920:9;1911:7;1907:23;1903:33;1900:53;;;1949:1;1946;1939:12;1900:53;1972:29;1991:9;1972:29;:::i;:::-;1962:39;;2020:38;2054:2;2043:9;2039:18;2020:38;:::i;:::-;2010:48;;2077:38;2111:2;2100:9;2096:18;2077:38;:::i;:::-;1769:449;;;;-1:-1:-1;2067:48:231;;2184:2;2169:18;2156:32;;-1:-1:-1;;1769:449:231:o;2574:184::-;2644:6;2697:2;2685:9;2676:7;2672:23;2668:32;2665:52;;;2713:1;2710;2703:12;2665:52;-1:-1:-1;2736:16:231;;2574:184;-1:-1:-1;2574:184:231:o",
    linkReferences: {},
    immutableReferences: {
      "808": [
        {
          start: 288,
          length: 32,
        },
      ],
    },
  },
  methodIdentifiers: {
    "NATIVE_ADDRESS()": "d5bcb610",
    "WETH()": "ad5c4648",
    "ZERO_ADDRESS()": "538ba4f9",
    "getBalance(address,address)": "d4fac45d",
    "isApprovedAddress(address,address)": "008fbb48",
    "transferERC20(address,address,uint256)": "9db5dbe4",
    "transferFromERC20(address,address,address,uint256)": "dd71105d",
    "transferNative(address,uint256)": "7d2e90c2",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"weth_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"inputs":[],"name":"ZeroAmount","type":"error"},{"inputs":[],"name":"NATIVE_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ZERO_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"account","type":"address"}],"name":"getBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"isApprovedAddress","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFromERC20","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferNative","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{"constructor":{"params":{"weth_":"The address of the WETH token."}},"getBalance(address,address)":{"details":"If the token is the zero address, the balance of the native token will be returned.","params":{"account":"The address to check the balance of.","token":"The address of the token to check the balance of."},"returns":{"_0":"The balance of the specified token for the specified address."}},"transferERC20(address,address,uint256)":{"details":"If the amount is type(uint256).max, the balance of the token in the contract will be used.","params":{"amount":"The amount of tokens to transfer.","to":"The address to transfer the tokens to.","token":"The address of the ERC20 token to transfer."}},"transferFromERC20(address,address,address,uint256)":{"details":"If the amount is type(uint256).max, the allowance of the token from the from address will be used.","params":{"amount":"The amount of tokens to transfer.","from":"The address to transfer the tokens from.","to":"The address to transfer the tokens to.","token":"The address of the ERC20 token to transfer."}},"transferNative(address,uint256)":{"details":"If the amount is type(uint256).max, the balance of the native token in the contract will be used.","params":{"amount":"The amount of native tokens to transfer.","to":"The address to transfer the native tokens to."}}},"title":"UtilityAdapter","version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Constructor for the UtilityAdapter contract."},"getBalance(address,address)":{"notice":"Get the balance of a specified token for a specified address."},"transferERC20(address,address,uint256)":{"notice":"Transfer ERC20 tokens to a specified address."},"transferFromERC20(address,address,address,uint256)":{"notice":"Transfer ERC20 tokens from a specified address to a specified address."},"transferNative(address,uint256)":{"notice":"Transfer native tokens (ETH/AVAX) to a specified address."}},"notice":"This contract provides utility functions that can be used by adapters.","version":1}},"settings":{"compilationTarget":{"contracts/1delta/flash-account/adapters/UtilityAdapter.sol":"UtilityAdapter"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol":{"keccak256":"0x15b0bd8882ceeee55ec10f378d467cedc3bb93fdd7365266358f775d815f91dd","license":"MIT","urls":["bzz-raw://d90e6c09d63d176ccdac0734c3bffb88df776f0e56897dc484143142f24c16bf","dweb:/ipfs/QmVSCEPJva3ezJyRaCb7PbVmHTduJoDjw6UWc2p3MnbXo5"]},"contracts/1delta/flash-account/adapters/UtilityAdapter.sol":{"keccak256":"0xae95b72ae752a63cf9225ac970155903125a35c2e981258165cf199c7cfd1bb6","license":"MIT","urls":["bzz-raw://f7831e8d6db3c51dc5cdef3e840c043cb5d3cb166f4d714363dc36f608dc9a93","dweb:/ipfs/QmZo7moqzAUV2J1RctMdYJ7EnbNU9UDchbBqhZwtfHeqgM"]},"contracts/1delta/flash-account/common/FlashAccountError.sol":{"keccak256":"0x766fe156ebe6cc9c128f746007bb2775b8bb2835d0ef0b4f046fbad8bb9879f8","license":"MIT","urls":["bzz-raw://42203fac4614cc433d9e1207be392e8b9b4e504270cf05263c5c695976260363","dweb:/ipfs/QmUyNtb961G97JB5u4yLmaZdC8JNASMrbtvf8ypgf3FpgM"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"keccak256":"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7","license":"MIT","urls":["bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b","dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"keccak256":"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724","license":"MIT","urls":["bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a","dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"keccak256":"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c","license":"MIT","urls":["bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba","dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7","license":"MIT","urls":["bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db","dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"]},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e","license":"MIT","urls":["bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15","dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","license":"MIT","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "weth_",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address",
            },
          ],
          type: "error",
          name: "SafeERC20FailedOperation",
        },
        {
          inputs: [],
          type: "error",
          name: "ZeroAddress",
        },
        {
          inputs: [],
          type: "error",
          name: "ZeroAmount",
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "NATIVE_ADDRESS",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "WETH",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ZERO_ADDRESS",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address",
            },
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "getBalance",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "isApprovedAddress",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transferERC20",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address",
            },
            {
              internalType: "address",
              name: "from",
              type: "address",
            },
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transferFromERC20",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "to",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transferNative",
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          constructor: {
            params: {
              weth_: "The address of the WETH token.",
            },
          },
          "getBalance(address,address)": {
            details:
              "If the token is the zero address, the balance of the native token will be returned.",
            params: {
              account: "The address to check the balance of.",
              token: "The address of the token to check the balance of.",
            },
            returns: {
              _0: "The balance of the specified token for the specified address.",
            },
          },
          "transferERC20(address,address,uint256)": {
            details:
              "If the amount is type(uint256).max, the balance of the token in the contract will be used.",
            params: {
              amount: "The amount of tokens to transfer.",
              to: "The address to transfer the tokens to.",
              token: "The address of the ERC20 token to transfer.",
            },
          },
          "transferFromERC20(address,address,address,uint256)": {
            details:
              "If the amount is type(uint256).max, the allowance of the token from the from address will be used.",
            params: {
              amount: "The amount of tokens to transfer.",
              from: "The address to transfer the tokens from.",
              to: "The address to transfer the tokens to.",
              token: "The address of the ERC20 token to transfer.",
            },
          },
          "transferNative(address,uint256)": {
            details:
              "If the amount is type(uint256).max, the balance of the native token in the contract will be used.",
            params: {
              amount: "The amount of native tokens to transfer.",
              to: "The address to transfer the native tokens to.",
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {
          constructor: {
            notice: "Constructor for the UtilityAdapter contract.",
          },
          "getBalance(address,address)": {
            notice:
              "Get the balance of a specified token for a specified address.",
          },
          "transferERC20(address,address,uint256)": {
            notice: "Transfer ERC20 tokens to a specified address.",
          },
          "transferFromERC20(address,address,address,uint256)": {
            notice:
              "Transfer ERC20 tokens from a specified address to a specified address.",
          },
          "transferNative(address,uint256)": {
            notice: "Transfer native tokens (ETH/AVAX) to a specified address.",
          },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "contracts/1delta/flash-account/adapters/UtilityAdapter.sol":
          "UtilityAdapter",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol": {
        keccak256:
          "0x15b0bd8882ceeee55ec10f378d467cedc3bb93fdd7365266358f775d815f91dd",
        urls: [
          "bzz-raw://d90e6c09d63d176ccdac0734c3bffb88df776f0e56897dc484143142f24c16bf",
          "dweb:/ipfs/QmVSCEPJva3ezJyRaCb7PbVmHTduJoDjw6UWc2p3MnbXo5",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/adapters/UtilityAdapter.sol": {
        keccak256:
          "0xae95b72ae752a63cf9225ac970155903125a35c2e981258165cf199c7cfd1bb6",
        urls: [
          "bzz-raw://f7831e8d6db3c51dc5cdef3e840c043cb5d3cb166f4d714363dc36f608dc9a93",
          "dweb:/ipfs/QmZo7moqzAUV2J1RctMdYJ7EnbNU9UDchbBqhZwtfHeqgM",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/FlashAccountError.sol": {
        keccak256:
          "0x766fe156ebe6cc9c128f746007bb2775b8bb2835d0ef0b4f046fbad8bb9879f8",
        urls: [
          "bzz-raw://42203fac4614cc433d9e1207be392e8b9b4e504270cf05263c5c695976260363",
          "dweb:/ipfs/QmUyNtb961G97JB5u4yLmaZdC8JNASMrbtvf8ypgf3FpgM",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
        keccak256:
          "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        urls: [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
        keccak256:
          "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        urls: [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
        keccak256:
          "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        urls: [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256:
          "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        urls: [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        keccak256:
          "0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e",
        urls: [
          "bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15",
          "dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256:
          "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        urls: [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL",
        ],
        license: "MIT",
      },
    },
    version: 1,
  },
  id: 4,
} as const as Abi;
export type { UtilityAdapterAbiType } from "./UtilityAdapter";
export { getUtilityAdapterContract } from "./UtilityAdapter";

export const FlashAccountAdapterBaseAbi = {
  abi: [
    {
      type: "function",
      name: "NATIVE_ADDRESS",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "WETH",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "ZERO_ADDRESS",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "isApprovedAddress",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "error",
      name: "ZeroAddress",
      inputs: [],
    },
  ],
  bytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {},
  },
  deployedBytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {},
  },
  methodIdentifiers: {
    "NATIVE_ADDRESS()": "d5bcb610",
    "WETH()": "ad5c4648",
    "ZERO_ADDRESS()": "538ba4f9",
    "isApprovedAddress(address,address)": "008fbb48",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[],"name":"ZeroAddress","type":"error"},{"inputs":[],"name":"NATIVE_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ZERO_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"isApprovedAddress","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Provides common functionality for flash account operations.","kind":"dev","methods":{"constructor":{"params":{"weth_":"The address of the WETH token."}}},"title":"FlashAccountAdapterBase","version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Constructor for the FlashAccountAdapterBase contract."}},"notice":"Abstract base contract for flash account adapters.","version":1}},"settings":{"compilationTarget":{"contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol":"FlashAccountAdapterBase"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol":{"keccak256":"0x15b0bd8882ceeee55ec10f378d467cedc3bb93fdd7365266358f775d815f91dd","license":"MIT","urls":["bzz-raw://d90e6c09d63d176ccdac0734c3bffb88df776f0e56897dc484143142f24c16bf","dweb:/ipfs/QmVSCEPJva3ezJyRaCb7PbVmHTduJoDjw6UWc2p3MnbXo5"]},"contracts/1delta/flash-account/common/FlashAccountError.sol":{"keccak256":"0x766fe156ebe6cc9c128f746007bb2775b8bb2835d0ef0b4f046fbad8bb9879f8","license":"MIT","urls":["bzz-raw://42203fac4614cc433d9e1207be392e8b9b4e504270cf05263c5c695976260363","dweb:/ipfs/QmUyNtb961G97JB5u4yLmaZdC8JNASMrbtvf8ypgf3FpgM"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"keccak256":"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7","license":"MIT","urls":["bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b","dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"keccak256":"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724","license":"MIT","urls":["bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a","dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"keccak256":"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c","license":"MIT","urls":["bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba","dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7","license":"MIT","urls":["bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db","dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"]},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e","license":"MIT","urls":["bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15","dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","license":"MIT","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [],
          type: "error",
          name: "ZeroAddress",
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "NATIVE_ADDRESS",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "WETH",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ZERO_ADDRESS",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "isApprovedAddress",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          constructor: {
            params: {
              weth_: "The address of the WETH token.",
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {
          constructor: {
            notice: "Constructor for the FlashAccountAdapterBase contract.",
          },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol":
          "FlashAccountAdapterBase",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol": {
        keccak256:
          "0x15b0bd8882ceeee55ec10f378d467cedc3bb93fdd7365266358f775d815f91dd",
        urls: [
          "bzz-raw://d90e6c09d63d176ccdac0734c3bffb88df776f0e56897dc484143142f24c16bf",
          "dweb:/ipfs/QmVSCEPJva3ezJyRaCb7PbVmHTduJoDjw6UWc2p3MnbXo5",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/FlashAccountError.sol": {
        keccak256:
          "0x766fe156ebe6cc9c128f746007bb2775b8bb2835d0ef0b4f046fbad8bb9879f8",
        urls: [
          "bzz-raw://42203fac4614cc433d9e1207be392e8b9b4e504270cf05263c5c695976260363",
          "dweb:/ipfs/QmUyNtb961G97JB5u4yLmaZdC8JNASMrbtvf8ypgf3FpgM",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
        keccak256:
          "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        urls: [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
        keccak256:
          "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        urls: [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
        keccak256:
          "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        urls: [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256:
          "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        urls: [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        keccak256:
          "0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e",
        urls: [
          "bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15",
          "dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256:
          "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        urls: [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL",
        ],
        license: "MIT",
      },
    },
    version: 1,
  },
  id: 3,
} as const as Abi;
export type { FlashAccountAdapterBaseAbiType } from "./FlashAccountAdapterBase";
export { getFlashAccountAdapterBaseContract } from "./FlashAccountAdapterBase";

export const FlashAccountBaseAbi = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "entryPoint_",
          type: "address",
          internalType: "contract IEntryPoint",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "receive",
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "addDeposit",
      inputs: [],
      outputs: [],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "eip712Domain",
      inputs: [],
      outputs: [
        {
          name: "fields",
          type: "bytes1",
          internalType: "bytes1",
        },
        {
          name: "name",
          type: "string",
          internalType: "string",
        },
        {
          name: "version",
          type: "string",
          internalType: "string",
        },
        {
          name: "chainId",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "verifyingContract",
          type: "address",
          internalType: "address",
        },
        {
          name: "salt",
          type: "bytes32",
          internalType: "bytes32",
        },
        {
          name: "extensions",
          type: "uint256[]",
          internalType: "uint256[]",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "entryPoint",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract IEntryPoint",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "execute",
      inputs: [
        {
          name: "dest",
          type: "address",
          internalType: "address",
        },
        {
          name: "value",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "func",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "executeBatch",
      inputs: [
        {
          name: "dest",
          type: "address[]",
          internalType: "address[]",
        },
        {
          name: "func",
          type: "bytes[]",
          internalType: "bytes[]",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "executeBatch",
      inputs: [
        {
          name: "dest",
          type: "address[]",
          internalType: "address[]",
        },
        {
          name: "value",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "func",
          type: "bytes[]",
          internalType: "bytes[]",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "getDeposit",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getMessageHash",
      inputs: [
        {
          name: "message",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getNonce",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "initialize",
      inputs: [
        {
          name: "owner_",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "isValidSignature",
      inputs: [
        {
          name: "hash",
          type: "bytes32",
          internalType: "bytes32",
        },
        {
          name: "signature",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "onERC1155BatchReceived",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "",
          type: "uint256[]",
          internalType: "uint256[]",
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "pure",
    },
    {
      type: "function",
      name: "onERC1155Received",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "pure",
    },
    {
      type: "function",
      name: "onERC721Received",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      stateMutability: "pure",
    },
    {
      type: "function",
      name: "owner",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "performCreate",
      inputs: [
        {
          name: "value",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "initCode",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [
        {
          name: "createdAddr",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "performCreate2",
      inputs: [
        {
          name: "value",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "initCode",
          type: "bytes",
          internalType: "bytes",
        },
        {
          name: "salt",
          type: "bytes32",
          internalType: "bytes32",
        },
      ],
      outputs: [
        {
          name: "createdAddr",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "supportsInterface",
      inputs: [
        {
          name: "interfaceId",
          type: "bytes4",
          internalType: "bytes4",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "transferOwnership",
      inputs: [
        {
          name: "newOwner",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "validateUserOp",
      inputs: [
        {
          name: "userOp",
          type: "tuple",
          internalType: "struct PackedUserOperation",
          components: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "initCode",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "accountGasLimits",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "preVerificationGas",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "gasFees",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "paymasterAndData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
        },
        {
          name: "userOpHash",
          type: "bytes32",
          internalType: "bytes32",
        },
        {
          name: "missingAccountFunds",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [
        {
          name: "validationData",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "withdrawDepositTo",
      inputs: [
        {
          name: "withdrawAddress",
          type: "address",
          internalType: "address payable",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "event",
      name: "Initialized",
      inputs: [
        {
          name: "version",
          type: "uint64",
          indexed: false,
          internalType: "uint64",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "LightAccountInitialized",
      inputs: [
        {
          name: "entryPoint",
          type: "address",
          indexed: true,
          internalType: "contract IEntryPoint",
        },
        {
          name: "owner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "OwnershipTransferred",
      inputs: [
        {
          name: "previousOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "newOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "error",
      name: "ArrayLengthMismatch",
      inputs: [],
    },
    {
      type: "error",
      name: "CreateFailed",
      inputs: [],
    },
    {
      type: "error",
      name: "ECDSAInvalidSignature",
      inputs: [],
    },
    {
      type: "error",
      name: "ECDSAInvalidSignatureLength",
      inputs: [
        {
          name: "length",
          type: "uint256",
          internalType: "uint256",
        },
      ],
    },
    {
      type: "error",
      name: "ECDSAInvalidSignatureS",
      inputs: [
        {
          name: "s",
          type: "bytes32",
          internalType: "bytes32",
        },
      ],
    },
    {
      type: "error",
      name: "InvalidInitialization",
      inputs: [],
    },
    {
      type: "error",
      name: "InvalidOwner",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "InvalidSignatureType",
      inputs: [],
    },
    {
      type: "error",
      name: "Locked",
      inputs: [],
    },
    {
      type: "error",
      name: "NotAuthorized",
      inputs: [
        {
          name: "caller",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "NotInitializing",
      inputs: [],
    },
    {
      type: "error",
      name: "ZeroAddressNotAllowed",
      inputs: [],
    },
  ],
  bytecode: {
    object:
      "0x610160604052348015610010575f5ffd5b506040516127a93803806127a983398101604081905261002f916101be565b306080524660a0527f5886a89854f64cffde2e739819f75451c42a85563516fe8eab2ef059d7e9f52660608061009c604080518082018252600c81526b119b185cda1058d8dbdd5b9d60a21b602080830191909152825180840190935260018352603160f81b9083015291565b815160209283012081519183019190912060c082905260e0819052604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152938401929092529082015246606082015230608082015260a09020610100525050610140526001600160a01b0381166101205261011961011f565b506101eb565b5f61012a6101405190565b805490915068010000000000000000900460ff161561015c5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146101bb5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b5f602082840312156101ce575f5ffd5b81516001600160a01b03811681146101e4575f5ffd5b9392505050565b60805160a05160c05160e05161010051610120516101405161253c61026d5f395f610da101525f81816103b40152818161099401528181610b0501528181610d3001528181610f68015281816112bd0152818161137101526116ca01525f61103901525f6110f301525f6110cd01525f61107d01525f61105a015261253c5ff3fe608060405260043610610165575f3560e01c80634d44560d116100c6578063bc197c811161007c578063d087d28811610057578063d087d28814610471578063f23a6e6114610485578063f2fde38b146104ca575f5ffd5b8063bc197c81146103f7578063c399ec881461043e578063c4d66de814610452575f5ffd5b80638da5cb5b116100ac5780638da5cb5b1461035d578063b0d691fe146103a6578063b61d27f6146103d8575f5ffd5b80634d44560d1461031757806384b0196e14610336575f5ffd5b806319822f7c1161011b5780634847be6f116101015780634847be6f146102c45780634a58db19146102fc5780634c8c9ea114610304575f5ffd5b806319822f7c1461028657806347e1da2a146102a5575f5ffd5b8063150b7a021161014b578063150b7a02146101d15780631626ba7e1461024657806318dfb3c714610265575f5ffd5b806301ffc9a7146101705780630a1028c4146101a4575f5ffd5b3661016c57005b5f5ffd5b34801561017b575f5ffd5b5061018f61018a366004611d0b565b6104e9565b60405190151581526020015b60405180910390f35b3480156101af575f5ffd5b506101c36101be366004611d77565b6105cd565b60405190815260200161019b565b3480156101dc575f5ffd5b506102156101eb366004611e91565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b348015610251575f5ffd5b50610215610260366004611eff565b61063a565b348015610270575f5ffd5b5061028461027f366004611f88565b6106c4565b005b348015610291575f5ffd5b506101c36102a0366004611ff4565b6107f0565b3480156102b0575f5ffd5b506102846102bf366004612043565b61080e565b6102d76102d23660046120e2565b610916565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161019b565b610284610992565b6102d7610312366004611eff565b610a34565b348015610322575f5ffd5b50610284610331366004612131565b610aae565b348015610341575f5ffd5b5061034a610bad565b60405161019b9796959493929190612189565b348015610368575f5ffd5b507ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff166102d7565b3480156103b1575f5ffd5b507f00000000000000000000000000000000000000000000000000000000000000006102d7565b3480156103e3575f5ffd5b506102846103f2366004612248565b610c55565b348015610402575f5ffd5b50610215610411366004612294565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b348015610449575f5ffd5b506101c3610ceb565b34801561045d575f5ffd5b5061028461046c366004612357565b610d9f565b34801561047c575f5ffd5b506101c3610f1c565b348015610490575f5ffd5b5061021561049f366004612372565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b3480156104d5575f5ffd5b506102846104e4366004612357565b610f97565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000148061057b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b806105c757507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b5f5f7f5e3baca2936049843f06038876a12f03627b5edc98025751ecf2ac75626401998380519060200120604051602001610612929190918252602082015260400190565b60405160208183030381529060405280519060200120905061063381611037565b9392505050565b5f61066f6106688560405160200161065491815260200190565b6040516020818303038152906040526105cd565b848461114d565b1561069b57507f1626ba7e00000000000000000000000000000000000000000000000000000000610633565b507fffffffff000000000000000000000000000000000000000000000000000000009392505050565b6106cc6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55828114610729576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825f5b818110156107c4576107bc868683818110610749576107496123d7565b905060200201602081019061075e9190612357565b5f868685818110610771576107716123d7565b90506020028101906107839190612404565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061133792505050565b60010161072c565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b5f6107f9611359565b61080384846113f8565b9050610633826115a9565b6108166112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5584811415806108495750848314155b15610880576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845f5b818110156108e8576108e08888838181106108a0576108a06123d7565b90506020020160208101906108b59190612357565b8787848181106108c7576108c76123d7565b90506020020135868685818110610771576107716123d7565b600101610883565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55505050505050565b5f61091f6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55604051838086833783818389f5925050508061096657637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063b760faf99034906024015f604051808303818588803b158015610a1b575f5ffd5b505af1158015610a2d573d5f5f3e3d5ffd5b5050505050565b5f610a3d6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d556040518280858337808287f09250505080610a8357637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d559392505050565b610ab66112a5565b73ffffffffffffffffffffffffffffffffffffffff8216610b03576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c2878906044015f604051808303815f87803b158015610b93575f5ffd5b505af1158015610ba5573d5f5f3e3d5ffd5b505050505050565b7f0f000000000000000000000000000000000000000000000000000000000000006060805f808083610c43604080518082018252600c81527f466c6173684163636f756e7400000000000000000000000000000000000000006020808301919091528251808401909352600183527f31000000000000000000000000000000000000000000000000000000000000009083015291565b97989097965046955030945091925090565b610c5d6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55610cc1848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061133792505050565b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610d76573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d9a9190612465565b905090565b7f0000000000000000000000000000000000000000000000000000000000000000805468010000000000000000810460ff16159067ffffffffffffffff165f81158015610de95750825b90505f8267ffffffffffffffff166001148015610e055750303b155b905081158015610e13575080155b15610e4a576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610eab5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b610eb486611611565b8315610ba55784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201525f602482018190529073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610d5b565b610f9f6112a5565b73ffffffffffffffffffffffffffffffffffffffff81161580610fd7575073ffffffffffffffffffffffffffffffffffffffff811630145b1561102b576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b61103481611755565b50565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030147f000000000000000000000000000000000000000000000000000000000000000046141661112a5750604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000009181019190915246606082015230608082015260a090205b6719010000000000005f5280601a5281603a52604260182090505f603a52919050565b5f6001821015611189576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83835f81811061119c5761119c6123d7565b919091013560f81c91508190506111ff576111f7856111be85600181896124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061185692505050565b915050610633565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611273576111f78561123a85600181896124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506118c492505050565b6040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906112eb5750333014155b80156112fc57506112fa61190d565b155b15611335576040517f4a0bfec1000000000000000000000000000000000000000000000000000000008152336004820152602401611022565b565b5f5f82516020840185875af180611353576040513d5f823e3d81fd5b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152606401611022565b5f6001611409610100850185612404565b90501015611443576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611452610100850185612404565b5f818110611462576114626123d7565b919091013560f81c9150819050611513577f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f908152601c849052603c8120906114b0610100870187612404565b6114be9160019082906124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509293506115099250611504915084905083611856565b61197f565b93505050506105c7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611273575f61154c610100860186612404565b61155a9160019082906124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509293506115a092506115049150869050836118c4565b95945050505050565b8015611034576040515f9033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d805f8114610a2d576040519150601f19603f3d011682016040523d82523d5f602084013e610a2d565b73ffffffffffffffffffffffffffffffffffffffff8116611660576040517fb20f76e30000000000000000000000000000000000000000000000000000000081525f6004820152602401611022565b807ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c0980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604051828216917f000000000000000000000000000000000000000000000000000000000000000016907fec6a23b49d2c363d250c9dda15610e835d428207d15ddb36a6c230e37371ddf1905f90a360405173ffffffffffffffffffffffffffffffffffffffff8216905f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c09805473ffffffffffffffffffffffffffffffffffffffff9081169083168190036117e4576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401611022565b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f806118628484611993565b90506118a27ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff9182169116149392505050565b5f6106336119067ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b84846119bb565b5f61194c7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b5f8161198c5760016105c7565b5f92915050565b5f5f5f5f6119a18686611ae6565b9250925092506119b18282611b2f565b5090949350505050565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1685856040516024016119e89291906124d0565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1626ba7e0000000000000000000000000000000000000000000000000000000017905251611a4b91906124f0565b5f60405180830381855afa9150503d805f8114611a83576040519150601f19603f3d011682016040523d82523d5f602084013e611a88565b606091505b5091509150818015611a9c57506020815110155b8015611adc575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611ada9083016020908101908401612465565b145b9695505050505050565b5f5f5f8351604103611b1d576020840151604085015160608601515f1a611b0f88828585611c36565b955095509550505050611b28565b505081515f91506002905b9250925092565b5f826003811115611b4257611b4261247c565b03611b4b575050565b6001826003811115611b5f57611b5f61247c565b03611b96576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115611baa57611baa61247c565b03611be4576040517ffce698f700000000000000000000000000000000000000000000000000000000815260048101829052602401611022565b6003826003811115611bf857611bf861247c565b03611c32576040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260048101829052602401611022565b5050565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611c6f57505f91506003905082611d01565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611cc0573d5f5f3e3d5ffd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff8116611cf857505f925060019150829050611d01565b92505f91508190505b9450945094915050565b5f60208284031215611d1b575f5ffd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610633575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f60208284031215611d87575f5ffd5b813567ffffffffffffffff811115611d9d575f5ffd5b8201601f81018413611dad575f5ffd5b803567ffffffffffffffff811115611dc757611dc7611d4a565b604051601f19603f601f19601f8501160116810181811067ffffffffffffffff82111715611df757611df7611d4a565b604052818152828201602001861015611e0e575f5ffd5b816020840160208301375f91810160200191909152949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611034575f5ffd5b5f5f83601f840112611e5c575f5ffd5b50813567ffffffffffffffff811115611e73575f5ffd5b602083019150836020828501011115611e8a575f5ffd5b9250929050565b5f5f5f5f5f60808688031215611ea5575f5ffd5b8535611eb081611e2b565b94506020860135611ec081611e2b565b935060408601359250606086013567ffffffffffffffff811115611ee2575f5ffd5b611eee88828901611e4c565b969995985093965092949392505050565b5f5f5f60408486031215611f11575f5ffd5b83359250602084013567ffffffffffffffff811115611f2e575f5ffd5b611f3a86828701611e4c565b9497909650939450505050565b5f5f83601f840112611f57575f5ffd5b50813567ffffffffffffffff811115611f6e575f5ffd5b6020830191508360208260051b8501011115611e8a575f5ffd5b5f5f5f5f60408587031215611f9b575f5ffd5b843567ffffffffffffffff811115611fb1575f5ffd5b611fbd87828801611f47565b909550935050602085013567ffffffffffffffff811115611fdc575f5ffd5b611fe887828801611f47565b95989497509550505050565b5f5f5f60608486031215612006575f5ffd5b833567ffffffffffffffff81111561201c575f5ffd5b8401610120818703121561202e575f5ffd5b95602085013595506040909401359392505050565b5f5f5f5f5f5f60608789031215612058575f5ffd5b863567ffffffffffffffff81111561206e575f5ffd5b61207a89828a01611f47565b909750955050602087013567ffffffffffffffff811115612099575f5ffd5b6120a589828a01611f47565b909550935050604087013567ffffffffffffffff8111156120c4575f5ffd5b6120d089828a01611f47565b979a9699509497509295939492505050565b5f5f5f5f606085870312156120f5575f5ffd5b84359350602085013567ffffffffffffffff811115612112575f5ffd5b61211e87828801611e4c565b9598909750949560400135949350505050565b5f5f60408385031215612142575f5ffd5b823561214d81611e2b565b946020939093013593505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f6121c360e083018961215b565b82810360408401526121d5818961215b565b6060840188905273ffffffffffffffffffffffffffffffffffffffff8716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015612237578351835260209384019390920191600101612219565b50909b9a5050505050505050505050565b5f5f5f5f6060858703121561225b575f5ffd5b843561226681611e2b565b935060208501359250604085013567ffffffffffffffff811115612288575f5ffd5b611fe887828801611e4c565b5f5f5f5f5f5f5f5f60a0898b0312156122ab575f5ffd5b88356122b681611e2b565b975060208901356122c681611e2b565b9650604089013567ffffffffffffffff8111156122e1575f5ffd5b6122ed8b828c01611f47565b909750955050606089013567ffffffffffffffff81111561230c575f5ffd5b6123188b828c01611f47565b909550935050608089013567ffffffffffffffff811115612337575f5ffd5b6123438b828c01611e4c565b999c989b5096995094979396929594505050565b5f60208284031215612367575f5ffd5b813561063381611e2b565b5f5f5f5f5f5f60a08789031215612387575f5ffd5b863561239281611e2b565b955060208701356123a281611e2b565b94506040870135935060608701359250608087013567ffffffffffffffff8111156123cb575f5ffd5b6120d089828a01611e4c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612437575f5ffd5b83018035915067ffffffffffffffff821115612451575f5ffd5b602001915036819003821315611e8a575f5ffd5b5f60208284031215612475575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f5f858511156124b7575f5ffd5b838611156124c3575f5ffd5b5050820193919092039150565b828152604060208201525f6124e8604083018461215b565b949350505050565b5f82518060208501845e5f92019182525091905056fea2646970667358221220bfa34607ae2d21f3ddbc7e693e762987f39f5972eeb055f91e952c989647117e64736f6c634300081c0033",
    sourceMap:
      "1209:7704:1:-:0;;;2562:169;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:4:12;2119:45;;2191:13;2174:30;;1725:66:1;2215:18:12;;2331:23;8405:21:1;;;;;;;;;;;-1:-1:-1;;;8405:21:1;;;;;;;;8534:13;;;;;;;;;;;-1:-1:-1;;;8534:13:1;;;;8405:21;8235:319;2331:23:12;2431:22;;;;;;;2545:25;;;;;;;;;2580:26;;;;2616:32;;;;2828:4;2822:11;;2893:16;2883:27;;2934:12;;;2927:30;;;;2981:12;;;2974:33;3045:9;3038:4;3031:12;;3024:31;3093:9;3086:4;3079:12;;3072:31;3146:4;3133:18;;3184:34;;-1:-1:-1;;3215:34:11;;-1:-1:-1;;;;;2666:26:1;::::1;;::::0;2702:22:::1;:20;:22::i;:::-;2562:169:::0;1209:7704;;7249:401:11;7308:47;7358:26;8234:16;;;8098:242;7358:26;7399:21;;;;-1:-1:-1;7399:21:11;;;;;7395:82;;;7443:23;;-1:-1:-1;;;7443:23:11;;;;;;;;;;;7395:82;7490:20;;-1:-1:-1;;;;;7490:20:11;;;:40;7486:158;;7546:39;;-1:-1:-1;;;;;;7546:39:11;-1:-1:-1;;;;;7546:39:11;;;;;7604:29;;474:50:231;;;7604:29:11;;462:2:231;447:18;7604:29:11;;;;;;;7486:158;7298:352;7249:401::o;14:311:231:-;105:6;158:2;146:9;137:7;133:23;129:32;126:52;;;174:1;171;164:12;126:52;200:16;;-1:-1:-1;;;;;245:31:231;;235:42;;225:70;;291:1;288;281:12;225:70;314:5;14:311;-1:-1:-1;;;14:311:231:o;330:200::-;1209:7704:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      "0x608060405260043610610165575f3560e01c80634d44560d116100c6578063bc197c811161007c578063d087d28811610057578063d087d28814610471578063f23a6e6114610485578063f2fde38b146104ca575f5ffd5b8063bc197c81146103f7578063c399ec881461043e578063c4d66de814610452575f5ffd5b80638da5cb5b116100ac5780638da5cb5b1461035d578063b0d691fe146103a6578063b61d27f6146103d8575f5ffd5b80634d44560d1461031757806384b0196e14610336575f5ffd5b806319822f7c1161011b5780634847be6f116101015780634847be6f146102c45780634a58db19146102fc5780634c8c9ea114610304575f5ffd5b806319822f7c1461028657806347e1da2a146102a5575f5ffd5b8063150b7a021161014b578063150b7a02146101d15780631626ba7e1461024657806318dfb3c714610265575f5ffd5b806301ffc9a7146101705780630a1028c4146101a4575f5ffd5b3661016c57005b5f5ffd5b34801561017b575f5ffd5b5061018f61018a366004611d0b565b6104e9565b60405190151581526020015b60405180910390f35b3480156101af575f5ffd5b506101c36101be366004611d77565b6105cd565b60405190815260200161019b565b3480156101dc575f5ffd5b506102156101eb366004611e91565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161019b565b348015610251575f5ffd5b50610215610260366004611eff565b61063a565b348015610270575f5ffd5b5061028461027f366004611f88565b6106c4565b005b348015610291575f5ffd5b506101c36102a0366004611ff4565b6107f0565b3480156102b0575f5ffd5b506102846102bf366004612043565b61080e565b6102d76102d23660046120e2565b610916565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161019b565b610284610992565b6102d7610312366004611eff565b610a34565b348015610322575f5ffd5b50610284610331366004612131565b610aae565b348015610341575f5ffd5b5061034a610bad565b60405161019b9796959493929190612189565b348015610368575f5ffd5b507ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff166102d7565b3480156103b1575f5ffd5b507f00000000000000000000000000000000000000000000000000000000000000006102d7565b3480156103e3575f5ffd5b506102846103f2366004612248565b610c55565b348015610402575f5ffd5b50610215610411366004612294565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b348015610449575f5ffd5b506101c3610ceb565b34801561045d575f5ffd5b5061028461046c366004612357565b610d9f565b34801561047c575f5ffd5b506101c3610f1c565b348015610490575f5ffd5b5061021561049f366004612372565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b3480156104d5575f5ffd5b506102846104e4366004612357565b610f97565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a0200000000000000000000000000000000000000000000000000000000148061057b57507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b806105c757507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b5f5f7f5e3baca2936049843f06038876a12f03627b5edc98025751ecf2ac75626401998380519060200120604051602001610612929190918252602082015260400190565b60405160208183030381529060405280519060200120905061063381611037565b9392505050565b5f61066f6106688560405160200161065491815260200190565b6040516020818303038152906040526105cd565b848461114d565b1561069b57507f1626ba7e00000000000000000000000000000000000000000000000000000000610633565b507fffffffff000000000000000000000000000000000000000000000000000000009392505050565b6106cc6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55828114610729576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825f5b818110156107c4576107bc868683818110610749576107496123d7565b905060200201602081019061075e9190612357565b5f868685818110610771576107716123d7565b90506020028101906107839190612404565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061133792505050565b60010161072c565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b5f6107f9611359565b61080384846113f8565b9050610633826115a9565b6108166112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5584811415806108495750848314155b15610880576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845f5b818110156108e8576108e08888838181106108a0576108a06123d7565b90506020020160208101906108b59190612357565b8787848181106108c7576108c76123d7565b90506020020135868685818110610771576107716123d7565b600101610883565b505060017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55505050505050565b5f61091f6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55604051838086833783818389f5925050508061096657637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063b760faf99034906024015f604051808303818588803b158015610a1b575f5ffd5b505af1158015610a2d573d5f5f3e3d5ffd5b5050505050565b5f610a3d6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d556040518280858337808287f09250505080610a8357637e16b8cd5f526004601cfd5b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d559392505050565b610ab66112a5565b73ffffffffffffffffffffffffffffffffffffffff8216610b03576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c2878906044015f604051808303815f87803b158015610b93575f5ffd5b505af1158015610ba5573d5f5f3e3d5ffd5b505050505050565b7f0f000000000000000000000000000000000000000000000000000000000000006060805f808083610c43604080518082018252600c81527f466c6173684163636f756e7400000000000000000000000000000000000000006020808301919091528251808401909352600183527f31000000000000000000000000000000000000000000000000000000000000009083015291565b97989097965046955030945091925090565b610c5d6112a5565b60027f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d55610cc1848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061133792505050565b60017f3c25485dd7fcb5b79c6e101a51e4ac1d265adde8f4b2805851861db54821825d5550505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa158015610d76573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d9a9190612465565b905090565b7f0000000000000000000000000000000000000000000000000000000000000000805468010000000000000000810460ff16159067ffffffffffffffff165f81158015610de95750825b90505f8267ffffffffffffffff166001148015610e055750303b155b905081158015610e13575080155b15610e4a576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001660011785558315610eab5784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff16680100000000000000001785555b610eb486611611565b8315610ba55784547fffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffff168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a1505050505050565b6040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201525f602482018190529073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906335567e1a90604401610d5b565b610f9f6112a5565b73ffffffffffffffffffffffffffffffffffffffff81161580610fd7575073ffffffffffffffffffffffffffffffffffffffff811630145b1561102b576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b61103481611755565b50565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000030147f000000000000000000000000000000000000000000000000000000000000000046141661112a5750604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f00000000000000000000000000000000000000000000000000000000000000009181019190915246606082015230608082015260a090205b6719010000000000005f5280601a5281603a52604260182090505f603a52919050565b5f6001821015611189576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83835f81811061119c5761119c6123d7565b919091013560f81c91508190506111ff576111f7856111be85600181896124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061185692505050565b915050610633565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611273576111f78561123a85600181896124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506118c492505050565b6040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906112eb5750333014155b80156112fc57506112fa61190d565b155b15611335576040517f4a0bfec1000000000000000000000000000000000000000000000000000000008152336004820152602401611022565b565b5f5f82516020840185875af180611353576040513d5f823e3d81fd5b50505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614611335576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e74000000006044820152606401611022565b5f6001611409610100850185612404565b90501015611443576040517f60cd402d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f611452610100850185612404565b5f818110611462576114626123d7565b919091013560f81c9150819050611513577f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f908152601c849052603c8120906114b0610100870187612404565b6114be9160019082906124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509293506115099250611504915084905083611856565b61197f565b93505050506105c7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60ff821601611273575f61154c610100860186612404565b61155a9160019082906124a9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509293506115a092506115049150869050836118c4565b95945050505050565b8015611034576040515f9033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d805f8114610a2d576040519150601f19603f3d011682016040523d82523d5f602084013e610a2d565b73ffffffffffffffffffffffffffffffffffffffff8116611660576040517fb20f76e30000000000000000000000000000000000000000000000000000000081525f6004820152602401611022565b807ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c0980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff928316179055604051828216917f000000000000000000000000000000000000000000000000000000000000000016907fec6a23b49d2c363d250c9dda15610e835d428207d15ddb36a6c230e37371ddf1905f90a360405173ffffffffffffffffffffffffffffffffffffffff8216905f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350565b7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c09805473ffffffffffffffffffffffffffffffffffffffff9081169083168190036117e4576040517fb20f76e300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401611022565b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182178455604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f806118628484611993565b90506118a27ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff9182169116149392505050565b5f6106336119067ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b84846119bb565b5f61194c7ffe43cac86d2632475e173babfc884cd7f9ce21169af8b16db096c27563e34c095473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b5f8161198c5760016105c7565b5f92915050565b5f5f5f5f6119a18686611ae6565b9250925092506119b18282611b2f565b5090949350505050565b5f5f5f8573ffffffffffffffffffffffffffffffffffffffff1685856040516024016119e89291906124d0565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1626ba7e0000000000000000000000000000000000000000000000000000000017905251611a4b91906124f0565b5f60405180830381855afa9150503d805f8114611a83576040519150601f19603f3d011682016040523d82523d5f602084013e611a88565b606091505b5091509150818015611a9c57506020815110155b8015611adc575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090611ada9083016020908101908401612465565b145b9695505050505050565b5f5f5f8351604103611b1d576020840151604085015160608601515f1a611b0f88828585611c36565b955095509550505050611b28565b505081515f91506002905b9250925092565b5f826003811115611b4257611b4261247c565b03611b4b575050565b6001826003811115611b5f57611b5f61247c565b03611b96576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002826003811115611baa57611baa61247c565b03611be4576040517ffce698f700000000000000000000000000000000000000000000000000000000815260048101829052602401611022565b6003826003811115611bf857611bf861247c565b03611c32576040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260048101829052602401611022565b5050565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611c6f57505f91506003905082611d01565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611cc0573d5f5f3e3d5ffd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff8116611cf857505f925060019150829050611d01565b92505f91508190505b9450945094915050565b5f60208284031215611d1b575f5ffd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610633575f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f60208284031215611d87575f5ffd5b813567ffffffffffffffff811115611d9d575f5ffd5b8201601f81018413611dad575f5ffd5b803567ffffffffffffffff811115611dc757611dc7611d4a565b604051601f19603f601f19601f8501160116810181811067ffffffffffffffff82111715611df757611df7611d4a565b604052818152828201602001861015611e0e575f5ffd5b816020840160208301375f91810160200191909152949350505050565b73ffffffffffffffffffffffffffffffffffffffff81168114611034575f5ffd5b5f5f83601f840112611e5c575f5ffd5b50813567ffffffffffffffff811115611e73575f5ffd5b602083019150836020828501011115611e8a575f5ffd5b9250929050565b5f5f5f5f5f60808688031215611ea5575f5ffd5b8535611eb081611e2b565b94506020860135611ec081611e2b565b935060408601359250606086013567ffffffffffffffff811115611ee2575f5ffd5b611eee88828901611e4c565b969995985093965092949392505050565b5f5f5f60408486031215611f11575f5ffd5b83359250602084013567ffffffffffffffff811115611f2e575f5ffd5b611f3a86828701611e4c565b9497909650939450505050565b5f5f83601f840112611f57575f5ffd5b50813567ffffffffffffffff811115611f6e575f5ffd5b6020830191508360208260051b8501011115611e8a575f5ffd5b5f5f5f5f60408587031215611f9b575f5ffd5b843567ffffffffffffffff811115611fb1575f5ffd5b611fbd87828801611f47565b909550935050602085013567ffffffffffffffff811115611fdc575f5ffd5b611fe887828801611f47565b95989497509550505050565b5f5f5f60608486031215612006575f5ffd5b833567ffffffffffffffff81111561201c575f5ffd5b8401610120818703121561202e575f5ffd5b95602085013595506040909401359392505050565b5f5f5f5f5f5f60608789031215612058575f5ffd5b863567ffffffffffffffff81111561206e575f5ffd5b61207a89828a01611f47565b909750955050602087013567ffffffffffffffff811115612099575f5ffd5b6120a589828a01611f47565b909550935050604087013567ffffffffffffffff8111156120c4575f5ffd5b6120d089828a01611f47565b979a9699509497509295939492505050565b5f5f5f5f606085870312156120f5575f5ffd5b84359350602085013567ffffffffffffffff811115612112575f5ffd5b61211e87828801611e4c565b9598909750949560400135949350505050565b5f5f60408385031215612142575f5ffd5b823561214d81611e2b565b946020939093013593505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b7fff000000000000000000000000000000000000000000000000000000000000008816815260e060208201525f6121c360e083018961215b565b82810360408401526121d5818961215b565b6060840188905273ffffffffffffffffffffffffffffffffffffffff8716608085015260a0840186905283810360c0850152845180825260208087019350909101905f5b81811015612237578351835260209384019390920191600101612219565b50909b9a5050505050505050505050565b5f5f5f5f6060858703121561225b575f5ffd5b843561226681611e2b565b935060208501359250604085013567ffffffffffffffff811115612288575f5ffd5b611fe887828801611e4c565b5f5f5f5f5f5f5f5f60a0898b0312156122ab575f5ffd5b88356122b681611e2b565b975060208901356122c681611e2b565b9650604089013567ffffffffffffffff8111156122e1575f5ffd5b6122ed8b828c01611f47565b909750955050606089013567ffffffffffffffff81111561230c575f5ffd5b6123188b828c01611f47565b909550935050608089013567ffffffffffffffff811115612337575f5ffd5b6123438b828c01611e4c565b999c989b5096995094979396929594505050565b5f60208284031215612367575f5ffd5b813561063381611e2b565b5f5f5f5f5f5f60a08789031215612387575f5ffd5b863561239281611e2b565b955060208701356123a281611e2b565b94506040870135935060608701359250608087013567ffffffffffffffff8111156123cb575f5ffd5b6120d089828a01611e4c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5f83357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612437575f5ffd5b83018035915067ffffffffffffffff821115612451575f5ffd5b602001915036819003821315611e8a575f5ffd5b5f60208284031215612475575f5ffd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f5f858511156124b7575f5ffd5b838611156124c3575f5ffd5b5050820193919092039150565b828152604060208201525f6124e8604083018461215b565b949350505050565b5f82518060208501845e5f92019182525091905056fea2646970667358221220bfa34607ae2d21f3ddbc7e693e762987f39f5972eeb055f91e952c989647117e64736f6c634300081c0033",
    sourceMap:
      "1209:7704:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1231:298:180;;;;;;;;;;-1:-1:-1;1231:298:180;;;;;:::i;:::-;;:::i;:::-;;;516:14:231;;509:22;491:41;;479:2;464:18;1231:298:180;;;;;;;;630:217:13;;;;;;;;;;-1:-1:-1;630:217:13;;;;;:::i;:::-;;:::i;:::-;;;1945:25:231;;;1933:2;1918:18;630:217:13;1799:177:231;505:212:180;;;;;;;;;;-1:-1:-1;505:212:180;;;;;:::i;:::-;669:41;505:212;;;;;;;;;;;3477:66:231;3465:79;;;3447:98;;3435:2;3420:18;505:212:180;3303:248:231;1257:286:13;;;;;;;;;;-1:-1:-1;1257:286:13;;;;;:::i;:::-;;:::i;2088:389:9:-;;;;;;;;;;-1:-1:-1;2088:389:9;;;;;:::i;:::-;;:::i;:::-;;1139:385:165;;;;;;;;;;-1:-1:-1;1139:385:165;;;;;:::i;:::-;;:::i;2894:453:9:-;;;;;;;;;;-1:-1:-1;2894:453:9;;;;;:::i;:::-;;:::i;5172:580::-;;;;;;:::i;:::-;;:::i;:::-;;;8000:42:231;7988:55;;;7970:74;;7958:2;7943:18;5172:580:9;7824:226:231;5830:111:9;;;:::i;3907:558::-;;;;;;:::i;:::-;;:::i;6098:264::-;;;;;;;;;;-1:-1:-1;6098:264:9;;;;;:::i;:::-;;:::i;6989:596:12:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;3916:90:1:-;;;;;;;;;;-1:-1:-1;1530:66:1;3980:19;;;3916:90;;6632:109:9;;;;;;;;;;-1:-1:-1;6722:12:9;6632:109;;1593:155;;;;;;;;;;-1:-1:-1;1593:155:9;;;;;:::i;:::-;;:::i;961:264:180:-;;;;;;;;;;-1:-1:-1;961:264:180;;;;;:::i;:::-;1170:48;961:264;;;;;;;;;;;6479:115:9;;;;;;;;;;;;;:::i;3224:101:1:-;;;;;;;;;;-1:-1:-1;3224:101:1;;;;;:::i;:::-;;:::i;771:121:165:-;;;;;;;;;;;;;:::i;723:232:180:-;;;;;;;;;;-1:-1:-1;723:232:180;;;;;:::i;:::-;905:43;723:232;;;;;;;;;3575:242:1;;;;;;;;;;-1:-1:-1;3575:242:1;;;;;:::i;:::-;;:::i;1231:298:180:-;1318:4;1353:48;;;1368:33;1353:48;;:113;;-1:-1:-1;1417:49:180;;;1432:34;1417:49;1353:113;:169;;;-1:-1:-1;1482:40:180;;;1497:25;1482:40;1353:169;1334:188;1231:298;-1:-1:-1;;1231:298:180:o;630:217:13:-;697:7;716:18;388:47;787:7;777:18;;;;;;747:49;;;;;;;;14268:25:231;;;14324:2;14309:18;;14302:34;14256:2;14241:18;;14094:248;747:49:13;;;;;;;;;;;;;737:60;;;;;;716:81;;814:26;829:10;814:14;:26::i;:::-;807:33;630:217;-1:-1:-1;;;630:217:13:o;1257:286::-;1352:6;1374:62;1392:32;1418:4;1407:16;;;;;;1945:25:231;;1933:2;1918:18;;1799:177;1407:16:13;;;;;;;;;;;;;1392:14;:32::i;:::-;1426:9;;1374:17;:62::i;:::-;1370:125;;;-1:-1:-1;1459:25:13;1452:32;;1370:125;-1:-1:-1;1511:25:13;1257:286;;;;;:::o;2088:389:9:-;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29:::0;2255:26:9;;::::2;2251:85;;2304:21;;;;;;;;;;;;;;2251:85;2362:4:::0;2345:14:::2;2383:88;2407:6;2403:1;:10;2383:88;;;2434:26;2440:4;;2445:1;2440:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;2449:1;2452:4;;2457:1;2452:7;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;2434:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;;-1:-1:-1;2434:5:9::2;::::0;-1:-1:-1;;;2434:26:9:i:2;:::-;2415:3;;2383:88;;;;2241:236;953:1:14::1;933:18;926:29;2088:389:9::0;;;;:::o;1139:385:165:-;1314:22;1348:24;:22;:24::i;:::-;1399:38;1418:6;1426:10;1399:18;:38::i;:::-;1382:55;;1485:32;1497:19;1485:11;:32::i;2894:453:9:-;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29:::0;3087:26:9;;::::2;;::::0;:57:::2;;-1:-1:-1::0;3117:27:9;;::::2;;3087:57;3083:116;;;3167:21;;;;;;;;;;;;;;3083:116;3225:4:::0;3208:14:::2;3246:95;3270:6;3266:1;:10;3246:95;;;3297:33;3303:4;;3308:1;3303:7;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3312:5;;3318:1;3312:8;;;;;;;:::i;:::-;;;;;;;3322:4;;3327:1;3322:7;;;;;;;:::i;3297:33::-;3278:3;;3246:95;;;;3073:274;953:1:14::1;933:18;926:29;2894:453:9::0;;;;;;:::o;5172:580::-;5362:19;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29;5453:4:9::2;5447:11;5482:15;5545:3;5528:15;5523:3;5510:39;5603:4;5598:3;5593;5586:5;5578:30;5563:45;;;;5632:11;5622:114;;5676:10;5670:4;5663:24;5717:4;5711;5704:18;5622:114;953:1:14::1;933:18;926:29;5172:580:9::0;;;;;;:::o;5830:111::-;6722:12;5879:55;;;;;5928:4;5879:55;;;7970:74:231;5879:22:9;;;;;;;;5909:9;;7943:18:231;;5879:55:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5830:111::o;3907:558::-;4082:19;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29;4173:4:9::2;4167:11;4202:15;4265:3;4248:15;4243:3;4230:39;4317:3;4312;4305:5;4298:23;4283:38;;;;4345:11;4335:114;;4389:10;4383:4;4376:24;4430:4;4424;4417:18;4335:114;953:1:14::1;933:18;926:29;3907:558:9::0;;;;;:::o;6098:264::-;1142:17;:15;:17::i;:::-;6212:29:::1;::::0;::::1;6208:90;;6264:23;;;;;;;;;;;;;;6208:90;6722:12:::0;6307:48:::1;::::0;;;;:23:::1;15329:55:231::0;;;6307:48:9::1;::::0;::::1;15311:74:231::0;15401:18;;;15394:34;;;6307:23:9;;;::::1;::::0;::::1;::::0;15284:18:231;;6307:48:9::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6098:264:::0;;:::o;6989:596:12:-;7327:16;7114:18;;7087:13;;;7114:18;7385:23;8405:21:1;;;;;;;;;;;;;;;;;;;;8534:13;;;;;;;;;;;;;;;;8405:21;8235:319;7385:23:12;6989:596;;7367:41;;;-1:-1:-1;7428:13:12;;-1:-1:-1;7479:4:12;;-1:-1:-1;6989:596:12;;-1:-1:-1;6989:596:12;:::o;1593:155:9:-;1142:17;:15;:17::i;:::-;871:1:14::1;851:18;844:29;1717:24:9::2;1723:4;1729:5;1736:4;;1717:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;;-1:-1:-1;1717:5:9::2;::::0;-1:-1:-1;;;1717:24:9:i:2;:::-;953:1:14::1;933:18;926:29;1593:155:9::0;;;;:::o;6479:115::-;6550:37;;;;;6581:4;6550:37;;;7970:74:231;6524:7:9;;6550:22;6722:12;6550:22;;;;7943:18:231;;6550:37:9;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6543:44;;6479:115;:::o;3224:101:1:-;8234:16:11;3851:21;;;;;;;3850:22;;3903:20;;3690:47;4287:16;;:34;;;;;4307:14;4287:34;4267:54;;4331:17;4351:11;:16;;4366:1;4351:16;:50;;;;-1:-1:-1;4379:4:11;4371:25;:30;4351:50;4331:70;;4417:12;4416:13;:30;;;;;4434:12;4433:13;4416:30;4412:91;;;4469:23;;;;;;;;;;;;;;4412:91;4512:24;;;;4535:1;4512:24;;;4546:73;;;;4580:28;;;;;;;;4546:73;3299:19:1::1;3311:6;3299:11;:19::i;:::-;4643:14:11::0;4639:107;;;4673:29;;;;;;4721:14;;-1:-1:-1;15781:50:231;;4721:14:11;;15769:2:231;15754:18;4721:14:11;;;;;;;3680:1072;;;;;3224:101:1;:::o;771:121:165:-;846:39;;;;;876:4;846:39;;;16024:74:231;820:7:165;16114:18:231;;;16107:91;;;820:7:165;846:21;6722:12:9;846:21:165;;;;15997:18:231;;846:39:165;15842:362:231;3575:242:1;1142:17:9;:15;:17::i;:::-;3666:22:1::1;::::0;::::1;::::0;;:51:::1;;-1:-1:-1::0;3692:25:1::1;::::0;::::1;3712:4;3692:25;3666:51;3662:111;;;3740:22;::::0;::::1;::::0;;8000:42:231;7988:55;;3740:22:1::1;::::0;::::1;7970:74:231::0;7943:18;;3740:22:1::1;;;;;;;;3662:111;3782:28;3801:8;3782:18;:28::i;:::-;3575:242:::0;:::o;5757:885:12:-;6066:22;9114:11;9255:9;9252:25;9069:14;9225:9;9222:28;9218:60;6102:73;;-1:-1:-1;8545:4:12;8539:11;;8606:16;8596:27;;8383:15;8650:4;8643:12;;8636:31;8426:18;8701:12;;;8694:33;;;;8761:9;8754:4;8747:12;;8740:31;8805:9;8798:4;8791:12;;8784:31;8854:4;8841:18;;6102:73;6309:18;6303:4;6296:32;6375:6;6369:4;6362:20;6439:10;6433:4;6426:24;6515:4;6509;6499:21;6489:31;;6624:1;6618:4;6611:15;5757:885;;;:::o;7499:730:1:-;7656:4;7699:1;7680:20;;7676:80;;;7723:22;;;;;;;;;;;;;;7676:80;7765:19;7793:9;;7803:1;7793:12;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;7793:12:1;;-1:-1:-1;7816:368:1;;7913:56;7939:14;7955:13;:9;7965:1;7955:9;;:13;:::i;:::-;7913:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7913:25:1;;-1:-1:-1;;;7913:56:1:i;:::-;7906:63;;;;;7816:368;7990:46;;;;;7986:198;;8109:64;8143:14;8159:13;:9;8169:1;8159:9;;:13;:::i;:::-;8109:64;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8109:33:1;;-1:-1:-1;;;8109:64:1:i;7986:198::-;8200:22;;;;;;;;;;;;;;7048:205:9;7103:10;:35;6722:12;7103:35;;;;;:66;;-1:-1:-1;7142:10:9;7164:4;7142:27;;7103:66;:85;;;;;7174:14;:12;:14::i;:::-;7173:15;7103:85;7099:148;;;7211:25;;;;;7225:10;7211:25;;;7970:74:231;7943:18;;7211:25:9;7824:226:231;7099:148:9;7048:205::o;8300:406::-;8498:1;8492:4;8485;8479:11;8472:4;8466;8462:15;8455:5;8447:6;8440:5;8435:65;8524:4;8514:176;;8565:4;8559:11;8613:16;8607:4;8602:3;8587:43;8659:16;8654:3;8647:29;8514:176;;8300:406;;;:::o;1605:183:165:-;1692:10;:35;6722:12:9;1692:35:165;;1671:110;;;;;;;16936:2:231;1671:110:165;;;16918:21:231;16975:2;16955:18;;;16948:30;17014;16994:18;;;16987:58;17062:18;;1671:110:165;16734:352:231;4962:981:1;5114:22;5182:1;5156:16;;;;:6;:16;:::i;:::-;:23;;:27;5152:87;;;5206:22;;;;;;;;;;;;;;5152:87;5248:19;5276:16;;;;:6;:16;:::i;:::-;5293:1;5276:19;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;5276:19:1;;-1:-1:-1;5306:592:1;;1401:34:215;5396:18:1;1388:48:215;;;1497:4;1490:25;;;1595:4;1579:21;;;5491:16:1;;;;;;:::i;:::-;:20;;5508:1;;5491:20;;;:::i;:::-;5466:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5466:45:1;;-1:-1:-1;5532:74:1;;-1:-1:-1;5557:48:1;;-1:-1:-1;5583:10:1;;-1:-1:-1;5466:45:1;5557:25;:48::i;:::-;5532:24;:74::i;:::-;5525:81;;;;;;;5306:592;5627:46;;;;;5623:275;;5739:22;5764:16;;;;:6;:16;:::i;:::-;:20;;5781:1;;5764:20;;;:::i;:::-;5739:45;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5739:45:1;;-1:-1:-1;5805:82:1;;-1:-1:-1;5830:56:1;;-1:-1:-1;5864:10:1;;-1:-1:-1;5739:45:1;5830:33;:56::i;5805:82::-;5798:89;4962:981;-1:-1:-1;;;;;4962:981:1:o;4356:382:165:-;4437:24;;4433:299;;4496:126;;4478:12;;4504:10;;4587:17;;4545:19;;4478:12;4496:126;4478:12;4496:126;4545:19;4504:10;4587:17;4496:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4012:305:1;4080:20;;;4076:82;;4123:24;;;;;4144:1;4123:24;;;7970:74:231;7943:18;;4123:24:1;7824:226:231;4076:82:1;4189:6;1530:66;4167:28;;;;;;;;;;;4210:45;;;;;;4234:12;4210:45;;;;-1:-1:-1;;4210:45:1;4270:40;;;;;;4299:1;;4270:40;;4299:1;;4270:40;4012:305;:::o;4323:354::-;1530:66;4477:14;;;;;;;4505:20;;;;;4501:80;;4548:22;;;;;8000:42:231;7988:55;;4548:22:1;;;7970:74:231;7943:18;;4548:22:1;7824:226:231;4501:80:1;4590:25;;;;;;;;;;;;;4630:40;;;;;;;;-1:-1:-1;;4630:40:1;4386:291;;4323:354;:::o;6338:203::-;6436:4;;6472:25;:6;6487:9;6472:14;:25::i;:::-;6452:45;;6527:7;1530:66;3980:19;;;;3916:90;6527:7;6514:20;;;;;;;;6338:203;-1:-1:-1;;;6338:203:1:o;6841:207::-;6947:4;6970:71;7014:7;1530:66;3980:19;;;;3916:90;7014:7;7023:6;7031:9;6970:43;:71::i;8560:115::-;8624:4;8661:7;1530:66;3980:19;;;;3916:90;8661:7;8647:21;;:10;:21;;;8640:28;;8560:115;:::o;7525:175:9:-;7596:22;7637:7;:56;;305:1:167;7637:56:9;;;465:1:167;7630:63:9;7525:175;-1:-1:-1;;7525:175:9:o;3714:255:214:-;3792:7;3812:17;3831:18;3851:16;3871:27;3882:4;3888:9;3871:10;:27::i;:::-;3811:87;;;;;;3908:28;3920:5;3927:8;3908:11;:28::i;:::-;-1:-1:-1;3953:9:214;;3714:255;-1:-1:-1;;;;3714:255:214:o;1877:458:216:-;2020:4;2037:12;2051:19;2074:6;:17;;2148:4;2154:9;2105:60;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;2105:60:216;;;;;;;;;;;;;;;;;;;;2074:101;;;2105:60;2074:101;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2036:139;;;;2193:7;:42;;;;;2233:2;2216:6;:13;:19;;2193:42;:134;;;;-1:-1:-1;2251:29:216;;2292:34;;2251:29;;;;;;;;;;;;:::i;:::-;:76;2193:134;2185:143;1877:458;-1:-1:-1;;;;;;1877:458:216:o;2129:778:214:-;2232:17;2251:16;2269:14;2299:9;:16;2319:2;2299:22;2295:606;;2604:4;2589:20;;2583:27;2653:4;2638:20;;2632:27;2710:4;2695:20;;2689:27;2337:9;2681:36;2751:25;2762:4;2681:36;2583:27;2632;2751:10;:25::i;:::-;2744:32;;;;;;;;;;;2295:606;-1:-1:-1;;2872:16:214;;2823:1;;-1:-1:-1;2827:35:214;;2295:606;2129:778;;;;;:::o;7280:532::-;7375:20;7366:5;:29;;;;;;;;:::i;:::-;;7362:444;;7280:532;;:::o;7362:444::-;7471:29;7462:5;:38;;;;;;;;:::i;:::-;;7458:348;;7523:23;;;;;;;;;;;;;;7458:348;7576:35;7567:5;:44;;;;;;;;:::i;:::-;;7563:243;;7634:46;;;;;;;;1945:25:231;;;1918:18;;7634:46:214;1799:177:231;7563:243:214;7710:30;7701:5;:39;;;;;;;;:::i;:::-;;7697:109;;7763:32;;;;;;;;1945:25:231;;;1918:18;;7763:32:214;1799:177:231;7697:109:214;7280:532;;:::o;5203:1551::-;5329:17;;;6283:66;6270:79;;6266:164;;;-1:-1:-1;6381:1:214;;-1:-1:-1;6385:30:214;;-1:-1:-1;6417:1:214;6365:54;;6266:164;6541:24;;;6524:14;6541:24;;;;;;;;;18317:25:231;;;18390:4;18378:17;;18358:18;;;18351:45;;;;18412:18;;;18405:34;;;18455:18;;;18448:34;;;6541:24:214;;18289:19:231;;6541:24:214;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6541:24:214;;-1:-1:-1;;6541:24:214;;;-1:-1:-1;;6579:20:214;;;6575:113;;-1:-1:-1;6631:1:214;;-1:-1:-1;6635:29:214;;-1:-1:-1;6631:1:214;;-1:-1:-1;6615:62:214;;6575:113;6706:6;-1:-1:-1;6714:20:214;;-1:-1:-1;6714:20:214;;-1:-1:-1;5203:1551:214;;;;;;;;;:::o;14:332:231:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:184;595:77;592:1;585:88;692:4;689:1;682:15;716:4;713:1;706:15;732:1062;800:6;853:2;841:9;832:7;828:23;824:32;821:52;;;869:1;866;859:12;821:52;909:9;896:23;942:18;934:6;931:30;928:50;;;974:1;971;964:12;928:50;997:22;;1050:4;1042:13;;1038:27;-1:-1:-1;1028:55:231;;1079:1;1076;1069:12;1028:55;1119:2;1106:16;1145:18;1137:6;1134:30;1131:56;;;1167:18;;:::i;:::-;1216:2;1210:9;-1:-1:-1;;1358:2:231;-1:-1:-1;;1282:4:231;1274:6;1270:17;1266:90;1262:99;1258:172;1250:6;1246:185;1497:6;1485:10;1482:22;1461:18;1449:10;1446:34;1443:62;1440:88;;;1508:18;;:::i;:::-;1544:2;1537:22;1568;;;1609:15;;;1626:2;1605:24;1602:37;-1:-1:-1;1599:57:231;;;1652:1;1649;1642:12;1599:57;1708:6;1703:2;1699;1695:11;1690:2;1682:6;1678:15;1665:50;1761:1;1735:19;;;1756:2;1731:28;1724:39;;;;1739:6;732:1062;-1:-1:-1;;;;732:1062:231:o;1981:154::-;2067:42;2060:5;2056:54;2049:5;2046:65;2036:93;;2125:1;2122;2115:12;2140:347;2191:8;2201:6;2255:3;2248:4;2240:6;2236:17;2232:27;2222:55;;2273:1;2270;2263:12;2222:55;-1:-1:-1;2296:20:231;;2339:18;2328:30;;2325:50;;;2371:1;2368;2361:12;2325:50;2408:4;2400:6;2396:17;2384:29;;2460:3;2453:4;2444:6;2436;2432:19;2428:30;2425:39;2422:59;;;2477:1;2474;2467:12;2422:59;2140:347;;;;;:::o;2492:806::-;2589:6;2597;2605;2613;2621;2674:3;2662:9;2653:7;2649:23;2645:33;2642:53;;;2691:1;2688;2681:12;2642:53;2730:9;2717:23;2749:31;2774:5;2749:31;:::i;:::-;2799:5;-1:-1:-1;2856:2:231;2841:18;;2828:32;2869:33;2828:32;2869:33;:::i;:::-;2921:7;-1:-1:-1;3001:2:231;2986:18;;2973:32;;-1:-1:-1;3082:2:231;3067:18;;3054:32;3109:18;3098:30;;3095:50;;;3141:1;3138;3131:12;3095:50;3180:58;3230:7;3221:6;3210:9;3206:22;3180:58;:::i;:::-;2492:806;;;;-1:-1:-1;2492:806:231;;-1:-1:-1;3257:8:231;;3154:84;2492:806;-1:-1:-1;;;2492:806:231:o;3556:523::-;3635:6;3643;3651;3704:2;3692:9;3683:7;3679:23;3675:32;3672:52;;;3720:1;3717;3710:12;3672:52;3765:23;;;-1:-1:-1;3863:2:231;3848:18;;3835:32;3890:18;3879:30;;3876:50;;;3922:1;3919;3912:12;3876:50;3961:58;4011:7;4002:6;3991:9;3987:22;3961:58;:::i;:::-;3556:523;;4038:8;;-1:-1:-1;3935:84:231;;-1:-1:-1;;;;3556:523:231:o;4084:367::-;4147:8;4157:6;4211:3;4204:4;4196:6;4192:17;4188:27;4178:55;;4229:1;4226;4219:12;4178:55;-1:-1:-1;4252:20:231;;4295:18;4284:30;;4281:50;;;4327:1;4324;4317:12;4281:50;4364:4;4356:6;4352:17;4340:29;;4424:3;4417:4;4407:6;4404:1;4400:14;4392:6;4388:27;4384:38;4381:47;4378:67;;;4441:1;4438;4431:12;4456:779;4589:6;4597;4605;4613;4666:2;4654:9;4645:7;4641:23;4637:32;4634:52;;;4682:1;4679;4672:12;4634:52;4722:9;4709:23;4755:18;4747:6;4744:30;4741:50;;;4787:1;4784;4777:12;4741:50;4826:70;4888:7;4879:6;4868:9;4864:22;4826:70;:::i;:::-;4915:8;;-1:-1:-1;4800:96:231;-1:-1:-1;;5003:2:231;4988:18;;4975:32;5032:18;5019:32;;5016:52;;;5064:1;5061;5054:12;5016:52;5103:72;5167:7;5156:8;5145:9;5141:24;5103:72;:::i;:::-;4456:779;;;;-1:-1:-1;5194:8:231;-1:-1:-1;;;;4456:779:231:o;5240:634::-;5357:6;5365;5373;5426:2;5414:9;5405:7;5401:23;5397:32;5394:52;;;5442:1;5439;5432:12;5394:52;5482:9;5469:23;5515:18;5507:6;5504:30;5501:50;;;5547:1;5544;5537:12;5501:50;5570:22;;5626:3;5608:16;;;5604:26;5601:46;;;5643:1;5640;5633:12;5601:46;5666:2;5737;5722:18;;5709:32;;-1:-1:-1;5838:2:231;5823:18;;;5810:32;;5240:634;-1:-1:-1;;;5240:634:231:o;6061:1110::-;6230:6;6238;6246;6254;6262;6270;6323:2;6311:9;6302:7;6298:23;6294:32;6291:52;;;6339:1;6336;6329:12;6291:52;6379:9;6366:23;6412:18;6404:6;6401:30;6398:50;;;6444:1;6441;6434:12;6398:50;6483:70;6545:7;6536:6;6525:9;6521:22;6483:70;:::i;:::-;6572:8;;-1:-1:-1;6457:96:231;-1:-1:-1;;6660:2:231;6645:18;;6632:32;6689:18;6676:32;;6673:52;;;6721:1;6718;6711:12;6673:52;6760:72;6824:7;6813:8;6802:9;6798:24;6760:72;:::i;:::-;6851:8;;-1:-1:-1;6734:98:231;-1:-1:-1;;6939:2:231;6924:18;;6911:32;6968:18;6955:32;;6952:52;;;7000:1;6997;6990:12;6952:52;7039:72;7103:7;7092:8;7081:9;7077:24;7039:72;:::i;:::-;6061:1110;;;;-1:-1:-1;6061:1110:231;;-1:-1:-1;6061:1110:231;;7130:8;;6061:1110;-1:-1:-1;;;6061:1110:231:o;7176:643::-;7264:6;7272;7280;7288;7341:2;7329:9;7320:7;7316:23;7312:32;7309:52;;;7357:1;7354;7347:12;7309:52;7402:23;;;-1:-1:-1;7500:2:231;7485:18;;7472:32;7527:18;7516:30;;7513:50;;;7559:1;7556;7549:12;7513:50;7598:58;7648:7;7639:6;7628:9;7624:22;7598:58;:::i;:::-;7176:643;;7675:8;;-1:-1:-1;7572:84:231;;7783:2;7768:18;7755:32;;7176:643;-1:-1:-1;;;;7176:643:231:o;8583:375::-;8659:6;8667;8720:2;8708:9;8699:7;8695:23;8691:32;8688:52;;;8736:1;8733;8726:12;8688:52;8775:9;8762:23;8794:31;8819:5;8794:31;:::i;:::-;8844:5;8922:2;8907:18;;;;8894:32;;-1:-1:-1;;;8583:375:231:o;8963:348::-;9005:3;9043:5;9037:12;9070:6;9065:3;9058:19;9126:6;9119:4;9112:5;9108:16;9101:4;9096:3;9092:14;9086:47;9178:1;9171:4;9162:6;9157:3;9153:16;9149:27;9142:38;9300:4;-1:-1:-1;;9225:2:231;9217:6;9213:15;9209:88;9204:3;9200:98;9196:109;9189:116;;;8963:348;;;;:::o;9316:1314::-;9713:66;9705:6;9701:79;9690:9;9683:98;9817:3;9812:2;9801:9;9797:18;9790:31;9664:4;9844:46;9885:3;9874:9;9870:19;9862:6;9844:46;:::i;:::-;9938:9;9930:6;9926:22;9921:2;9910:9;9906:18;9899:50;9972:33;9998:6;9990;9972:33;:::i;:::-;10036:2;10021:18;;10014:34;;;10097:42;10085:55;;10079:3;10064:19;;10057:84;10172:3;10157:19;;10150:35;;;10222:22;;;10216:3;10201:19;;10194:51;10294:13;;10316:22;;;10366:2;10392:15;;;;-1:-1:-1;10354:15:231;;;;-1:-1:-1;10435:169:231;10449:6;10446:1;10443:13;10435:169;;;10510:13;;10498:26;;10553:2;10579:15;;;;10544:12;;;;10471:1;10464:9;10435:169;;;-1:-1:-1;10621:3:231;;9316:1314;-1:-1:-1;;;;;;;;;;;9316:1314:231:o;10887:664::-;10975:6;10983;10991;10999;11052:2;11040:9;11031:7;11027:23;11023:32;11020:52;;;11068:1;11065;11058:12;11020:52;11107:9;11094:23;11126:31;11151:5;11126:31;:::i;:::-;11176:5;-1:-1:-1;11254:2:231;11239:18;;11226:32;;-1:-1:-1;11335:2:231;11320:18;;11307:32;11362:18;11351:30;;11348:50;;;11394:1;11391;11384:12;11348:50;11433:58;11483:7;11474:6;11463:9;11459:22;11433:58;:::i;11556:1349::-;11716:6;11724;11732;11740;11748;11756;11764;11772;11825:3;11813:9;11804:7;11800:23;11796:33;11793:53;;;11842:1;11839;11832:12;11793:53;11881:9;11868:23;11900:31;11925:5;11900:31;:::i;:::-;11950:5;-1:-1:-1;12007:2:231;11992:18;;11979:32;12020:33;11979:32;12020:33;:::i;:::-;12072:7;-1:-1:-1;12130:2:231;12115:18;;12102:32;12157:18;12146:30;;12143:50;;;12189:1;12186;12179:12;12143:50;12228:70;12290:7;12281:6;12270:9;12266:22;12228:70;:::i;:::-;12317:8;;-1:-1:-1;12202:96:231;-1:-1:-1;;12405:2:231;12390:18;;12377:32;12434:18;12421:32;;12418:52;;;12466:1;12463;12456:12;12418:52;12505:72;12569:7;12558:8;12547:9;12543:24;12505:72;:::i;:::-;12596:8;;-1:-1:-1;12479:98:231;-1:-1:-1;;12684:3:231;12669:19;;12656:33;12714:18;12701:32;;12698:52;;;12746:1;12743;12736:12;12698:52;12785:60;12837:7;12826:8;12815:9;12811:24;12785:60;:::i;:::-;11556:1349;;;;-1:-1:-1;11556:1349:231;;-1:-1:-1;11556:1349:231;;;;;;12864:8;-1:-1:-1;;;11556:1349:231:o;12910:247::-;12969:6;13022:2;13010:9;13001:7;12997:23;12993:32;12990:52;;;13038:1;13035;13028:12;12990:52;13077:9;13064:23;13096:31;13121:5;13096:31;:::i;13162:927::-;13268:6;13276;13284;13292;13300;13308;13361:3;13349:9;13340:7;13336:23;13332:33;13329:53;;;13378:1;13375;13368:12;13329:53;13417:9;13404:23;13436:31;13461:5;13436:31;:::i;:::-;13486:5;-1:-1:-1;13543:2:231;13528:18;;13515:32;13556:33;13515:32;13556:33;:::i;:::-;13608:7;-1:-1:-1;13688:2:231;13673:18;;13660:32;;-1:-1:-1;13791:2:231;13776:18;;13763:32;;-1:-1:-1;13872:3:231;13857:19;;13844:33;13900:18;13889:30;;13886:50;;;13932:1;13929;13922:12;13886:50;13971:58;14021:7;14012:6;14001:9;13997:22;13971:58;:::i;14347:184::-;14399:77;14396:1;14389:88;14496:4;14493:1;14486:15;14520:4;14517:1;14510:15;14536:580;14613:4;14619:6;14679:11;14666:25;14769:66;14758:8;14742:14;14738:29;14734:102;14714:18;14710:127;14700:155;;14851:1;14848;14841:12;14700:155;14878:33;;14930:20;;;-1:-1:-1;14973:18:231;14962:30;;14959:50;;;15005:1;15002;14995:12;14959:50;15038:4;15026:17;;-1:-1:-1;15069:14:231;15065:27;;;15055:38;;15052:58;;;15106:1;15103;15096:12;15439:184;15509:6;15562:2;15550:9;15541:7;15537:23;15533:32;15530:52;;;15578:1;15575;15568:12;15530:52;-1:-1:-1;15601:16:231;;15439:184;-1:-1:-1;15439:184:231:o;16209:::-;16261:77;16258:1;16251:88;16358:4;16355:1;16348:15;16382:4;16379:1;16372:15;16398:331;16503:9;16514;16556:8;16544:10;16541:24;16538:44;;;16578:1;16575;16568:12;16538:44;16607:6;16597:8;16594:20;16591:40;;;16627:1;16624;16617:12;16591:40;-1:-1:-1;;16653:23:231;;;16698:25;;;;;-1:-1:-1;16398:331:231:o;17301:289::-;17476:6;17465:9;17458:25;17519:2;17514;17503:9;17499:18;17492:30;17439:4;17539:45;17580:2;17569:9;17565:18;17557:6;17539:45;:::i;:::-;17531:53;17301:289;-1:-1:-1;;;;17301:289:231:o;17595:301::-;17724:3;17762:6;17756:13;17808:6;17801:4;17793:6;17789:17;17784:3;17778:37;17870:1;17834:16;;17859:13;;;-1:-1:-1;17834:16:231;17595:301;-1:-1:-1;17595:301:231:o",
    linkReferences: {},
    immutableReferences: {
      "2379": [
        {
          start: 948,
          length: 32,
        },
        {
          start: 2452,
          length: 32,
        },
        {
          start: 2821,
          length: 32,
        },
        {
          start: 3376,
          length: 32,
        },
        {
          start: 3944,
          length: 32,
        },
        {
          start: 4797,
          length: 32,
        },
        {
          start: 4977,
          length: 32,
        },
        {
          start: 5834,
          length: 32,
        },
      ],
      "2912": [
        {
          start: 3489,
          length: 32,
        },
      ],
      "3181": [
        {
          start: 4186,
          length: 32,
        },
      ],
      "3183": [
        {
          start: 4221,
          length: 32,
        },
      ],
      "3185": [
        {
          start: 4301,
          length: 32,
        },
      ],
      "3187": [
        {
          start: 4339,
          length: 32,
        },
      ],
      "3189": [
        {
          start: 4153,
          length: 32,
        },
      ],
    },
  },
  methodIdentifiers: {
    "addDeposit()": "4a58db19",
    "eip712Domain()": "84b0196e",
    "entryPoint()": "b0d691fe",
    "execute(address,uint256,bytes)": "b61d27f6",
    "executeBatch(address[],bytes[])": "18dfb3c7",
    "executeBatch(address[],uint256[],bytes[])": "47e1da2a",
    "getDeposit()": "c399ec88",
    "getMessageHash(bytes)": "0a1028c4",
    "getNonce()": "d087d288",
    "initialize(address)": "c4d66de8",
    "isValidSignature(bytes32,bytes)": "1626ba7e",
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":
      "bc197c81",
    "onERC1155Received(address,address,uint256,uint256,bytes)": "f23a6e61",
    "onERC721Received(address,address,uint256,bytes)": "150b7a02",
    "owner()": "8da5cb5b",
    "performCreate(uint256,bytes)": "4c8c9ea1",
    "performCreate2(uint256,bytes,bytes32)": "4847be6f",
    "supportsInterface(bytes4)": "01ffc9a7",
    "transferOwnership(address)": "f2fde38b",
    "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":
      "19822f7c",
    "withdrawDepositTo(address,uint256)": "4d44560d",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"contract IEntryPoint","name":"entryPoint_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ArrayLengthMismatch","type":"error"},{"inputs":[],"name":"CreateFailed","type":"error"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"InvalidOwner","type":"error"},{"inputs":[],"name":"InvalidSignatureType","type":"error"},{"inputs":[],"name":"Locked","type":"error"},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"name":"NotAuthorized","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[],"name":"ZeroAddressNotAllowed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"contract IEntryPoint","name":"entryPoint","type":"address"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"LightAccountInitialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"addDeposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"eip712Domain","outputs":[{"internalType":"bytes1","name":"fields","type":"bytes1"},{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"version","type":"string"},{"internalType":"uint256","name":"chainId","type":"uint256"},{"internalType":"address","name":"verifyingContract","type":"address"},{"internalType":"bytes32","name":"salt","type":"bytes32"},{"internalType":"uint256[]","name":"extensions","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"dest","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"func","type":"bytes"}],"name":"execute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"dest","type":"address[]"},{"internalType":"bytes[]","name":"func","type":"bytes[]"}],"name":"executeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"dest","type":"address[]"},{"internalType":"uint256[]","name":"value","type":"uint256[]"},{"internalType":"bytes[]","name":"func","type":"bytes[]"}],"name":"executeBatch","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"}],"name":"getMessageHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hash","type":"bytes32"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"uint256[]","name":"","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"performCreate","outputs":[{"internalType":"address","name":"createdAddr","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes32","name":"salt","type":"bytes32"}],"name":"performCreate2","outputs":[{"internalType":"address","name":"createdAddr","type":"address"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"missingAccountFunds","type":"uint256"}],"name":"validateUserOp","outputs":[{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawDepositTo","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"Edited Alchemy `LightAccount` version, but with the following changes: 1. Remove UUPSUpgradable pattern and use the BeaconProxy pattern instead 2. Add `ExecutionLock` to `execute`, `executeBatch` adn `create` functions that enable an unlock flag 3. Add explicit flash loan receiver callbacks that are only accesible if the unlock flag is accordingly set","errors":{"ECDSAInvalidSignature()":[{"details":"The signature derives the `address(0)`."}],"ECDSAInvalidSignatureLength(uint256)":[{"details":"The signature has an invalid length."}],"ECDSAInvalidSignatureS(bytes32)":[{"details":"The signature has an S value that is in the upper half order."}],"InvalidInitialization()":[{"details":"The contract is already initialized."}],"InvalidOwner(address)":[{"details":"The new owner is not a valid owner (e.g., `address(0)`, the account itself, or the current owner)."}],"Locked()":[{"details":"custom error for violating lok condition"}],"NotInitializing()":[{"details":"The contract is not initializing."}]},"events":{"Initialized(uint64)":{"details":"Triggered when the contract has been initialized or reinitialized."},"LightAccountInitialized(address,address)":{"params":{"entryPoint":"The entry point.","owner":"The initial owner."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"The new owner.","previousOwner":"The previous owner."}}},"kind":"dev","methods":{"eip712Domain()":{"details":"See: https://eips.ethereum.org/EIPS/eip-5267"},"execute(address,uint256,bytes)":{"params":{"dest":"The target of the transaction.","func":"The transaction\'s calldata.","value":"The amount of wei sent in the transaction."}},"executeBatch(address[],bytes[])":{"params":{"dest":"An array of the targets for each transaction in the sequence.","func":"An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction."}},"executeBatch(address[],uint256[],bytes[])":{"params":{"dest":"An array of the targets for each transaction in the sequence.","func":"An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction.","value":"An array of value for each transaction in the sequence."}},"getDeposit()":{"returns":{"_0":"The current account deposit."}},"getMessageHash(bytes)":{"params":{"message":"Message that should be hashed."},"returns":{"_0":"The replay-safe message hash."}},"initialize(address)":{"details":"The `_ENTRY_POINT` member is immutable, to reduce gas consumption. To update the entry point address, a new implementation of LightAccount must be deployed with the new entry point address, and then `upgradeToAndCall` must be called to upgrade the implementation.","params":{"owner_":"The initial owner of the account."}},"isValidSignature(bytes32,bytes)":{"details":"The signature is valid if it is signed by the owner\'s private key (if the owner is an EOA) or if it is a valid ERC-1271 signature from the owner (if the owner is a contract).","params":{"hash":"Hash of the data to be signed.","signature":"Signature byte array associated with the data."},"returns":{"_0":"Magic value `0x1626ba7e` if validation succeeded, else `0xffffffff`."}},"owner()":{"returns":{"_0":"The current owner."}},"performCreate(uint256,bytes)":{"details":"Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract.     5. If creation failed (the address returned is zero), revert with CreateFailed().","params":{"initCode":"The initCode to deploy.","value":"The value to send to the new contract constructor."},"returns":{"createdAddr":"The created contract address."}},"performCreate2(uint256,bytes,bytes32)":{"details":"Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract using Create2 with the passed salt parameter.     5. If creation failed (the address returned is zero), revert with CreateFailed().","params":{"initCode":"The initCode to deploy.","salt":"The salt to use for the create2 operation.","value":"The value to send to the new contract constructor."},"returns":{"createdAddr":"The created contract address."}},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferOwnership(address)":{"params":{"newOwner":"The new owner."}},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"details":"Must validate caller is the entryPoint.      Must validate the signature and nonce","params":{"missingAccountFunds":"- Missing funds on the account\'s deposit in the entrypoint.                              This is the minimum amount to transfer to the sender(entryPoint) to be                              able to make the call. The excess is left as a deposit in the entrypoint                              for future calls. Can be withdrawn anytime using \\"entryPoint.withdrawTo()\\".                              In case there is a paymaster in the request (or the current deposit is high                              enough), this value will be zero.","userOp":"- The operation that is about to be executed.","userOpHash":"- Hash of the user\'s request data. can be used as the basis for signature."},"returns":{"validationData":"      - Packaged ValidationData structure. use `_packValidationData` and                              `_unpackValidationData` to encode and decode.                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                 otherwise, an address of an \\"authorizer\\" contract.                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for \\"indefinite\\"                              <6-byte> validAfter - First timestamp this operation is valid                                                    If an account doesn\'t use time-range, it is enough to                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.                              Note that the validation code cannot use block.timestamp (or block.number) directly."}},"withdrawDepositTo(address,uint256)":{"params":{"amount":"Amount to withdraw.","withdrawAddress":"Target to send to."}}},"stateVariables":{"_INITIALIZABLE_STORAGE_POSITION":{"details":"keccak256(\\"flash_account.initializable\\");"},"_STORAGE_POSITION":{"details":"keccak256(\\"flash_account.storage\\");"}},"title":"A simple ERC-4337 compatible smart contract account with a designated owner account.","version":1},"userdoc":{"events":{"LightAccountInitialized(address,address)":{"notice":"Emitted when this account is first initialized."},"OwnershipTransferred(address,address)":{"notice":"Emitted when this account\'s owner changes. Also emitted once at initialization, with a `previousOwner` of 0."}},"kind":"user","methods":{"addDeposit()":{"notice":"Deposit more funds for this account in the entry point."},"entryPoint()":{"notice":"Return the entryPoint used by this account. Subclass should return the current entryPoint used by this account."},"execute(address,uint256,bytes)":{"notice":"Execute a transaction. This may only be called directly by an owner or by the entry point via a user operation signed by an owner."},"executeBatch(address[],bytes[])":{"notice":"Execute a sequence of transactions."},"executeBatch(address[],uint256[],bytes[])":{"notice":"Execute a sequence of transactions."},"getDeposit()":{"notice":"Check current account deposit in the entry point."},"getMessageHash(bytes)":{"notice":"Returns the replay-safe hash of a message that can be signed by owners."},"getNonce()":{"notice":"Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"},"initialize(address)":{"notice":"Called once as part of initialization, either during initial deployment or when first upgrading to this contract."},"owner()":{"notice":"Return the current owner of this account."},"performCreate(uint256,bytes)":{"notice":"Creates a contract."},"performCreate2(uint256,bytes,bytes32)":{"notice":"Creates a contract using create2 deterministic deployment."},"transferOwnership(address)":{"notice":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner or from the entry point via a user operation signed by the current owner."},"validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":{"notice":"Validate user\'s signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\"simulation call\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."},"withdrawDepositTo(address,uint256)":{"notice":"Withdraw value from the account\'s deposit."}},"version":1}},"settings":{"compilationTarget":{"contracts/1delta/flash-account/FlashAccountBase.sol":"FlashAccountBase"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"contracts/1delta/flash-account/FlashAccountBase.sol":{"keccak256":"0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb","license":"GPL-3.0","urls":["bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7","dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11"]},"contracts/1delta/flash-account/common/BaseLightAccount.sol":{"keccak256":"0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869","license":"GPL-3.0","urls":["bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de","dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T"]},"contracts/1delta/flash-account/common/CustomSlotInitializable.sol":{"keccak256":"0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6","license":"MIT","urls":["bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c","dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny"]},"contracts/1delta/flash-account/common/EIP712.sol":{"keccak256":"0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3","license":"MIT","urls":["bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783","dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK"]},"contracts/1delta/flash-account/common/ERC1271.sol":{"keccak256":"0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a","license":"MIT","urls":["bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1","dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1"]},"contracts/1delta/flash-account/common/ExecutionLock.sol":{"keccak256":"0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e","license":"GPL-3.0","urls":["bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd","dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq"]},"lib/account-abstraction/contracts/core/BaseAccount.sol":{"keccak256":"0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358","license":"GPL-3.0","urls":["bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07","dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj"]},"lib/account-abstraction/contracts/core/Helpers.sol":{"keccak256":"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6","license":"GPL-3.0","urls":["bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e","dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc"]},"lib/account-abstraction/contracts/core/UserOperationLib.sol":{"keccak256":"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b","license":"GPL-3.0","urls":["bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc","dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS"]},"lib/account-abstraction/contracts/interfaces/IAccount.sol":{"keccak256":"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78","license":"GPL-3.0","urls":["bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020","dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP"]},"lib/account-abstraction/contracts/interfaces/IAggregator.sol":{"keccak256":"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588","license":"GPL-3.0","urls":["bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155","dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5"]},"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"keccak256":"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4","license":"GPL-3.0","urls":["bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9","dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe"]},"lib/account-abstraction/contracts/interfaces/INonceManager.sol":{"keccak256":"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb","license":"GPL-3.0","urls":["bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3","dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk"]},"lib/account-abstraction/contracts/interfaces/IStakeManager.sol":{"keccak256":"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04","license":"GPL-3.0-only","urls":["bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00","dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj"]},"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359","license":"GPL-3.0","urls":["bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be","dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3"]},"lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":{"keccak256":"0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7","license":"GPL-3.0","urls":["bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe","dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e","license":"MIT","urls":["bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2","dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715","license":"MIT","urls":["bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20","dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol":{"keccak256":"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d","license":"MIT","urls":["bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34","dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","license":"MIT","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865","license":"MIT","urls":["bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68","dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84","license":"MIT","urls":["bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9","dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7","license":"MIT","urls":["bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0","dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":{"keccak256":"0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f","license":"MIT","urls":["bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8","dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","license":"MIT","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c","license":"MIT","urls":["bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654","dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","license":"MIT","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3","license":"MIT","urls":["bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03","dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "contract IEntryPoint",
              name: "entryPoint_",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          type: "error",
          name: "ArrayLengthMismatch",
        },
        {
          inputs: [],
          type: "error",
          name: "CreateFailed",
        },
        {
          inputs: [],
          type: "error",
          name: "ECDSAInvalidSignature",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "length",
              type: "uint256",
            },
          ],
          type: "error",
          name: "ECDSAInvalidSignatureLength",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "s",
              type: "bytes32",
            },
          ],
          type: "error",
          name: "ECDSAInvalidSignatureS",
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidInitialization",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          type: "error",
          name: "InvalidOwner",
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidSignatureType",
        },
        {
          inputs: [],
          type: "error",
          name: "Locked",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "caller",
              type: "address",
            },
          ],
          type: "error",
          name: "NotAuthorized",
        },
        {
          inputs: [],
          type: "error",
          name: "NotInitializing",
        },
        {
          inputs: [],
          type: "error",
          name: "ZeroAddressNotAllowed",
        },
        {
          inputs: [
            {
              internalType: "uint64",
              name: "version",
              type: "uint64",
              indexed: false,
            },
          ],
          type: "event",
          name: "Initialized",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "contract IEntryPoint",
              name: "entryPoint",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "owner",
              type: "address",
              indexed: true,
            },
          ],
          type: "event",
          name: "LightAccountInitialized",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "previousOwner",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
              indexed: true,
            },
          ],
          type: "event",
          name: "OwnershipTransferred",
          anonymous: false,
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "function",
          name: "addDeposit",
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "eip712Domain",
          outputs: [
            {
              internalType: "bytes1",
              name: "fields",
              type: "bytes1",
            },
            {
              internalType: "string",
              name: "name",
              type: "string",
            },
            {
              internalType: "string",
              name: "version",
              type: "string",
            },
            {
              internalType: "uint256",
              name: "chainId",
              type: "uint256",
            },
            {
              internalType: "address",
              name: "verifyingContract",
              type: "address",
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32",
            },
            {
              internalType: "uint256[]",
              name: "extensions",
              type: "uint256[]",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "entryPoint",
          outputs: [
            {
              internalType: "contract IEntryPoint",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "dest",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "func",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "execute",
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "dest",
              type: "address[]",
            },
            {
              internalType: "bytes[]",
              name: "func",
              type: "bytes[]",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "executeBatch",
        },
        {
          inputs: [
            {
              internalType: "address[]",
              name: "dest",
              type: "address[]",
            },
            {
              internalType: "uint256[]",
              name: "value",
              type: "uint256[]",
            },
            {
              internalType: "bytes[]",
              name: "func",
              type: "bytes[]",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "executeBatch",
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getDeposit",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "message",
              type: "bytes",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "getMessageHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getNonce",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner_",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "initialize",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "hash",
              type: "bytes32",
            },
            {
              internalType: "bytes",
              name: "signature",
              type: "bytes",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "isValidSignature",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
            {
              internalType: "uint256[]",
              name: "",
              type: "uint256[]",
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "pure",
          type: "function",
          name: "onERC1155BatchReceived",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "pure",
          type: "function",
          name: "onERC1155Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "",
              type: "bytes",
            },
          ],
          stateMutability: "pure",
          type: "function",
          name: "onERC721Received",
          outputs: [
            {
              internalType: "bytes4",
              name: "",
              type: "bytes4",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "initCode",
              type: "bytes",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "performCreate",
          outputs: [
            {
              internalType: "address",
              name: "createdAddr",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "value",
              type: "uint256",
            },
            {
              internalType: "bytes",
              name: "initCode",
              type: "bytes",
            },
            {
              internalType: "bytes32",
              name: "salt",
              type: "bytes32",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "performCreate2",
          outputs: [
            {
              internalType: "address",
              name: "createdAddr",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "bytes4",
              name: "interfaceId",
              type: "bytes4",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "supportsInterface",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transferOwnership",
        },
        {
          inputs: [
            {
              internalType: "struct PackedUserOperation",
              name: "userOp",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "sender",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "initCode",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "callData",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "accountGasLimits",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "preVerificationGas",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "gasFees",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "paymasterAndData",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
            },
            {
              internalType: "bytes32",
              name: "userOpHash",
              type: "bytes32",
            },
            {
              internalType: "uint256",
              name: "missingAccountFunds",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "validateUserOp",
          outputs: [
            {
              internalType: "uint256",
              name: "validationData",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "withdrawAddress",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "withdrawDepositTo",
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive",
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "eip712Domain()": {
            details: "See: https://eips.ethereum.org/EIPS/eip-5267",
          },
          "execute(address,uint256,bytes)": {
            params: {
              dest: "The target of the transaction.",
              func: "The transaction's calldata.",
              value: "The amount of wei sent in the transaction.",
            },
          },
          "executeBatch(address[],bytes[])": {
            params: {
              dest: "An array of the targets for each transaction in the sequence.",
              func: "An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction.",
            },
          },
          "executeBatch(address[],uint256[],bytes[])": {
            params: {
              dest: "An array of the targets for each transaction in the sequence.",
              func: "An array of calldata for each transaction in the sequence. Must be the same length as `dest`, with corresponding elements representing the parameters for each transaction.",
              value: "An array of value for each transaction in the sequence.",
            },
          },
          "getDeposit()": {
            returns: {
              _0: "The current account deposit.",
            },
          },
          "getMessageHash(bytes)": {
            params: {
              message: "Message that should be hashed.",
            },
            returns: {
              _0: "The replay-safe message hash.",
            },
          },
          "initialize(address)": {
            details:
              "The `_ENTRY_POINT` member is immutable, to reduce gas consumption. To update the entry point address, a new implementation of LightAccount must be deployed with the new entry point address, and then `upgradeToAndCall` must be called to upgrade the implementation.",
            params: {
              owner_: "The initial owner of the account.",
            },
          },
          "isValidSignature(bytes32,bytes)": {
            details:
              "The signature is valid if it is signed by the owner's private key (if the owner is an EOA) or if it is a valid ERC-1271 signature from the owner (if the owner is a contract).",
            params: {
              hash: "Hash of the data to be signed.",
              signature: "Signature byte array associated with the data.",
            },
            returns: {
              _0: "Magic value `0x1626ba7e` if validation succeeded, else `0xffffffff`.",
            },
          },
          "owner()": {
            returns: {
              _0: "The current owner.",
            },
          },
          "performCreate(uint256,bytes)": {
            details:
              "Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract.     5. If creation failed (the address returned is zero), revert with CreateFailed().",
            params: {
              initCode: "The initCode to deploy.",
              value: "The value to send to the new contract constructor.",
            },
            returns: {
              createdAddr: "The created contract address.",
            },
          },
          "performCreate2(uint256,bytes,bytes32)": {
            details:
              "Assembly procedure:     1. Load the free memory pointer.     2. Get the initCode length.     3. Copy the initCode from callata to memory at the free memory pointer.     4. Create the contract using Create2 with the passed salt parameter.     5. If creation failed (the address returned is zero), revert with CreateFailed().",
            params: {
              initCode: "The initCode to deploy.",
              salt: "The salt to use for the create2 operation.",
              value: "The value to send to the new contract constructor.",
            },
            returns: {
              createdAddr: "The created contract address.",
            },
          },
          "supportsInterface(bytes4)": {
            details:
              "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.",
          },
          "transferOwnership(address)": {
            params: {
              newOwner: "The new owner.",
            },
          },
          "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":
            {
              details:
                "Must validate caller is the entryPoint.      Must validate the signature and nonce",
              params: {
                missingAccountFunds:
                  '- Missing funds on the account\'s deposit in the entrypoint.                              This is the minimum amount to transfer to the sender(entryPoint) to be                              able to make the call. The excess is left as a deposit in the entrypoint                              for future calls. Can be withdrawn anytime using "entryPoint.withdrawTo()".                              In case there is a paymaster in the request (or the current deposit is high                              enough), this value will be zero.',
                userOp: "- The operation that is about to be executed.",
                userOpHash:
                  "- Hash of the user's request data. can be used as the basis for signature.",
              },
              returns: {
                validationData:
                  '      - Packaged ValidationData structure. use `_packValidationData` and                              `_unpackValidationData` to encode and decode.                              <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                 otherwise, an address of an "authorizer" contract.                              <6-byte> validUntil - Last timestamp this operation is valid. 0 for "indefinite"                              <6-byte> validAfter - First timestamp this operation is valid                                                    If an account doesn\'t use time-range, it is enough to                                                    return SIG_VALIDATION_FAILED value (1) for signature failure.                              Note that the validation code cannot use block.timestamp (or block.number) directly.',
              },
            },
          "withdrawDepositTo(address,uint256)": {
            params: {
              amount: "Amount to withdraw.",
              withdrawAddress: "Target to send to.",
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {
          "addDeposit()": {
            notice: "Deposit more funds for this account in the entry point.",
          },
          "entryPoint()": {
            notice:
              "Return the entryPoint used by this account. Subclass should return the current entryPoint used by this account.",
          },
          "execute(address,uint256,bytes)": {
            notice:
              "Execute a transaction. This may only be called directly by an owner or by the entry point via a user operation signed by an owner.",
          },
          "executeBatch(address[],bytes[])": {
            notice: "Execute a sequence of transactions.",
          },
          "executeBatch(address[],uint256[],bytes[])": {
            notice: "Execute a sequence of transactions.",
          },
          "getDeposit()": {
            notice: "Check current account deposit in the entry point.",
          },
          "getMessageHash(bytes)": {
            notice:
              "Returns the replay-safe hash of a message that can be signed by owners.",
          },
          "getNonce()": {
            notice:
              "Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`",
          },
          "initialize(address)": {
            notice:
              "Called once as part of initialization, either during initial deployment or when first upgrading to this contract.",
          },
          "owner()": {
            notice: "Return the current owner of this account.",
          },
          "performCreate(uint256,bytes)": {
            notice: "Creates a contract.",
          },
          "performCreate2(uint256,bytes,bytes32)": {
            notice:
              "Creates a contract using create2 deterministic deployment.",
          },
          "transferOwnership(address)": {
            notice:
              "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner or from the entry point via a user operation signed by the current owner.",
          },
          "validateUserOp((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes),bytes32,uint256)":
            {
              notice:
                'Validate user\'s signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a "simulation call" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.',
            },
          "withdrawDepositTo(address,uint256)": {
            notice: "Withdraw value from the account's deposit.",
          },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "contracts/1delta/flash-account/FlashAccountBase.sol":
          "FlashAccountBase",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "contracts/1delta/flash-account/FlashAccountBase.sol": {
        keccak256:
          "0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb",
        urls: [
          "bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7",
          "dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/BaseLightAccount.sol": {
        keccak256:
          "0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869",
        urls: [
          "bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de",
          "dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/CustomSlotInitializable.sol": {
        keccak256:
          "0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6",
        urls: [
          "bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c",
          "dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/EIP712.sol": {
        keccak256:
          "0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3",
        urls: [
          "bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783",
          "dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ERC1271.sol": {
        keccak256:
          "0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a",
        urls: [
          "bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1",
          "dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ExecutionLock.sol": {
        keccak256:
          "0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e",
        urls: [
          "bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd",
          "dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/BaseAccount.sol": {
        keccak256:
          "0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358",
        urls: [
          "bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07",
          "dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/Helpers.sol": {
        keccak256:
          "0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6",
        urls: [
          "bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e",
          "dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/UserOperationLib.sol": {
        keccak256:
          "0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b",
        urls: [
          "bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc",
          "dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAccount.sol": {
        keccak256:
          "0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78",
        urls: [
          "bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020",
          "dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAggregator.sol": {
        keccak256:
          "0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588",
        urls: [
          "bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155",
          "dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IEntryPoint.sol": {
        keccak256:
          "0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4",
        urls: [
          "bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9",
          "dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/INonceManager.sol": {
        keccak256:
          "0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb",
        urls: [
          "bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3",
          "dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IStakeManager.sol": {
        keccak256:
          "0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04",
        urls: [
          "bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00",
          "dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj",
        ],
        license: "GPL-3.0-only",
      },
      "lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol": {
        keccak256:
          "0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359",
        urls: [
          "bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be",
          "dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":
        {
          keccak256:
            "0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7",
          urls: [
            "bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe",
            "dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi",
          ],
          license: "GPL-3.0",
        },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": {
        keccak256:
          "0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e",
        urls: [
          "bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2",
          "dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":
        {
          keccak256:
            "0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715",
          urls: [
            "bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20",
            "dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        keccak256:
          "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
        urls: [
          "bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
          "dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256:
          "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
        urls: [
          "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
          "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256:
          "0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865",
        urls: [
          "bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68",
          "dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        keccak256:
          "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
        urls: [
          "bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
          "dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":
        {
          keccak256:
            "0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7",
          urls: [
            "bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0",
            "dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":
        {
          keccak256:
            "0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f",
          urls: [
            "bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8",
            "dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256:
          "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        urls: [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256:
          "0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c",
        urls: [
          "bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654",
          "dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256:
          "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
        urls: [
          "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
          "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256:
          "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
        urls: [
          "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
          "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ",
        ],
        license: "MIT",
      },
    },
    version: 1,
  },
  id: 1,
} as const as Abi;
export type { FlashAccountBaseAbiType } from "./FlashAccountBase";
export { getFlashAccountBaseContract } from "./FlashAccountBase";

export const IEntryPointAbi = {
  abi: [
    {
      type: "function",
      name: "addStake",
      inputs: [
        {
          name: "_unstakeDelaySec",
          type: "uint32",
          internalType: "uint32",
        },
      ],
      outputs: [],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "balanceOf",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "delegateAndRevert",
      inputs: [
        {
          name: "target",
          type: "address",
          internalType: "address",
        },
        {
          name: "data",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "depositTo",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "getDepositInfo",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "info",
          type: "tuple",
          internalType: "struct IStakeManager.DepositInfo",
          components: [
            {
              name: "deposit",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "staked",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "stake",
              type: "uint112",
              internalType: "uint112",
            },
            {
              name: "unstakeDelaySec",
              type: "uint32",
              internalType: "uint32",
            },
            {
              name: "withdrawTime",
              type: "uint48",
              internalType: "uint48",
            },
          ],
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getNonce",
      inputs: [
        {
          name: "sender",
          type: "address",
          internalType: "address",
        },
        {
          name: "key",
          type: "uint192",
          internalType: "uint192",
        },
      ],
      outputs: [
        {
          name: "nonce",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getSenderAddress",
      inputs: [
        {
          name: "initCode",
          type: "bytes",
          internalType: "bytes",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "getUserOpHash",
      inputs: [
        {
          name: "userOp",
          type: "tuple",
          internalType: "struct PackedUserOperation",
          components: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "initCode",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "accountGasLimits",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "preVerificationGas",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "gasFees",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "paymasterAndData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
        },
      ],
      outputs: [
        {
          name: "",
          type: "bytes32",
          internalType: "bytes32",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "handleAggregatedOps",
      inputs: [
        {
          name: "opsPerAggregator",
          type: "tuple[]",
          internalType: "struct IEntryPoint.UserOpsPerAggregator[]",
          components: [
            {
              name: "userOps",
              type: "tuple[]",
              internalType: "struct PackedUserOperation[]",
              components: [
                {
                  name: "sender",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "nonce",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "initCode",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "callData",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "accountGasLimits",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "preVerificationGas",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "gasFees",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "paymasterAndData",
                  type: "bytes",
                  internalType: "bytes",
                },
                {
                  name: "signature",
                  type: "bytes",
                  internalType: "bytes",
                },
              ],
            },
            {
              name: "aggregator",
              type: "address",
              internalType: "contract IAggregator",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
        },
        {
          name: "beneficiary",
          type: "address",
          internalType: "address payable",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "handleOps",
      inputs: [
        {
          name: "ops",
          type: "tuple[]",
          internalType: "struct PackedUserOperation[]",
          components: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "nonce",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "initCode",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "callData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "accountGasLimits",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "preVerificationGas",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "gasFees",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "paymasterAndData",
              type: "bytes",
              internalType: "bytes",
            },
            {
              name: "signature",
              type: "bytes",
              internalType: "bytes",
            },
          ],
        },
        {
          name: "beneficiary",
          type: "address",
          internalType: "address payable",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "incrementNonce",
      inputs: [
        {
          name: "key",
          type: "uint192",
          internalType: "uint192",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "unlockStake",
      inputs: [],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "withdrawStake",
      inputs: [
        {
          name: "withdrawAddress",
          type: "address",
          internalType: "address payable",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "withdrawTo",
      inputs: [
        {
          name: "withdrawAddress",
          type: "address",
          internalType: "address payable",
        },
        {
          name: "withdrawAmount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "event",
      name: "AccountDeployed",
      inputs: [
        {
          name: "userOpHash",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32",
        },
        {
          name: "sender",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "factory",
          type: "address",
          indexed: false,
          internalType: "address",
        },
        {
          name: "paymaster",
          type: "address",
          indexed: false,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "BeforeExecution",
      inputs: [],
      anonymous: false,
    },
    {
      type: "event",
      name: "Deposited",
      inputs: [
        {
          name: "account",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "totalDeposit",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "PostOpRevertReason",
      inputs: [
        {
          name: "userOpHash",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32",
        },
        {
          name: "sender",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "nonce",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
        {
          name: "revertReason",
          type: "bytes",
          indexed: false,
          internalType: "bytes",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "SignatureAggregatorChanged",
      inputs: [
        {
          name: "aggregator",
          type: "address",
          indexed: true,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "StakeLocked",
      inputs: [
        {
          name: "account",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "totalStaked",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
        {
          name: "unstakeDelaySec",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "StakeUnlocked",
      inputs: [
        {
          name: "account",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "withdrawTime",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "StakeWithdrawn",
      inputs: [
        {
          name: "account",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "withdrawAddress",
          type: "address",
          indexed: false,
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "UserOperationEvent",
      inputs: [
        {
          name: "userOpHash",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32",
        },
        {
          name: "sender",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "paymaster",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "nonce",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
        {
          name: "success",
          type: "bool",
          indexed: false,
          internalType: "bool",
        },
        {
          name: "actualGasCost",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
        {
          name: "actualGasUsed",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "UserOperationPrefundTooLow",
      inputs: [
        {
          name: "userOpHash",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32",
        },
        {
          name: "sender",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "nonce",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "UserOperationRevertReason",
      inputs: [
        {
          name: "userOpHash",
          type: "bytes32",
          indexed: true,
          internalType: "bytes32",
        },
        {
          name: "sender",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "nonce",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
        {
          name: "revertReason",
          type: "bytes",
          indexed: false,
          internalType: "bytes",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "Withdrawn",
      inputs: [
        {
          name: "account",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "withdrawAddress",
          type: "address",
          indexed: false,
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          indexed: false,
          internalType: "uint256",
        },
      ],
      anonymous: false,
    },
    {
      type: "error",
      name: "DelegateAndRevert",
      inputs: [
        {
          name: "success",
          type: "bool",
          internalType: "bool",
        },
        {
          name: "ret",
          type: "bytes",
          internalType: "bytes",
        },
      ],
    },
    {
      type: "error",
      name: "FailedOp",
      inputs: [
        {
          name: "opIndex",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "reason",
          type: "string",
          internalType: "string",
        },
      ],
    },
    {
      type: "error",
      name: "FailedOpWithRevert",
      inputs: [
        {
          name: "opIndex",
          type: "uint256",
          internalType: "uint256",
        },
        {
          name: "reason",
          type: "string",
          internalType: "string",
        },
        {
          name: "inner",
          type: "bytes",
          internalType: "bytes",
        },
      ],
    },
    {
      type: "error",
      name: "PostOpReverted",
      inputs: [
        {
          name: "returnData",
          type: "bytes",
          internalType: "bytes",
        },
      ],
    },
    {
      type: "error",
      name: "SenderAddressResult",
      inputs: [
        {
          name: "sender",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "SignatureValidationFailed",
      inputs: [
        {
          name: "aggregator",
          type: "address",
          internalType: "address",
        },
      ],
    },
  ],
  bytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {},
  },
  deployedBytecode: {
    object: "0x",
    sourceMap: "",
    linkReferences: {},
  },
  methodIdentifiers: {
    "addStake(uint32)": "0396cb60",
    "balanceOf(address)": "70a08231",
    "delegateAndRevert(address,bytes)": "850aaf62",
    "depositTo(address)": "b760faf9",
    "getDepositInfo(address)": "5287ce12",
    "getNonce(address,uint192)": "35567e1a",
    "getSenderAddress(bytes)": "9b249f69",
    "getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))":
      "22cdde4c",
    "handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)":
      "dbed18e0",
    "handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)":
      "765e827f",
    "incrementNonce(uint192)": "0bd28e3b",
    "unlockStake()": "bb9fe6bf",
    "withdrawStake(address)": "c23a5cea",
    "withdrawTo(address,uint256)": "205c2878",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"ret","type":"bytes"}],"name":"DelegateAndRevert","type":"error"},{"inputs":[{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"FailedOp","type":"error"},{"inputs":[{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"},{"internalType":"bytes","name":"inner","type":"bytes"}],"name":"FailedOpWithRevert","type":"error"},{"inputs":[{"internalType":"bytes","name":"returnData","type":"bytes"}],"name":"PostOpReverted","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderAddressResult","type":"error"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureValidationFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"factory","type":"address"},{"indexed":false,"internalType":"address","name":"paymaster","type":"address"}],"name":"AccountDeployed","type":"event"},{"anonymous":false,"inputs":[],"name":"BeforeExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"revertReason","type":"bytes"}],"name":"PostOpRevertReason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureAggregatorChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"paymaster","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"uint256","name":"actualGasCost","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualGasUsed","type":"uint256"}],"name":"UserOperationEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"}],"name":"UserOperationPrefundTooLow","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"revertReason","type":"bytes"}],"name":"UserOperationRevertReason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"delegateAndRevert","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint256","name":"deposit","type":"uint256"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint192","name":"key","type":"uint192"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"getSenderAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct PackedUserOperation","name":"userOp","type":"tuple"}],"name":"getUserOpHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct PackedUserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"contract IAggregator","name":"aggregator","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct IEntryPoint.UserOpsPerAggregator[]","name":"opsPerAggregator","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleAggregatedOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bytes32","name":"accountGasLimits","type":"bytes32"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"bytes32","name":"gasFees","type":"bytes32"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct PackedUserOperation[]","name":"ops","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"name":"incrementNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedOp(uint256,string)":[{"params":{"opIndex":"- Index into the array of ops to the failed one (in simulateValidation, this is always zero).","reason":"- Revert reason. The string starts with a unique code \\"AAmn\\",                  where \\"m\\" is \\"1\\" for factory, \\"2\\" for account and \\"3\\" for paymaster issues,                  so a failure can be attributed to the correct entity."}}],"FailedOpWithRevert(uint256,string,bytes)":[{"details":"note that inner is truncated to 2048 bytes","params":{"inner":"- data from inner cought revert reason","opIndex":"- Index into the array of ops to the failed one (in simulateValidation, this is always zero).","reason":"- Revert reason. see FailedOp(uint256,string), above"}}],"SignatureValidationFailed(address)":[{"params":{"aggregator":"The aggregator that failed to verify the signature"}}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"params":{"factory":"- The factory used to deploy this account (in the initCode)","paymaster":"- The paymaster used by this UserOp","sender":"- The account that is deployed","userOpHash":"- The userOp that deployed this account. UserOperationEvent will follow."}},"PostOpRevertReason(bytes32,address,uint256,bytes)":{"params":{"nonce":"- The nonce used in the request.","revertReason":"- The return bytes from the (reverted) call to \\"callData\\".","sender":"- The sender of this request.","userOpHash":"- The request unique identifier."}},"SignatureAggregatorChanged(address)":{"params":{"aggregator":"- The aggregator used for the following UserOperationEvents."}},"UserOperationPrefundTooLow(bytes32,address,uint256)":{"params":{"nonce":"- The nonce used in the request.","sender":"- The sender of this request.","userOpHash":"- The request unique identifier."}},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"params":{"nonce":"- The nonce used in the request.","revertReason":"- The return bytes from the (reverted) call to \\"callData\\".","sender":"- The sender of this request.","userOpHash":"- The request unique identifier."}}},"kind":"dev","methods":{"addStake(uint32)":{"params":{"_unstakeDelaySec":"- The new lock duration before the deposit can be withdrawn."}},"balanceOf(address)":{"params":{"account":"- The account to query."},"returns":{"_0":"- The deposit (for gas payment) of the account."}},"delegateAndRevert(address,bytes)":{"details":"calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace  actual EntryPoint code is less convenient.","params":{"data":"data to pass to target in a delegatecall","target":"a target contract to make a delegatecall from entrypoint"}},"depositTo(address)":{"params":{"account":"- The account to add to."}},"getDepositInfo(address)":{"params":{"account":"- The account to query."},"returns":{"info":"  - Full deposit information of given account."}},"getNonce(address,uint192)":{"params":{"key":"the high 192 bit of the nonce","sender":"the account address"},"returns":{"nonce":"a full nonce to pass for next UserOp with this sender."}},"getSenderAddress(bytes)":{"params":{"initCode":"- The constructor code to be passed into the UserOperation."}},"getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))":{"params":{"userOp":"- The user operation to generate the request ID for."},"returns":{"_0":"hash the hash of this UserOperation"}},"handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)":{"params":{"beneficiary":"- The address to receive the fees.","opsPerAggregator":"- The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)."}},"handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)":{"params":{"beneficiary":"- The address to receive the fees.","ops":"- The operations to execute."}},"withdrawStake(address)":{"params":{"withdrawAddress":"- The address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"withdrawAddress":"- The address to send withdrawn value.","withdrawAmount":"- The amount to withdraw."}}},"version":1},"userdoc":{"errors":{"FailedOp(uint256,string)":[{"notice":"A custom revert error of handleOps, to identify the offending op. Should be caught in off-chain handleOps simulation and not happen on-chain. Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts. NOTE: If simulateValidation passes successfully, there should be no reason for handleOps to fail on it."}],"FailedOpWithRevert(uint256,string,bytes)":[{"notice":"A custom revert error of handleOps, to report a revert by account or paymaster."}],"SignatureValidationFailed(address)":[{"notice":"Error case when a signature aggregator fails to verify the aggregated signature it had created."}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"notice":"Account \\"sender\\" was deployed."},"BeforeExecution()":{"notice":"An event emitted by handleOps(), before starting the execution loop. Any event emitted before this event, is part of the validation."},"PostOpRevertReason(bytes32,address,uint256,bytes)":{"notice":"An event emitted if the UserOperation Paymaster\'s \\"postOp\\" call reverted with non-zero length."},"SignatureAggregatorChanged(address)":{"notice":"Signature aggregator used by the following UserOperationEvents within this bundle."},"UserOperationPrefundTooLow(bytes32,address,uint256)":{"notice":"UserOp consumed more than prefund. The UserOperation is reverted, and no refund is made."},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"notice":"An event emitted if the UserOperation \\"callData\\" reverted with non-zero length."}},"kind":"user","methods":{"addStake(uint32)":{"notice":"Add to the account\'s stake - amount and delay any pending unstake is first cancelled."},"balanceOf(address)":{"notice":"Get account balance."},"delegateAndRevert(address,bytes)":{"notice":"Helper method for dry-run testing."},"depositTo(address)":{"notice":"Add to the deposit of the given account."},"getDepositInfo(address)":{"notice":"Get deposit info."},"getNonce(address,uint192)":{"notice":"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."},"getSenderAddress(bytes)":{"notice":"Get counterfactual sender address. Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. This method always revert, and returns the address in SenderAddressResult error"},"getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))":{"notice":"Generate a request Id - unique identifier for this request. The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."},"handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)":{"notice":"Execute a batch of UserOperation with Aggregators"},"handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)":{"notice":"Execute a batch of UserOperations. No signature aggregator is used. If any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."},"incrementNonce(uint192)":{"notice":"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\"initialize\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."},"unlockStake()":{"notice":"Attempt to unlock the stake. The value can be withdrawn (using withdrawStake) after the unstake delay."},"withdrawStake(address)":{"notice":"Withdraw from the (unlocked) stake. Must first call unlockStake and wait for the unstakeDelay to pass."},"withdrawTo(address,uint256)":{"notice":"Withdraw from the deposit."}},"version":1}},"settings":{"compilationTarget":{"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":"IEntryPoint"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"lib/account-abstraction/contracts/interfaces/IAggregator.sol":{"keccak256":"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588","license":"GPL-3.0","urls":["bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155","dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5"]},"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"keccak256":"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4","license":"GPL-3.0","urls":["bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9","dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe"]},"lib/account-abstraction/contracts/interfaces/INonceManager.sol":{"keccak256":"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb","license":"GPL-3.0","urls":["bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3","dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk"]},"lib/account-abstraction/contracts/interfaces/IStakeManager.sol":{"keccak256":"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04","license":"GPL-3.0-only","urls":["bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00","dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj"]},"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359","license":"GPL-3.0","urls":["bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be","dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "bool",
              name: "success",
              type: "bool",
            },
            {
              internalType: "bytes",
              name: "ret",
              type: "bytes",
            },
          ],
          type: "error",
          name: "DelegateAndRevert",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "opIndex",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "reason",
              type: "string",
            },
          ],
          type: "error",
          name: "FailedOp",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "opIndex",
              type: "uint256",
            },
            {
              internalType: "string",
              name: "reason",
              type: "string",
            },
            {
              internalType: "bytes",
              name: "inner",
              type: "bytes",
            },
          ],
          type: "error",
          name: "FailedOpWithRevert",
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes",
            },
          ],
          type: "error",
          name: "PostOpReverted",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
          ],
          type: "error",
          name: "SenderAddressResult",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "aggregator",
              type: "address",
            },
          ],
          type: "error",
          name: "SignatureValidationFailed",
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "userOpHash",
              type: "bytes32",
              indexed: true,
            },
            {
              internalType: "address",
              name: "sender",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "factory",
              type: "address",
              indexed: false,
            },
            {
              internalType: "address",
              name: "paymaster",
              type: "address",
              indexed: false,
            },
          ],
          type: "event",
          name: "AccountDeployed",
          anonymous: false,
        },
        {
          inputs: [],
          type: "event",
          name: "BeforeExecution",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
              indexed: true,
            },
            {
              internalType: "uint256",
              name: "totalDeposit",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "Deposited",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "userOpHash",
              type: "bytes32",
              indexed: true,
            },
            {
              internalType: "address",
              name: "sender",
              type: "address",
              indexed: true,
            },
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
              indexed: false,
            },
            {
              internalType: "bytes",
              name: "revertReason",
              type: "bytes",
              indexed: false,
            },
          ],
          type: "event",
          name: "PostOpRevertReason",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "aggregator",
              type: "address",
              indexed: true,
            },
          ],
          type: "event",
          name: "SignatureAggregatorChanged",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
              indexed: true,
            },
            {
              internalType: "uint256",
              name: "totalStaked",
              type: "uint256",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "unstakeDelaySec",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "StakeLocked",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
              indexed: true,
            },
            {
              internalType: "uint256",
              name: "withdrawTime",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "StakeUnlocked",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "withdrawAddress",
              type: "address",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "StakeWithdrawn",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "userOpHash",
              type: "bytes32",
              indexed: true,
            },
            {
              internalType: "address",
              name: "sender",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "paymaster",
              type: "address",
              indexed: true,
            },
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
              indexed: false,
            },
            {
              internalType: "bool",
              name: "success",
              type: "bool",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "actualGasCost",
              type: "uint256",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "actualGasUsed",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "UserOperationEvent",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "userOpHash",
              type: "bytes32",
              indexed: true,
            },
            {
              internalType: "address",
              name: "sender",
              type: "address",
              indexed: true,
            },
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "UserOperationPrefundTooLow",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "bytes32",
              name: "userOpHash",
              type: "bytes32",
              indexed: true,
            },
            {
              internalType: "address",
              name: "sender",
              type: "address",
              indexed: true,
            },
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
              indexed: false,
            },
            {
              internalType: "bytes",
              name: "revertReason",
              type: "bytes",
              indexed: false,
            },
          ],
          type: "event",
          name: "UserOperationRevertReason",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "withdrawAddress",
              type: "address",
              indexed: false,
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
              indexed: false,
            },
          ],
          type: "event",
          name: "Withdrawn",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "_unstakeDelaySec",
              type: "uint32",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "addStake",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "balanceOf",
          outputs: [
            {
              internalType: "uint256",
              name: "",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "target",
              type: "address",
            },
            {
              internalType: "bytes",
              name: "data",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "delegateAndRevert",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "depositTo",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "getDepositInfo",
          outputs: [
            {
              internalType: "struct IStakeManager.DepositInfo",
              name: "info",
              type: "tuple",
              components: [
                {
                  internalType: "uint256",
                  name: "deposit",
                  type: "uint256",
                },
                {
                  internalType: "bool",
                  name: "staked",
                  type: "bool",
                },
                {
                  internalType: "uint112",
                  name: "stake",
                  type: "uint112",
                },
                {
                  internalType: "uint32",
                  name: "unstakeDelaySec",
                  type: "uint32",
                },
                {
                  internalType: "uint48",
                  name: "withdrawTime",
                  type: "uint48",
                },
              ],
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "sender",
              type: "address",
            },
            {
              internalType: "uint192",
              name: "key",
              type: "uint192",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "getNonce",
          outputs: [
            {
              internalType: "uint256",
              name: "nonce",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "bytes",
              name: "initCode",
              type: "bytes",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "getSenderAddress",
        },
        {
          inputs: [
            {
              internalType: "struct PackedUserOperation",
              name: "userOp",
              type: "tuple",
              components: [
                {
                  internalType: "address",
                  name: "sender",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "initCode",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "callData",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "accountGasLimits",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "preVerificationGas",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "gasFees",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "paymasterAndData",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "getUserOpHash",
          outputs: [
            {
              internalType: "bytes32",
              name: "",
              type: "bytes32",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "struct IEntryPoint.UserOpsPerAggregator[]",
              name: "opsPerAggregator",
              type: "tuple[]",
              components: [
                {
                  internalType: "struct PackedUserOperation[]",
                  name: "userOps",
                  type: "tuple[]",
                  components: [
                    {
                      internalType: "address",
                      name: "sender",
                      type: "address",
                    },
                    {
                      internalType: "uint256",
                      name: "nonce",
                      type: "uint256",
                    },
                    {
                      internalType: "bytes",
                      name: "initCode",
                      type: "bytes",
                    },
                    {
                      internalType: "bytes",
                      name: "callData",
                      type: "bytes",
                    },
                    {
                      internalType: "bytes32",
                      name: "accountGasLimits",
                      type: "bytes32",
                    },
                    {
                      internalType: "uint256",
                      name: "preVerificationGas",
                      type: "uint256",
                    },
                    {
                      internalType: "bytes32",
                      name: "gasFees",
                      type: "bytes32",
                    },
                    {
                      internalType: "bytes",
                      name: "paymasterAndData",
                      type: "bytes",
                    },
                    {
                      internalType: "bytes",
                      name: "signature",
                      type: "bytes",
                    },
                  ],
                },
                {
                  internalType: "contract IAggregator",
                  name: "aggregator",
                  type: "address",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
            },
            {
              internalType: "address payable",
              name: "beneficiary",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "handleAggregatedOps",
        },
        {
          inputs: [
            {
              internalType: "struct PackedUserOperation[]",
              name: "ops",
              type: "tuple[]",
              components: [
                {
                  internalType: "address",
                  name: "sender",
                  type: "address",
                },
                {
                  internalType: "uint256",
                  name: "nonce",
                  type: "uint256",
                },
                {
                  internalType: "bytes",
                  name: "initCode",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "callData",
                  type: "bytes",
                },
                {
                  internalType: "bytes32",
                  name: "accountGasLimits",
                  type: "bytes32",
                },
                {
                  internalType: "uint256",
                  name: "preVerificationGas",
                  type: "uint256",
                },
                {
                  internalType: "bytes32",
                  name: "gasFees",
                  type: "bytes32",
                },
                {
                  internalType: "bytes",
                  name: "paymasterAndData",
                  type: "bytes",
                },
                {
                  internalType: "bytes",
                  name: "signature",
                  type: "bytes",
                },
              ],
            },
            {
              internalType: "address payable",
              name: "beneficiary",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "handleOps",
        },
        {
          inputs: [
            {
              internalType: "uint192",
              name: "key",
              type: "uint192",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "incrementNonce",
        },
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "function",
          name: "unlockStake",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "withdrawAddress",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "withdrawStake",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "withdrawAddress",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "withdrawAmount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "withdrawTo",
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "addStake(uint32)": {
            params: {
              _unstakeDelaySec:
                "- The new lock duration before the deposit can be withdrawn.",
            },
          },
          "balanceOf(address)": {
            params: {
              account: "- The account to query.",
            },
            returns: {
              _0: "- The deposit (for gas payment) of the account.",
            },
          },
          "delegateAndRevert(address,bytes)": {
            details:
              "calling this method, the EntryPoint will make a delegatecall to the given data, and report (via revert) the result.  The method always revert, so is only useful off-chain for dry run calls, in cases where state-override to replace  actual EntryPoint code is less convenient.",
            params: {
              data: "data to pass to target in a delegatecall",
              target:
                "a target contract to make a delegatecall from entrypoint",
            },
          },
          "depositTo(address)": {
            params: {
              account: "- The account to add to.",
            },
          },
          "getDepositInfo(address)": {
            params: {
              account: "- The account to query.",
            },
            returns: {
              info: "  - Full deposit information of given account.",
            },
          },
          "getNonce(address,uint192)": {
            params: {
              key: "the high 192 bit of the nonce",
              sender: "the account address",
            },
            returns: {
              nonce: "a full nonce to pass for next UserOp with this sender.",
            },
          },
          "getSenderAddress(bytes)": {
            params: {
              initCode:
                "- The constructor code to be passed into the UserOperation.",
            },
          },
          "getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))":
            {
              params: {
                userOp: "- The user operation to generate the request ID for.",
              },
              returns: {
                _0: "hash the hash of this UserOperation",
              },
            },
          "handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)":
            {
              params: {
                beneficiary: "- The address to receive the fees.",
                opsPerAggregator:
                  "- The operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts).",
              },
            },
          "handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)":
            {
              params: {
                beneficiary: "- The address to receive the fees.",
                ops: "- The operations to execute.",
              },
            },
          "withdrawStake(address)": {
            params: {
              withdrawAddress: "- The address to send withdrawn value.",
            },
          },
          "withdrawTo(address,uint256)": {
            params: {
              withdrawAddress: "- The address to send withdrawn value.",
              withdrawAmount: "- The amount to withdraw.",
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {
          "addStake(uint32)": {
            notice:
              "Add to the account's stake - amount and delay any pending unstake is first cancelled.",
          },
          "balanceOf(address)": {
            notice: "Get account balance.",
          },
          "delegateAndRevert(address,bytes)": {
            notice: "Helper method for dry-run testing.",
          },
          "depositTo(address)": {
            notice: "Add to the deposit of the given account.",
          },
          "getDepositInfo(address)": {
            notice: "Get deposit info.",
          },
          "getNonce(address,uint192)": {
            notice:
              "Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.",
          },
          "getSenderAddress(bytes)": {
            notice:
              "Get counterfactual sender address. Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. This method always revert, and returns the address in SenderAddressResult error",
          },
          "getUserOpHash((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes))":
            {
              notice:
                "Generate a request Id - unique identifier for this request. The request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.",
            },
          "handleAggregatedOps(((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address,bytes)[],address)":
            {
              notice: "Execute a batch of UserOperation with Aggregators",
            },
          "handleOps((address,uint256,bytes,bytes,bytes32,uint256,bytes32,bytes,bytes)[],address)":
            {
              notice:
                "Execute a batch of UserOperations. No signature aggregator is used. If any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.",
            },
          "incrementNonce(uint192)": {
            notice:
              'Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to "initialize" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.',
          },
          "unlockStake()": {
            notice:
              "Attempt to unlock the stake. The value can be withdrawn (using withdrawStake) after the unstake delay.",
          },
          "withdrawStake(address)": {
            notice:
              "Withdraw from the (unlocked) stake. Must first call unlockStake and wait for the unstakeDelay to pass.",
          },
          "withdrawTo(address,uint256)": {
            notice: "Withdraw from the deposit.",
          },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":
          "IEntryPoint",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "lib/account-abstraction/contracts/interfaces/IAggregator.sol": {
        keccak256:
          "0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588",
        urls: [
          "bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155",
          "dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IEntryPoint.sol": {
        keccak256:
          "0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4",
        urls: [
          "bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9",
          "dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/INonceManager.sol": {
        keccak256:
          "0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb",
        urls: [
          "bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3",
          "dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IStakeManager.sol": {
        keccak256:
          "0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04",
        urls: [
          "bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00",
          "dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj",
        ],
        license: "GPL-3.0-only",
      },
      "lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol": {
        keccak256:
          "0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359",
        urls: [
          "bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be",
          "dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3",
        ],
        license: "GPL-3.0",
      },
    },
    version: 1,
  },
  id: 175,
} as const as Abi;
export type { IEntryPointAbiType } from "./IEntryPoint";
export { getIEntryPointContract } from "./IEntryPoint";

export const CompoundV2AdapterAbi = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "weth_",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "NATIVE_ADDRESS",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "WETH",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "ZERO_ADDRESS",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "isApprovedAddress",
      inputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "",
          type: "bool",
          internalType: "bool",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "repay",
      inputs: [
        {
          name: "cToken",
          type: "address",
          internalType: "address",
        },
        {
          name: "underlying",
          type: "address",
          internalType: "address",
        },
        {
          name: "borrower",
          type: "address",
          internalType: "address",
        },
        {
          name: "onbehalfOf",
          type: "address",
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [
        {
          name: "result",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "repayNative",
      inputs: [
        {
          name: "cToken",
          type: "address",
          internalType: "address",
        },
        {
          name: "borrower",
          type: "address",
          internalType: "address",
        },
        {
          name: "onbehalfOf",
          type: "address",
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [
        {
          name: "result",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "supply",
      inputs: [
        {
          name: "cToken",
          type: "address",
          internalType: "address",
        },
        {
          name: "underlying",
          type: "address",
          internalType: "address",
        },
        {
          name: "onbehalfOf",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "result",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "supplyNative",
      inputs: [
        {
          name: "cToken",
          type: "address",
          internalType: "address",
        },
        {
          name: "onbehalfOf",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [
        {
          name: "result",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      stateMutability: "payable",
    },
    {
      type: "error",
      name: "CantRepaySelf",
      inputs: [],
    },
    {
      type: "error",
      name: "MintFailed",
      inputs: [
        {
          name: "failureCode",
          type: "uint256",
          internalType: "uint256",
        },
      ],
    },
    {
      type: "error",
      name: "RepayFailed",
      inputs: [
        {
          name: "failureCode",
          type: "uint256",
          internalType: "uint256",
        },
      ],
    },
    {
      type: "error",
      name: "SafeERC20FailedOperation",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "TransferFailed",
      inputs: [],
    },
    {
      type: "error",
      name: "ZeroAddress",
      inputs: [],
    },
    {
      type: "error",
      name: "ZeroAmount",
      inputs: [],
    },
  ],
  bytecode: {
    object:
      "0x60a0604052348015600e575f5ffd5b506040516112ac3803806112ac833981016040819052602b916063565b806001600160a01b03811660525760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b031660805250608e565b5f602082840312156072575f5ffd5b81516001600160a01b03811681146087575f5ffd5b9392505050565b6080516112066100a65f395f61016301526112065ff3fe608060405260043610610078575f3560e01c806386f644f01161004c57806386f644f01461013f578063ad5c464814610152578063d5bcb61014610185578063ebc27b08146101ac575f5ffd5b80628fbb481461007c5780634430bcc3146100c7578063538ba4f9146100e85780637369a22e14610120575b5f5ffd5b348015610087575f5ffd5b506100b2610096366004611070565b5f60208181529281526040808220909352908152205460ff1681565b60405190151581526020015b60405180910390f35b6100da6100d5366004611070565b6101cb565b6040519081526020016100be565b3480156100f3575f5ffd5b506100fb5f81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100be565b34801561012b575f5ffd5b506100da61013a3660046110a1565b610318565b6100da61014d3660046110e1565b6104ef565b34801561015d575f5ffd5b506100fb7f000000000000000000000000000000000000000000000000000000000000000081565b348015610190575f5ffd5b506100fb73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b3480156101b7575f5ffd5b506100da6101c6366004611129565b6106ee565b5f345f03610205576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16631249c58b346040518263ffffffff1660e01b81526004015f604051808303818588803b15801561024b575f5ffd5b505af115801561025d573d5f5f3e3d5ffd5b505050505061026e83835f19610a68565b47801561030d575f8373ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f81146102cb576040519150601f19603f3d011682016040523d82523d5f602084013e6102d0565b606091505b505090508061030b576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b5f9150505b92915050565b5f5f6103248430610b27565b9050805f0361035f576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103698486610c2c565b6040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff86169063a0712d68906024016020604051808303815f875af11580156103d3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f79190611181565b91508115610439576040517fac55121f000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156104a3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104c79190611181565b905080156104da576104da858583610a68565b6104e686855f19610a68565b50509392505050565b5f345f03610529576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff851603610578576040517fda431a6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f17bfdfbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015247915f918816906317bfdfbc906024016020604051808303815f875af11580156105e7573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060b9190611181565b90505f5f19850361062c578183101561062557508161064d565b508061064d565b8483101561063b57508161064d565b818511610648578461064a565b815b90505b6040517fe597461900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015289169063e59746199083906024015f604051808303818588803b1580156106b5575f5ffd5b505af11580156106c7573d5f5f3e3d5ffd5b5047935050821591506106e09050576106e08782610ccc565b505f98975050505050505050565b5f3073ffffffffffffffffffffffffffffffffffffffff85160361073e576040517fda431a6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa1580156107a8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107cc9190611181565b9050805f03610807576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f17bfdfbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301525f91908916906317bfdfbc906024016020604051808303815f875af1158015610875573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108999190611181565b90506108a58789610c2c565b5f5f1985036108c457818310156108bd5750816108e5565b50806108e5565b848310156108d35750816108e5565b8185116108e057846108e2565b815b90505b6040517f2608f81800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018390528a1690632608f818906044016020604051808303815f875af1158015610957573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061097b9190611181565b935083156109b8576040517f0bc884f200000000000000000000000000000000000000000000000000000000815260048101859052602401610430565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8a16906370a0823190602401602060405180830381865afa158015610a22573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a469190611181565b90508015610a5957610a59898883610a68565b505f9998505050505050505050565b8015610b22575f198103610b17576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610ae0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b049190611181565b9050610b11848483610d4e565b50505050565b610b22838383610d4e565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff83161580610b74575073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610b97575073ffffffffffffffffffffffffffffffffffffffff811631610312565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015610c01573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c259190611181565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8083165f908152602081815260408083209385168352929052205460ff16610cc857610c6f82825f19610dcf565b73ffffffffffffffffffffffffffffffffffffffff8083165f9081526020818152604080832093851683529290522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b5050565b5f81118015610cdb5750804710155b15610cc8575f5f8373ffffffffffffffffffffffffffffffffffffffff16836040515f6040518083038185875af1925050503d805f8114610d37576040519150601f19603f3d011682016040523d82523d5f602084013e610d3c565b606091505b509150915081610b1157805160208201fd5b60405173ffffffffffffffffffffffffffffffffffffffff838116602483015260448201839052610b2291859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e7c565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301525f919085169063dd62ed3e90604401602060405180830381865afa158015610e42573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e669190611181565b9050610b118484610e778585611198565b610f1b565b5f5f60205f8451602086015f885af180610e9b576040513d5f823e3d81fd5b50505f513d91508115610eb2578060011415610ecc565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15610b11576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610430565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052610fa78482610ff2565b610b115760405173ffffffffffffffffffffffffffffffffffffffff84811660248301525f6044830152610fe891869182169063095ea7b390606401610d88565b610b118482610e7c565b5f5f5f5f60205f8651602088015f8a5af192503d91505f51905082801561103e57508115611023578060011461103e565b5f8673ffffffffffffffffffffffffffffffffffffffff163b115b9695505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461106b575f5ffd5b919050565b5f5f60408385031215611081575f5ffd5b61108a83611048565b915061109860208401611048565b90509250929050565b5f5f5f606084860312156110b3575f5ffd5b6110bc84611048565b92506110ca60208501611048565b91506110d860408501611048565b90509250925092565b5f5f5f5f608085870312156110f4575f5ffd5b6110fd85611048565b935061110b60208601611048565b925061111960408601611048565b9396929550929360600135925050565b5f5f5f5f5f60a0868803121561113d575f5ffd5b61114686611048565b945061115460208701611048565b935061116260408701611048565b925061117060608701611048565b949793965091946080013592915050565b5f60208284031215611191575f5ffd5b5051919050565b80820180821115610312577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffdfea2646970667358221220b5d972fc81a7dad51014b66cc441925f036a56f479c70fd001ad33c54d619f2064736f6c634300081c0033",
    sourceMap:
      "609:6100:7:-:0;;;799:60;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;850:5;-1:-1:-1;;;;;953:21:3;;949:47;;983:13;;-1:-1:-1;;;983:13:3;;;;;;;;;;;949:47;-1:-1:-1;;;;;1006:12:3;;;-1:-1:-1;609:6100:7;;14:290:231;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:231;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:231:o;:::-;609:6100:7;;;;;;;;;;;;",
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      "0x608060405260043610610078575f3560e01c806386f644f01161004c57806386f644f01461013f578063ad5c464814610152578063d5bcb61014610185578063ebc27b08146101ac575f5ffd5b80628fbb481461007c5780634430bcc3146100c7578063538ba4f9146100e85780637369a22e14610120575b5f5ffd5b348015610087575f5ffd5b506100b2610096366004611070565b5f60208181529281526040808220909352908152205460ff1681565b60405190151581526020015b60405180910390f35b6100da6100d5366004611070565b6101cb565b6040519081526020016100be565b3480156100f3575f5ffd5b506100fb5f81565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100be565b34801561012b575f5ffd5b506100da61013a3660046110a1565b610318565b6100da61014d3660046110e1565b6104ef565b34801561015d575f5ffd5b506100fb7f000000000000000000000000000000000000000000000000000000000000000081565b348015610190575f5ffd5b506100fb73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b3480156101b7575f5ffd5b506100da6101c6366004611129565b6106ee565b5f345f03610205576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff16631249c58b346040518263ffffffff1660e01b81526004015f604051808303818588803b15801561024b575f5ffd5b505af115801561025d573d5f5f3e3d5ffd5b505050505061026e83835f19610a68565b47801561030d575f8373ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f81146102cb576040519150601f19603f3d011682016040523d82523d5f602084013e6102d0565b606091505b505090508061030b576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b5f9150505b92915050565b5f5f6103248430610b27565b9050805f0361035f576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103698486610c2c565b6040517fa0712d680000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff86169063a0712d68906024016020604051808303815f875af11580156103d3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103f79190611181565b91508115610439576040517fac55121f000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8616906370a0823190602401602060405180830381865afa1580156104a3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104c79190611181565b905080156104da576104da858583610a68565b6104e686855f19610a68565b50509392505050565b5f345f03610529576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff851603610578576040517fda431a6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f17bfdfbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015247915f918816906317bfdfbc906024016020604051808303815f875af11580156105e7573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060b9190611181565b90505f5f19850361062c578183101561062557508161064d565b508061064d565b8483101561063b57508161064d565b818511610648578461064a565b815b90505b6040517fe597461900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015289169063e59746199083906024015f604051808303818588803b1580156106b5575f5ffd5b505af11580156106c7573d5f5f3e3d5ffd5b5047935050821591506106e09050576106e08782610ccc565b505f98975050505050505050565b5f3073ffffffffffffffffffffffffffffffffffffffff85160361073e576040517fda431a6f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa1580156107a8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107cc9190611181565b9050805f03610807576040517f1f2a200500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f17bfdfbc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301525f91908916906317bfdfbc906024016020604051808303815f875af1158015610875573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108999190611181565b90506108a58789610c2c565b5f5f1985036108c457818310156108bd5750816108e5565b50806108e5565b848310156108d35750816108e5565b8185116108e057846108e2565b815b90505b6040517f2608f81800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018390528a1690632608f818906044016020604051808303815f875af1158015610957573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061097b9190611181565b935083156109b8576040517f0bc884f200000000000000000000000000000000000000000000000000000000815260048101859052602401610430565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8a16906370a0823190602401602060405180830381865afa158015610a22573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a469190611181565b90508015610a5957610a59898883610a68565b505f9998505050505050505050565b8015610b22575f198103610b17576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f9073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610ae0573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b049190611181565b9050610b11848483610d4e565b50505050565b610b22838383610d4e565b505050565b5f73ffffffffffffffffffffffffffffffffffffffff83161580610b74575073ffffffffffffffffffffffffffffffffffffffff831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610b97575073ffffffffffffffffffffffffffffffffffffffff811631610312565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301528416906370a0823190602401602060405180830381865afa158015610c01573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c259190611181565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8083165f908152602081815260408083209385168352929052205460ff16610cc857610c6f82825f19610dcf565b73ffffffffffffffffffffffffffffffffffffffff8083165f9081526020818152604080832093851683529290522080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b5050565b5f81118015610cdb5750804710155b15610cc8575f5f8373ffffffffffffffffffffffffffffffffffffffff16836040515f6040518083038185875af1925050503d805f8114610d37576040519150601f19603f3d011682016040523d82523d5f602084013e610d3c565b606091505b509150915081610b1157805160208201fd5b60405173ffffffffffffffffffffffffffffffffffffffff838116602483015260448201839052610b2291859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610e7c565b6040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff83811660248301525f919085169063dd62ed3e90604401602060405180830381865afa158015610e42573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e669190611181565b9050610b118484610e778585611198565b610f1b565b5f5f60205f8451602086015f885af180610e9b576040513d5f823e3d81fd5b50505f513d91508115610eb2578060011415610ecc565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15610b11576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610430565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052610fa78482610ff2565b610b115760405173ffffffffffffffffffffffffffffffffffffffff84811660248301525f6044830152610fe891869182169063095ea7b390606401610d88565b610b118482610e7c565b5f5f5f5f60205f8651602088015f8a5af192503d91505f51905082801561103e57508115611023578060011461103e565b5f8673ffffffffffffffffffffffffffffffffffffffff163b115b9695505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461106b575f5ffd5b919050565b5f5f60408385031215611081575f5ffd5b61108a83611048565b915061109860208401611048565b90509250929050565b5f5f5f606084860312156110b3575f5ffd5b6110bc84611048565b92506110ca60208501611048565b91506110d860408501611048565b90509250925092565b5f5f5f5f608085870312156110f4575f5ffd5b6110fd85611048565b935061110b60208601611048565b925061111960408601611048565b9396929550929360600135925050565b5f5f5f5f5f60a0868803121561113d575f5ffd5b61114686611048565b945061115460208701611048565b935061116260408701611048565b925061117060608701611048565b949793965091946080013592915050565b5f60208284031215611191575f5ffd5b5051919050565b80820180821115610312577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffdfea2646970667358221220b5d972fc81a7dad51014b66cc441925f036a56f479c70fd001ad33c54d619f2064736f6c634300081c0033",
    sourceMap:
      "609:6100:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;700:69:3;;;;;;;;;;-1:-1:-1;700:69:3;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;645:14:231;;638:22;620:41;;608:2;593:18;700:69:3;;;;;;;;2230:599:7;;;;;;:::i;:::-;;:::i;:::-;;;818:25:231;;;806:2;791:18;2230:599:7;672:177:231;576:81:3;;;;;;;;;;;;615:42;576:81;;;;;1030:42:231;1018:55;;;1000:74;;988:2;973:18;576:81:3;854:226:231;1185:774:7;;;;;;;;;;-1:-1:-1;1185:774:7;;;;;:::i;:::-;;:::i;5271:1436::-;;;;;;:::i;:::-;;:::i;664:29:3:-;;;;;;;;;;;;;;;487:83;;;;;;;;;;;;528:42;487:83;;3287:1587:7;;;;;;;;;;-1:-1:-1;3287:1587:7;;;;;:::i;:::-;;:::i;2230:599::-;2314:14;2344:9;2357:1;2344:14;2340:39;;2367:12;;;;;;;;;;;;;;2340:39;2398:6;2390:20;;;2418:9;2390:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2481:53;2496:6;2504:10;-1:-1:-1;;2481:14:7;:53::i;:::-;2615:21;2650:11;;2646:147;;2678:12;2696:10;:15;;2719:7;2696:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2677:54;;;2750:7;2745:37;;2766:16;;;;;;;;;;;;;;2745:37;2663:130;2646:147;2810:1;2803:8;;;2230:599;;;;;:::o;1185:774::-;1275:14;1301:24;1328:38;1340:10;1360:4;1328:11;:38::i;:::-;1301:65;;1380:16;1400:1;1380:21;1376:46;;1410:12;;;;;;;;;;;;;;1376:46;1433:35;1449:10;1461:6;1433:15;:35::i;:::-;1516:38;;;;;;;;818:25:231;;;1516:20:7;;;;;;791:18:231;;1516:38:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1507:47;-1:-1:-1;1568:11:7;;1564:42;;1588:18;;;;;;;;818:25:231;;;791:18;;1588::7;;;;;;;;1564:42;1668:43;;;;;1705:4;1668:43;;;1000:74:231;1651:14:7;;1668:28;;;;;;973:18:231;;1668:43:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1651:60;-1:-1:-1;1725:10:7;;1721:87;;1751:46;1766:10;1778;1790:6;1751:14;:46::i;:::-;1858:53;1873:6;1881:10;-1:-1:-1;;1858:14:7;:53::i;:::-;1922:13;;1185:774;;;;;:::o;5271:1436::-;5388:14;5418:9;5431:1;5418:14;5414:39;;5441:12;;;;;;;;;;;;;;5414:39;5487:4;5467:25;;;;5463:53;;5501:15;;;;;;;;;;;;;;5463:53;5607:46;;;;;:36;1018:55:231;;;5607:46:7;;;1000:74:231;5552:21:7;;5527:22;;5607:36;;;;;973:18:231;;5607:46:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5583:70;;5664:19;-1:-1:-1;;5734:6:7;:27;5730:685;;5855:13;5838:14;:30;5834:205;;;-1:-1:-1;5902:14:7;5730:685;;5834:205;-1:-1:-1;6011:13:7;5730:685;;;6178:6;6161:14;:23;6157:248;;;-1:-1:-1;6218:14:7;6157:248;;;6352:13;6343:6;:22;:47;;6384:6;6343:47;;;6368:13;6343:47;6329:61;;6157:248;6425:63;;;;;:33;1018:55:231;;;6425:63:7;;;1000:74:231;6425:33:7;;;;;6466:11;;973:18:231;;6425:63:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6555:21:7;;-1:-1:-1;;6590:20:7;;;-1:-1:-1;6586:96:7;;-1:-1:-1;6586:96:7;6626:45;6642:10;6654:16;6626:15;:45::i;:::-;-1:-1:-1;6699:1:7;;5271:1436;-1:-1:-1;;;;;;;;5271:1436:7:o;3287:1587::-;3410:14;3460:4;3440:25;;;;3436:53;;3474:15;;;;;;;;;;;;;;3436:53;3527:43;;;;;3564:4;3527:43;;;1000:74:231;3500:24:7;;3527:28;;;;;;973:18:231;;3527:43:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3500:70;;3584:16;3604:1;3584:21;3580:46;;3614:12;;;;;;;;;;;;;;3580:46;3661;;;;;:36;1018:55:231;;;3661:46:7;;;1000:74:231;3637:21:7;;3661:36;;;;;;973:18:231;;3661:46:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3637:70;;3718:35;3734:10;3746:6;3718:15;:35::i;:::-;3764:19;-1:-1:-1;;3834:6:7;:27;3830:693;;3957:13;3938:16;:32;3934:209;;;-1:-1:-1;4004:16:7;3830:693;;3934:209;-1:-1:-1;4115:13:7;3830:693;;;4284:6;4265:16;:25;4261:252;;;-1:-1:-1;4324:16:7;4261:252;;;4460:13;4451:6;:22;:47;;4492:6;4451:47;;;4476:13;4451:47;4437:61;;4261:252;4542:56;;;;;:33;2998:55:231;;;4542:56:7;;;2980:74:231;3070:18;;;3063:34;;;4542:33:7;;;;;2953:18:231;;4542:56:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4533:65;-1:-1:-1;4613:11:7;;4609:43;;4633:19;;;;;;;;818:25:231;;;791:18;;4633:19:7;672:177:231;4609:43:7;4709;;;;;4746:4;4709:43;;;1000:74:231;4692:14:7;;4709:28;;;;;;973:18:231;;4709:43:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4692:60;-1:-1:-1;4766:10:7;;4762:87;;4792:46;4807:10;4819;4831:6;4792:14;:46::i;:::-;-1:-1:-1;4866:1:7;;3287:1587;-1:-1:-1;;;;;;;;;3287:1587:7:o;1313:436:3:-;1417:10;;1413:330;;-1:-1:-1;;1447:6:3;:27;1443:290;;1512:38;;;;;1544:4;1512:38;;;1000:74:231;1494:15:3;;1512:23;;;;;;973:18:231;;1512:38:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1494:56;;1568;1598:5;1606:8;1616:7;1568:22;:56::i;:::-;1476:163;1313:436;;;:::o;1443:290::-;1663:55;1693:5;1701:8;1711:6;1663:22;:55::i;:::-;1313:436;;;:::o;3377:227::-;3453:7;3476:21;;;;;:48;;-1:-1:-1;3501:23:3;;;528:42;3501:23;3476:48;3472:76;;;-1:-1:-1;3533:15:3;;;;3526:22;;3472:76;3565:32;;;;;:23;1018:55:231;;;3565:32:3;;;1000:74:231;3565:23:3;;;;;973:18:231;;3565:32:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3558:39;3377:227;-1:-1:-1;;;3377:227:3:o;4479:325::-;4601:24;;;;:17;:24;;;;;;;;;;;:36;;;;;;;;;;;;4596:202;;4653:77;4692:5;4700:10;-1:-1:-1;;4653:31:3;:77::i;:::-;4744:24;;;;:17;:24;;;;;;;;;;;:36;;;;;;;;;:43;;;;4783:4;4744:43;;;4596:202;4479:325;;:::o;2538:412::-;2637:1;2628:6;:10;:45;;;;;2667:6;2642:21;:31;;2628:45;2624:320;;;2690:12;2704:23;2731:8;:13;;2752:6;2731:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2689:74;;;;2782:7;2777:157;;2890:10;2884:17;2879:2;2867:10;2863:19;2856:46;1219:160:208;1328:43;;1343:14;2998:55:231;;;1328:43:208;;;2980:74:231;3070:18;;;3063:34;;;1301:71:208;;1321:5;;1343:14;;;;;2953:18:231;;1328:43:208;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1301:19;:71::i;3146:225::-;3265:39;;;;;3289:4;3265:39;;;3282:74:231;3265:15:208;3392:55:231;;;3372:18;;;3365:83;3242:20:208;;3265:15;;;;;;3255:18:231;;3265:39:208;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3242:62;-1:-1:-1;3314:50:208;3327:5;3334:7;3343:20;3358:5;3242:62;3343:20;:::i;:::-;3314:12;:50::i;8370:720::-;8450:18;8478:19;8616:4;8613:1;8606:4;8600:11;8593:4;8587;8583:15;8580:1;8573:5;8566;8561:60;8673:7;8663:176;;8717:4;8711:11;8762:16;8759:1;8754:3;8739:40;8808:16;8803:3;8796:29;8663:176;-1:-1:-1;;8916:1:208;8910:8;8866:16;;-1:-1:-1;8942:15:208;;:68;;8994:11;9009:1;8994:16;;8942:68;;;8960:26;;;;:31;8942:68;8938:146;;;9033:40;;;;;1030:42:231;1018:55;;9033:40:208;;;1000:74:231;973:18;;9033:40:208;854:226:231;5084:380:208;5199:47;;;5214:13;2998:55:231;;5199:47:208;;;2980:74:231;3070:18;;;;3063:34;;;5199:47:208;;;;;;;;;;2953:18:231;;;;5199:47:208;;;;;;;;;;;;;;5262:44;5214:13;5199:47;5262:23;:44::i;:::-;5257:201;;5349:43;;5364:13;2998:55:231;;;5349:43:208;;;2980:74:231;5389:1:208;3070:18:231;;;3063:34;5322:71:208;;5342:5;;5364:13;;;;;2953:18:231;;5349:43:208;2806:297:231;5322:71:208;5407:40;5427:5;5434:12;5407:19;:40::i;9592:480::-;9675:4;9691:12;9713:18;9741:19;9875:4;9872:1;9865:4;9859:11;9852:4;9846;9842:15;9839:1;9832:5;9825;9820:60;9809:71;;9907:16;9893:30;;9957:1;9951:8;9936:23;;9985:7;:80;;;;-1:-1:-1;9997:15:208;;:67;;10048:11;10063:1;10048:16;9997:67;;;10044:1;10023:5;10015:26;;;:30;9997:67;9978:87;9592:480;-1:-1:-1;;;;;;9592:480:208:o;14:196:231:-;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:260::-;283:6;291;344:2;332:9;323:7;319:23;315:32;312:52;;;360:1;357;350:12;312:52;383:29;402:9;383:29;:::i;:::-;373:39;;431:38;465:2;454:9;450:18;431:38;:::i;:::-;421:48;;215:260;;;;;:::o;1085:334::-;1162:6;1170;1178;1231:2;1219:9;1210:7;1206:23;1202:32;1199:52;;;1247:1;1244;1237:12;1199:52;1270:29;1289:9;1270:29;:::i;:::-;1260:39;;1318:38;1352:2;1341:9;1337:18;1318:38;:::i;:::-;1308:48;;1375:38;1409:2;1398:9;1394:18;1375:38;:::i;:::-;1365:48;;1085:334;;;;;:::o;1424:449::-;1510:6;1518;1526;1534;1587:3;1575:9;1566:7;1562:23;1558:33;1555:53;;;1604:1;1601;1594:12;1555:53;1627:29;1646:9;1627:29;:::i;:::-;1617:39;;1675:38;1709:2;1698:9;1694:18;1675:38;:::i;:::-;1665:48;;1732:38;1766:2;1755:9;1751:18;1732:38;:::i;:::-;1424:449;;;;-1:-1:-1;1722:48:231;;1839:2;1824:18;1811:32;;-1:-1:-1;;1424:449:231:o;1878:524::-;1973:6;1981;1989;1997;2005;2058:3;2046:9;2037:7;2033:23;2029:33;2026:53;;;2075:1;2072;2065:12;2026:53;2098:29;2117:9;2098:29;:::i;:::-;2088:39;;2146:38;2180:2;2169:9;2165:18;2146:38;:::i;:::-;2136:48;;2203:38;2237:2;2226:9;2222:18;2203:38;:::i;:::-;2193:48;;2260:38;2294:2;2283:9;2279:18;2260:38;:::i;:::-;1878:524;;;;-1:-1:-1;1878:524:231;;2367:3;2352:19;2339:33;;1878:524;-1:-1:-1;;1878:524:231:o;2617:184::-;2687:6;2740:2;2728:9;2719:7;2715:23;2711:32;2708:52;;;2756:1;2753;2746:12;2708:52;-1:-1:-1;2779:16:231;;2617:184;-1:-1:-1;2617:184:231:o;3459:279::-;3524:9;;;3545:10;;;3542:190;;;3588:77;3585:1;3578:88;3689:4;3686:1;3679:15;3717:4;3714:1;3707:15",
    linkReferences: {},
    immutableReferences: {
      "808": [
        {
          start: 355,
          length: 32,
        },
      ],
    },
  },
  methodIdentifiers: {
    "NATIVE_ADDRESS()": "d5bcb610",
    "WETH()": "ad5c4648",
    "ZERO_ADDRESS()": "538ba4f9",
    "isApprovedAddress(address,address)": "008fbb48",
    "repay(address,address,address,address,uint256)": "ebc27b08",
    "repayNative(address,address,address,uint256)": "86f644f0",
    "supply(address,address,address)": "7369a22e",
    "supplyNative(address,address)": "4430bcc3",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"weth_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CantRepaySelf","type":"error"},{"inputs":[{"internalType":"uint256","name":"failureCode","type":"uint256"}],"name":"MintFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"failureCode","type":"uint256"}],"name":"RepayFailed","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"inputs":[],"name":"ZeroAmount","type":"error"},{"inputs":[],"name":"NATIVE_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WETH","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ZERO_ADDRESS","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"isApprovedAddress","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"underlying","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"address","name":"onbehalfOf","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"repay","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"borrower","type":"address"},{"internalType":"address","name":"onbehalfOf","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"repayNative","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"underlying","type":"address"},{"internalType":"address","name":"onbehalfOf","type":"address"}],"name":"supply","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"cToken","type":"address"},{"internalType":"address","name":"onbehalfOf","type":"address"}],"name":"supplyNative","outputs":[{"internalType":"uint256","name":"result","type":"uint256"}],"stateMutability":"payable","type":"function"}],"devdoc":{"details":"Inherits from FlashAccountAdapterBase to manage flash account operations.","errors":{"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{"constructor":{"params":{"weth_":"The address of the WETH token."}},"repay(address,address,address,address,uint256)":{"params":{"amount":"The amount to repay (use type(uint256).max for full repayment)","borrower":"The address whose debt is being repaid","cToken":"The collateral token address (e.g., cUSDC)","onbehalfOf":"The address that will receive any excess tokens","underlying":"The underlying asset address (e.g., USDC)"},"returns":{"result":"0 if successful"}},"repayNative(address,address,address,uint256)":{"params":{"amount":"The amount to repay (use type(uint256).max for full repayment)","borrower":"The address whose debt is being repaid","cToken":"The collateral token address (e.g., cETH)","onbehalfOf":"The address that will receive any excess tokens"},"returns":{"result":"0 if successful"}},"supply(address,address,address)":{"params":{"cToken":"The cToken address to mint (e.g., cUSDC)","onbehalfOf":"The address that will receive the cTokens","underlying":"The underlying token address (e.g., USDC)"},"returns":{"result":"0 if successful, error code otherwise"}},"supplyNative(address,address)":{"params":{"cToken":"The cToken address to mint (e.g., cETH)","onbehalfOf":"The address that will receive the cTokens"},"returns":{"result":"0 if successful, error code otherwise"}}},"title":"CompoundV2Adapter","version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Constructor for the CompoundV2Adapter contract."},"repay(address,address,address,address,uint256)":{"notice":"Repay a borrow with ERC20 tokens"},"repayNative(address,address,address,uint256)":{"notice":"Repay a borrow with native tokens (ETH)"},"supply(address,address,address)":{"notice":"Supply ERC20 assets to CompoundV2"},"supplyNative(address,address)":{"notice":"Supply native tokens (ETH/AVAX) to CompoundV2"}},"notice":"This contract allows users to supply and repay assets on Compound V2.","version":1}},"settings":{"compilationTarget":{"contracts/1delta/flash-account/adapters/lending/compoundV2/CompoundV2Adapter.sol":"CompoundV2Adapter"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol":{"keccak256":"0x15b0bd8882ceeee55ec10f378d467cedc3bb93fdd7365266358f775d815f91dd","license":"MIT","urls":["bzz-raw://d90e6c09d63d176ccdac0734c3bffb88df776f0e56897dc484143142f24c16bf","dweb:/ipfs/QmVSCEPJva3ezJyRaCb7PbVmHTduJoDjw6UWc2p3MnbXo5"]},"contracts/1delta/flash-account/adapters/lending/compoundV2/CompoundV2Adapter.sol":{"keccak256":"0x011af6684b3c6e6739bae9b1a3653230901f8a7501f758c185f55221d8100830","license":"MIT","urls":["bzz-raw://7031f3ac3a9a28f2fce6282526a900159aea0797d5cf59d00d675bc861173564","dweb:/ipfs/QmWTVFqnB51faj2JL1kufib9wp64A8DbMjp1CJUFw9QZkB"]},"contracts/1delta/flash-account/adapters/lending/compoundV2/interfaces/IcToken.sol":{"keccak256":"0x3cb5960dce9194ff8bcd587319795a576670a7bb679a6aad3c1f963d8538a0ee","license":"MIT","urls":["bzz-raw://4b5f38293183a49a3c55a3085a39c8585802f7e65a6f5f68dbc6c4e7968e52ab","dweb:/ipfs/QmUbRSHGy93VqNpDEucQc1NpL5xrYeSnPWvzFXViZmDMon"]},"contracts/1delta/flash-account/common/FlashAccountError.sol":{"keccak256":"0x766fe156ebe6cc9c128f746007bb2775b8bb2835d0ef0b4f046fbad8bb9879f8","license":"MIT","urls":["bzz-raw://42203fac4614cc433d9e1207be392e8b9b4e504270cf05263c5c695976260363","dweb:/ipfs/QmUyNtb961G97JB5u4yLmaZdC8JNASMrbtvf8ypgf3FpgM"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"keccak256":"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7","license":"MIT","urls":["bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b","dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"keccak256":"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724","license":"MIT","urls":["bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a","dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"keccak256":"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c","license":"MIT","urls":["bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba","dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7","license":"MIT","urls":["bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db","dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"]},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e","license":"MIT","urls":["bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15","dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","license":"MIT","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "weth_",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          type: "error",
          name: "CantRepaySelf",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "failureCode",
              type: "uint256",
            },
          ],
          type: "error",
          name: "MintFailed",
        },
        {
          inputs: [
            {
              internalType: "uint256",
              name: "failureCode",
              type: "uint256",
            },
          ],
          type: "error",
          name: "RepayFailed",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address",
            },
          ],
          type: "error",
          name: "SafeERC20FailedOperation",
        },
        {
          inputs: [],
          type: "error",
          name: "TransferFailed",
        },
        {
          inputs: [],
          type: "error",
          name: "ZeroAddress",
        },
        {
          inputs: [],
          type: "error",
          name: "ZeroAmount",
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "NATIVE_ADDRESS",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "WETH",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ZERO_ADDRESS",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "isApprovedAddress",
          outputs: [
            {
              internalType: "bool",
              name: "",
              type: "bool",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "cToken",
              type: "address",
            },
            {
              internalType: "address",
              name: "underlying",
              type: "address",
            },
            {
              internalType: "address",
              name: "borrower",
              type: "address",
            },
            {
              internalType: "address",
              name: "onbehalfOf",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "repay",
          outputs: [
            {
              internalType: "uint256",
              name: "result",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "cToken",
              type: "address",
            },
            {
              internalType: "address",
              name: "borrower",
              type: "address",
            },
            {
              internalType: "address",
              name: "onbehalfOf",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "repayNative",
          outputs: [
            {
              internalType: "uint256",
              name: "result",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "cToken",
              type: "address",
            },
            {
              internalType: "address",
              name: "underlying",
              type: "address",
            },
            {
              internalType: "address",
              name: "onbehalfOf",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "supply",
          outputs: [
            {
              internalType: "uint256",
              name: "result",
              type: "uint256",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "cToken",
              type: "address",
            },
            {
              internalType: "address",
              name: "onbehalfOf",
              type: "address",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "supplyNative",
          outputs: [
            {
              internalType: "uint256",
              name: "result",
              type: "uint256",
            },
          ],
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          constructor: {
            params: {
              weth_: "The address of the WETH token.",
            },
          },
          "repay(address,address,address,address,uint256)": {
            params: {
              amount:
                "The amount to repay (use type(uint256).max for full repayment)",
              borrower: "The address whose debt is being repaid",
              cToken: "The collateral token address (e.g., cUSDC)",
              onbehalfOf: "The address that will receive any excess tokens",
              underlying: "The underlying asset address (e.g., USDC)",
            },
            returns: {
              result: "0 if successful",
            },
          },
          "repayNative(address,address,address,uint256)": {
            params: {
              amount:
                "The amount to repay (use type(uint256).max for full repayment)",
              borrower: "The address whose debt is being repaid",
              cToken: "The collateral token address (e.g., cETH)",
              onbehalfOf: "The address that will receive any excess tokens",
            },
            returns: {
              result: "0 if successful",
            },
          },
          "supply(address,address,address)": {
            params: {
              cToken: "The cToken address to mint (e.g., cUSDC)",
              onbehalfOf: "The address that will receive the cTokens",
              underlying: "The underlying token address (e.g., USDC)",
            },
            returns: {
              result: "0 if successful, error code otherwise",
            },
          },
          "supplyNative(address,address)": {
            params: {
              cToken: "The cToken address to mint (e.g., cETH)",
              onbehalfOf: "The address that will receive the cTokens",
            },
            returns: {
              result: "0 if successful, error code otherwise",
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {
          constructor: {
            notice: "Constructor for the CompoundV2Adapter contract.",
          },
          "repay(address,address,address,address,uint256)": {
            notice: "Repay a borrow with ERC20 tokens",
          },
          "repayNative(address,address,address,uint256)": {
            notice: "Repay a borrow with native tokens (ETH)",
          },
          "supply(address,address,address)": {
            notice: "Supply ERC20 assets to CompoundV2",
          },
          "supplyNative(address,address)": {
            notice: "Supply native tokens (ETH/AVAX) to CompoundV2",
          },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "contracts/1delta/flash-account/adapters/lending/compoundV2/CompoundV2Adapter.sol":
          "CompoundV2Adapter",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "contracts/1delta/flash-account/adapters/FlashAccountAdapterBase.sol": {
        keccak256:
          "0x15b0bd8882ceeee55ec10f378d467cedc3bb93fdd7365266358f775d815f91dd",
        urls: [
          "bzz-raw://d90e6c09d63d176ccdac0734c3bffb88df776f0e56897dc484143142f24c16bf",
          "dweb:/ipfs/QmVSCEPJva3ezJyRaCb7PbVmHTduJoDjw6UWc2p3MnbXo5",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/adapters/lending/compoundV2/CompoundV2Adapter.sol":
        {
          keccak256:
            "0x011af6684b3c6e6739bae9b1a3653230901f8a7501f758c185f55221d8100830",
          urls: [
            "bzz-raw://7031f3ac3a9a28f2fce6282526a900159aea0797d5cf59d00d675bc861173564",
            "dweb:/ipfs/QmWTVFqnB51faj2JL1kufib9wp64A8DbMjp1CJUFw9QZkB",
          ],
          license: "MIT",
        },
      "contracts/1delta/flash-account/adapters/lending/compoundV2/interfaces/IcToken.sol":
        {
          keccak256:
            "0x3cb5960dce9194ff8bcd587319795a576670a7bb679a6aad3c1f963d8538a0ee",
          urls: [
            "bzz-raw://4b5f38293183a49a3c55a3085a39c8585802f7e65a6f5f68dbc6c4e7968e52ab",
            "dweb:/ipfs/QmUbRSHGy93VqNpDEucQc1NpL5xrYeSnPWvzFXViZmDMon",
          ],
          license: "MIT",
        },
      "contracts/1delta/flash-account/common/FlashAccountError.sol": {
        keccak256:
          "0x766fe156ebe6cc9c128f746007bb2775b8bb2835d0ef0b4f046fbad8bb9879f8",
        urls: [
          "bzz-raw://42203fac4614cc433d9e1207be392e8b9b4e504270cf05263c5c695976260363",
          "dweb:/ipfs/QmUyNtb961G97JB5u4yLmaZdC8JNASMrbtvf8ypgf3FpgM",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
        keccak256:
          "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        urls: [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
        keccak256:
          "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        urls: [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
        keccak256:
          "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        urls: [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256:
          "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        urls: [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        keccak256:
          "0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e",
        urls: [
          "bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15",
          "dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256:
          "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        urls: [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL",
        ],
        license: "MIT",
      },
    },
    version: 1,
  },
  id: 7,
} as const as Abi;
export type { CompoundV2AdapterAbiType } from "./CompoundV2Adapter";
export { getCompoundV2AdapterContract } from "./CompoundV2Adapter";

export const FlashAccountFactoryAbi = {
  abi: [
    {
      type: "constructor",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address",
        },
        {
          name: "accountBeacon",
          type: "address",
          internalType: "address",
        },
        {
          name: "entryPoint",
          type: "address",
          internalType: "contract IEntryPoint",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "receive",
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "ACCOUNT_BEACON",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "ENTRY_POINT",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "contract IEntryPoint",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "acceptOwnership",
      inputs: [],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "addStake",
      inputs: [
        {
          name: "unstakeDelay",
          type: "uint32",
          internalType: "uint32",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "payable",
    },
    {
      type: "function",
      name: "createAccount",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address",
        },
        {
          name: "salt",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [
        {
          name: "account",
          type: "address",
          internalType: "contract FlashAccount",
        },
      ],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "getAccountImplementation",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "getAddress",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address",
        },
        {
          name: "salt",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "owner",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "pendingOwner",
      inputs: [],
      outputs: [
        {
          name: "",
          type: "address",
          internalType: "address",
        },
      ],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "renounceOwnership",
      inputs: [],
      outputs: [],
      stateMutability: "view",
    },
    {
      type: "function",
      name: "transferOwnership",
      inputs: [
        {
          name: "newOwner",
          type: "address",
          internalType: "address",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "unlockStake",
      inputs: [],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "withdraw",
      inputs: [
        {
          name: "to",
          type: "address",
          internalType: "address payable",
        },
        {
          name: "token",
          type: "address",
          internalType: "address",
        },
        {
          name: "amount",
          type: "uint256",
          internalType: "uint256",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "function",
      name: "withdrawStake",
      inputs: [
        {
          name: "to",
          type: "address",
          internalType: "address payable",
        },
      ],
      outputs: [],
      stateMutability: "nonpayable",
    },
    {
      type: "event",
      name: "OwnershipTransferStarted",
      inputs: [
        {
          name: "previousOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "newOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "event",
      name: "OwnershipTransferred",
      inputs: [
        {
          name: "previousOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
        {
          name: "newOwner",
          type: "address",
          indexed: true,
          internalType: "address",
        },
      ],
      anonymous: false,
    },
    {
      type: "error",
      name: "InvalidAction",
      inputs: [],
    },
    {
      type: "error",
      name: "InvalidEntryPoint",
      inputs: [
        {
          name: "entryPoint",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "OwnableInvalidOwner",
      inputs: [
        {
          name: "owner",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "OwnableUnauthorizedAccount",
      inputs: [
        {
          name: "account",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "SafeERC20FailedOperation",
      inputs: [
        {
          name: "token",
          type: "address",
          internalType: "address",
        },
      ],
    },
    {
      type: "error",
      name: "TransferFailed",
      inputs: [],
    },
    {
      type: "error",
      name: "ZeroAddressNotAllowed",
      inputs: [],
    },
  ],
  bytecode: {
    object:
      "0x60c060405234801561000f575f5ffd5b506040516110ff3803806110ff83398101604081905261002e9161021b565b826001600160a01b03811661005d57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61006681610088565b50610070816100a4565b6001600160a01b0391821660a0521660805250610265565b600180546001600160a01b03191690556100a1816100dd565b50565b6100b58163122a0e9b60e31b61012c565b6100a15760405163075b76fd60e21b81526001600160a01b0382166004820152602401610054565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6101368361014e565b801561014757506101478383610181565b9392505050565b5f610160826301ffc9a760e01b610181565b801561017b5750610179826001600160e01b0319610181565b155b92915050565b6040516001600160e01b0319821660248201525f90819060440160408051601f19818403018152919052602080820180516001600160e01b03166301ffc9a760e01b17815282519293505f9283928392909183918a617530fa92503d91505f5190508280156101f1575060208210155b80156101fc57505f81115b979650505050505050565b6001600160a01b03811681146100a1575f5ffd5b5f5f5f6060848603121561022d575f5ffd5b835161023881610207565b602085015190935061024981610207565b604085015190925061025a81610207565b809150509250925092565b60805160a051610e506102af5f395f818160f8015281816102d101528181610455015261049701525f81816101e5015281816105310152818161064601526108a10152610e505ff3fe6080604052600436106100dc575f3560e01c80639d825bc51161007c578063d9caed1211610057578063d9caed121461024e578063e30c39781461026d578063f2fde38b14610297578063fbb1c3d4146102b6575f5ffd5b80639d825bc514610207578063bb9fe6bf1461021b578063c23a5cea1461022f575f5ffd5b806379ba5097116100b757806379ba5097146101785780638cb84e181461018c5780638da5cb5b146101ab57806394430fa5146101d4575f5ffd5b80631ada1701146100e75780635fbfb9cf14610143578063715018a614610162575f5ffd5b366100e357005b5f5ffd5b3480156100f2575f5ffd5b5061011a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561014e575f5ffd5b5061011a61015d366004610d58565b6102c9565b34801561016d575f5ffd5b50610176610399565b005b348015610183575f5ffd5b506101766103d3565b348015610197575f5ffd5b5061011a6101a6366004610d58565b61044f565b3480156101b6575f5ffd5b505f5473ffffffffffffffffffffffffffffffffffffffff1661011a565b3480156101df575f5ffd5b5061011a7f000000000000000000000000000000000000000000000000000000000000000081565b348015610212575f5ffd5b5061011a610494565b348015610226575f5ffd5b50610176610527565b34801561023a575f5ffd5b50610176610249366004610d82565b6105ac565b348015610259575f5ffd5b50610176610268366004610d9d565b6106a0565b348015610278575f5ffd5b5060015473ffffffffffffffffffffffffffffffffffffffff1661011a565b3480156102a2575f5ffd5b506101766102b1366004610d82565b6107b6565b6101766102c4366004610ddb565b610865565b5f5f5f6103087f000000000000000000000000000000000000000000000000000000000000000061030387875f9182526020526040902090565b610914565b9150915080925081610391576040517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015284169063c4d66de8906024015f604051808303815f87803b15801561037a575f5ffd5b505af115801561038c573d5f5f3e3d5ffd5b505050505b505092915050565b6103a161092c565b6040517f4a7f394f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154339073ffffffffffffffffffffffffffffffffffffffff168114610443576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b61044c81610980565b50565b5f61048d7f000000000000000000000000000000000000000000000000000000000000000061048785855f9182526020526040902090565b306109b1565b9392505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105229190610dff565b905090565b61052f61092c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610594575f5ffd5b505af11580156105a6573d5f5f3e3d5ffd5b50505050565b6105b461092c565b73ffffffffffffffffffffffffffffffffffffffff8116610601576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fc23a5cea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea906024015f604051808303815f87803b158015610687575f5ffd5b505af1158015610699573d5f5f3e3d5ffd5b5050505050565b6106a861092c565b73ffffffffffffffffffffffffffffffffffffffff83166106f5576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166107a6575f8373ffffffffffffffffffffffffffffffffffffffff16476040515f6040518083038185875af1925050503d805f8114610766576040519150601f19603f3d011682016040523d82523d5f602084013e61076b565b606091505b50509050806105a6576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107b1828483610a79565b505050565b6107be61092c565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000090911681179091556108205f5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b61086d61092c565b6040517f0396cb6000000000000000000000000000000000000000000000000000000000815263ffffffff831660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630396cb609083906024015f604051808303818588803b1580156108f9575f5ffd5b505af115801561090b573d5f5f3e3d5ffd5b50505050505050565b5f5f6109215f8585610b06565b915091509250929050565b5f5473ffffffffffffffffffffffffffffffffffffffff16331461097e576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161043a565b565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905561044c81610c05565b604080517f3d50545afa361460525736515af43d600060013e6052573d6001fd5b3d6001f360609081527f527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b351383527b60195155f3363d3d373d3d363d602036600436635c60da1b60e01b3660205273ffffffffffffffffffffffffffffffffffffffff86167c60573d8160223d39730000000000000000000000000000000000000000176004526079600720919092525f91829052610a70818585610c79565b95945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526107b1908490610c98565b5f5f6040517f3d50545afa361460525736515af43d600060013e6052573d6001fd5b3d6001f36060527f527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35136040527b60195155f3363d3d373d3d363d602036600436635c60da1b60e01b366020528460601b60601c6860573d8160223d397360a01b17600452607960072060358201523060581b815260ff8153836015820152605581209150813b610bd157836079600788f5915081610bcc5763301164255f526004601cfd5b610bf4565b600192508515610bf4575f385f3889865af1610bf45763b12d13eb5f526004601cfd5b80604052505f606052935093915050565b5f805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60ff5f5350603592835260601b60015260155260555f908120915290565b5f5f60205f8451602086015f885af180610cb7576040513d5f823e3d81fd5b50505f513d91508115610cce578060011415610ce8565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156105a6576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161043a565b73ffffffffffffffffffffffffffffffffffffffff8116811461044c575f5ffd5b5f5f60408385031215610d69575f5ffd5b8235610d7481610d37565b946020939093013593505050565b5f60208284031215610d92575f5ffd5b813561048d81610d37565b5f5f5f60608486031215610daf575f5ffd5b8335610dba81610d37565b92506020840135610dca81610d37565b929592945050506040919091013590565b5f5f60408385031215610dec575f5ffd5b823563ffffffff81168114610d74575f5ffd5b5f60208284031215610e0f575f5ffd5b815161048d81610d3756fea26469706673582212207b6e5de8df127a35fc0e48a7059788d1baba0c90f24dc2f0eb6271dd62d3fba064736f6c634300081c0033",
    sourceMap:
      "832:3016:2:-:0;;;940:225;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1022:5;-1:-1:-1;;;;;1273:26:200;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:200;;1350:1;1322:31;;;841:51:231;814:18;;1322:31:200;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;1039:45:2::1;1072:10:::0;1039:24:::1;:45::i;:::-;-1:-1:-1::0;;;;;1094:30:2;;::::1;;::::0;1134:24:::1;;::::0;-1:-1:-1;832:3016:2;;2011:153:201;2100:13;2093:20;;-1:-1:-1;;;;;;2093:20:201;;;2123:34;2148:8;2123:24;:34::i;:::-;2011:153;:::o;2819:265:10:-;2909:90;2949:17;-1:-1:-1;;;2909:31:10;:90::i;:::-;2904:174;;3022:45;;-1:-1:-1;;;3022:45:10;;-1:-1:-1;;;;;859:32:231;;3022:45:10;;;841:51:231;814:18;;3022:45:10;695:203:231;2912:187:200;2985:16;3004:6;;-1:-1:-1;;;;;3020:17:200;;;-1:-1:-1;;;;;;3020:17:200;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;1364:283:218:-;1451:4;1559:23;1574:7;1559:14;:23::i;:::-;:81;;;;-1:-1:-1;1586:54:218;1619:7;1628:11;1586:32;:54::i;:::-;1552:88;1364:283;-1:-1:-1;;;1364:283:218:o;719:427::-;783:4;991:68;1024:7;-1:-1:-1;;;991:32:218;:68::i;:::-;:148;;;;-1:-1:-1;1076:63:218;1109:7;-1:-1:-1;;;;;;1076:32:218;:63::i;:::-;1075:64;991:148;972:167;719:427;-1:-1:-1;;719:427:218:o;4403:648::-;4574:56;;-1:-1:-1;;;;;;1065:33:231;;4574:56:218;;;1047:52:231;4505:4:218;;;;1020:18:231;;4574:56:218;;;-1:-1:-1;;4574:56:218;;;;;;;;;;;;;;;-1:-1:-1;;;;;4574:56:218;-1:-1:-1;;;4574:56:218;;;4854:20;;4574:56;;-1:-1:-1;;;;;;;4574:56:218;;-1:-1:-1;;4819:7:218;4812:5;4801:86;4790:97;;4914:16;4900:30;;4964:4;4958:11;4943:26;;4996:7;:29;;;;;5021:4;5007:10;:18;;4996:29;:48;;;;;5043:1;5029:11;:15;4996:48;4989:55;4403:648;-1:-1:-1;;;;;;;4403:648:218:o;14:131:231:-;-1:-1:-1;;;;;89:31:231;;79:42;;69:70;;135:1;132;125:12;150:540;259:6;267;275;328:2;316:9;307:7;303:23;299:32;296:52;;;344:1;341;334:12;296:52;376:9;370:16;395:31;420:5;395:31;:::i;:::-;495:2;480:18;;474:25;445:5;;-1:-1:-1;508:33:231;474:25;508:33;:::i;:::-;612:2;597:18;;591:25;560:7;;-1:-1:-1;625:33:231;591:25;625:33;:::i;:::-;677:7;667:17;;;150:540;;;;;:::o;903:202::-;832:3016:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
    linkReferences: {},
  },
  deployedBytecode: {
    object:
      "0x6080604052600436106100dc575f3560e01c80639d825bc51161007c578063d9caed1211610057578063d9caed121461024e578063e30c39781461026d578063f2fde38b14610297578063fbb1c3d4146102b6575f5ffd5b80639d825bc514610207578063bb9fe6bf1461021b578063c23a5cea1461022f575f5ffd5b806379ba5097116100b757806379ba5097146101785780638cb84e181461018c5780638da5cb5b146101ab57806394430fa5146101d4575f5ffd5b80631ada1701146100e75780635fbfb9cf14610143578063715018a614610162575f5ffd5b366100e357005b5f5ffd5b3480156100f2575f5ffd5b5061011a7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561014e575f5ffd5b5061011a61015d366004610d58565b6102c9565b34801561016d575f5ffd5b50610176610399565b005b348015610183575f5ffd5b506101766103d3565b348015610197575f5ffd5b5061011a6101a6366004610d58565b61044f565b3480156101b6575f5ffd5b505f5473ffffffffffffffffffffffffffffffffffffffff1661011a565b3480156101df575f5ffd5b5061011a7f000000000000000000000000000000000000000000000000000000000000000081565b348015610212575f5ffd5b5061011a610494565b348015610226575f5ffd5b50610176610527565b34801561023a575f5ffd5b50610176610249366004610d82565b6105ac565b348015610259575f5ffd5b50610176610268366004610d9d565b6106a0565b348015610278575f5ffd5b5060015473ffffffffffffffffffffffffffffffffffffffff1661011a565b3480156102a2575f5ffd5b506101766102b1366004610d82565b6107b6565b6101766102c4366004610ddb565b610865565b5f5f5f6103087f000000000000000000000000000000000000000000000000000000000000000061030387875f9182526020526040902090565b610914565b9150915080925081610391576040517fc4d66de800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015284169063c4d66de8906024015f604051808303815f87803b15801561037a575f5ffd5b505af115801561038c573d5f5f3e3d5ffd5b505050505b505092915050565b6103a161092c565b6040517f4a7f394f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154339073ffffffffffffffffffffffffffffffffffffffff168114610443576040517f118cdaa700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b61044c81610980565b50565b5f61048d7f000000000000000000000000000000000000000000000000000000000000000061048785855f9182526020526040902090565b306109b1565b9392505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105229190610dff565b905090565b61052f61092c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610594575f5ffd5b505af11580156105a6573d5f5f3e3d5ffd5b50505050565b6105b461092c565b73ffffffffffffffffffffffffffffffffffffffff8116610601576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fc23a5cea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea906024015f604051808303815f87803b158015610687575f5ffd5b505af1158015610699573d5f5f3e3d5ffd5b5050505050565b6106a861092c565b73ffffffffffffffffffffffffffffffffffffffff83166106f5576040517f8579befe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166107a6575f8373ffffffffffffffffffffffffffffffffffffffff16476040515f6040518083038185875af1925050503d805f8114610766576040519150601f19603f3d011682016040523d82523d5f602084013e61076b565b606091505b50509050806105a6576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107b1828483610a79565b505050565b6107be61092c565b6001805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff000000000000000000000000000000000000000090911681179091556108205f5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b61086d61092c565b6040517f0396cb6000000000000000000000000000000000000000000000000000000000815263ffffffff831660048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690630396cb609083906024015f604051808303818588803b1580156108f9575f5ffd5b505af115801561090b573d5f5f3e3d5ffd5b50505050505050565b5f5f6109215f8585610b06565b915091509250929050565b5f5473ffffffffffffffffffffffffffffffffffffffff16331461097e576040517f118cdaa700000000000000000000000000000000000000000000000000000000815233600482015260240161043a565b565b600180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905561044c81610c05565b604080517f3d50545afa361460525736515af43d600060013e6052573d6001fd5b3d6001f360609081527f527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b351383527b60195155f3363d3d373d3d363d602036600436635c60da1b60e01b3660205273ffffffffffffffffffffffffffffffffffffffff86167c60573d8160223d39730000000000000000000000000000000000000000176004526079600720919092525f91829052610a70818585610c79565b95945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526107b1908490610c98565b5f5f6040517f3d50545afa361460525736515af43d600060013e6052573d6001fd5b3d6001f36060527f527fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35136040527b60195155f3363d3d373d3d363d602036600436635c60da1b60e01b366020528460601b60601c6860573d8160223d397360a01b17600452607960072060358201523060581b815260ff8153836015820152605581209150813b610bd157836079600788f5915081610bcc5763301164255f526004601cfd5b610bf4565b600192508515610bf4575f385f3889865af1610bf45763b12d13eb5f526004601cfd5b80604052505f606052935093915050565b5f805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f60ff5f5350603592835260601b60015260155260555f908120915290565b5f5f60205f8451602086015f885af180610cb7576040513d5f823e3d81fd5b50505f513d91508115610cce578060011415610ce8565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156105a6576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161043a565b73ffffffffffffffffffffffffffffffffffffffff8116811461044c575f5ffd5b5f5f60408385031215610d69575f5ffd5b8235610d7481610d37565b946020939093013593505050565b5f60208284031215610d92575f5ffd5b813561048d81610d37565b5f5f5f60608486031215610daf575f5ffd5b8335610dba81610d37565b92506020840135610dca81610d37565b929592945050506040919091013590565b5f5f60408385031215610dec575f5ffd5b823563ffffffff81168114610d74575f5ffd5b5f60208284031215610e0f575f5ffd5b815161048d81610d3756fea26469706673582212207b6e5de8df127a35fc0e48a7059788d1baba0c90f24dc2f0eb6271dd62d3fba064736f6c634300081c0033",
    sourceMap:
      "832:3016:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;894:39;;;;;;;;;;;;;;;;;;190:42:231;178:55;;;160:74;;148:2;133:18;894:39:2;;;;;;;1818:404;;;;;;;;;;-1:-1:-1;1818:404:2;;;;;:::i;:::-;;:::i;2567:99:10:-;;;;;;;;;;;;;:::i;:::-;;2244:229:201;;;;;;;;;;;;;:::i;2587:253:2:-;;;;;;;;;;-1:-1:-1;2587:253:2;;;;;:::i;:::-;;:::i;1638:85:200:-;;;;;;;;;;-1:-1:-1;1684:7:200;1710:6;;;1638:85;;528:40:10;;;;;;;;;;;;;;;2969:132:2;;;;;;;;;;;;;:::i;1255:84:10:-;;;;;;;;;;;;;:::i;1488:194::-;;;;;;;;;;-1:-1:-1;1488:194:10;;;;;:::i;:::-;;:::i;2030:462::-;;;;;;;;;;-1:-1:-1;2030:462:10;;;;;:::i;:::-;;:::i;1232:99:201:-;;;;;;;;;;-1:-1:-1;1311:13:201;;;;1232:99;;1649:178;;;;;;;;;;-1:-1:-1;1649:178:201;;;;;:::i;:::-;;:::i;1006:148:10:-;;;;;;:::i;:::-;;:::i;1818:404:2:-;1888:20;1921;1943:22;1981:94;2029:14;2045:29;2062:5;2069:4;3584:20;3730:19;;;3769:4;3762:18;3825:4;3809:21;;;3506:340;2045:29;1981:47;:94::i;:::-;1920:155;;;;2117:14;2086:47;;2149:15;2144:72;;2180:25;;;;;:18;178:55:231;;;2180:25:2;;;160:74:231;2180:18:2;;;;;133::231;;2180:25:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2144:72;1910:312;;1818:404;;;;:::o;2567:99:10:-;1531:13:200;:11;:13::i;:::-;2644:15:10::1;;;;;;;;;;;;;;2244:229:201::0;1311:13;;735:10:210;;2339:24:201;1311:13;2339:24;;2335:96;;2386:34;;;;;190:42:231;178:55;;2386:34:201;;;160:74:231;133:18;;2386:34:201;;;;;;;;2335:96;2440:26;2459:6;2440:18;:26::i;:::-;2286:187;2244:229::o;2587:253:2:-;2659:7;2685:148;2762:14;2779:29;2796:5;2803:4;3584:20;3730:19;;;3769:4;3762:18;3825:4;3809:21;;;3506:340;2779:29;2818:4;2685:55;:148::i;:::-;2678:155;2587:253;-1:-1:-1;;;2587:253:2:o;2969:132::-;3028:7;3062:14;3054:38;;;:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3047:47;;2969:132;:::o;1255:84:10:-;1531:13:200;:11;:13::i;:::-;1307:11:10::1;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1255:84::o:0;1488:194::-;1531:13:200;:11;:13::i;:::-;1564:16:10::1;::::0;::::1;1560:77;;1603:23;;;;;;;;;;;;;;1560:77;1646:29;::::0;;;;:25:::1;178:55:231::0;;;1646:29:10::1;::::0;::::1;160:74:231::0;1646:11:10::1;:25;::::0;::::1;::::0;133:18:231;;1646:29:10::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1488:194:::0;:::o;2030:462::-;1531:13:200;:11;:13::i;:::-;2132:16:10::1;::::0;::::1;2128:77;;2171:23;;;;;;;;;;;;;;2128:77;2218:19;::::0;::::1;2214:272;;2254:12;2271:2;:7;;2286:21;2271:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2253:59;;;2331:7;2326:70;;2365:16;;;;;;;;;;;;;;2214:272;2426:49;2456:5;2464:2;2468:6;2426:22;:49::i;:::-;2030:462:::0;;;:::o;1649:178:201:-;1531:13:200;:11;:13::i;:::-;1738::201::1;:24:::0;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;1802:7:::1;1684::200::0;1710:6;;;;1638:85;1802:7:201::1;1777:43;;;;;;;;;;;;1649:178:::0;:::o;1006:148:10:-;1531:13:200;:11;:13::i;:::-;1098:49:10::1;::::0;;;;3608:10:231;3596:23;;1098:49:10::1;::::0;::::1;3578:42:231::0;1098:11:10::1;:20;;::::0;::::1;::::0;1126:6;;3551:18:231;;1098:49:10::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1006:148:::0;;:::o;3727:235:18:-;3839:20;3861:16;3900:55;3939:1;3942:6;3950:4;3900:38;:55::i;:::-;3893:62;;;;3727:235;;;;;:::o;1796:162:200:-;1684:7;1710:6;1855:23;1710:6;735:10:210;1855:23:200;1851:101;;1901:40;;;;;735:10:210;1901:40:200;;;160:74:231;133:18;;1901:40:200;14:226:231;1851:101:200;1796:162::o;2011:153:201:-;2100:13;2093:20;;;;;;2123:34;2148:8;2123:24;:34::i;7860:318:18:-;7098:4;7092:11;;7163:66;7157:4;7150:80;;;7256:66;7243:80;;7349:58;-1:-1:-1;7336:72:18;7469:24;;;7437:30;7434:60;7428:4;7421:74;7532:4;7526;7516:21;7550:15;;;;8017:17;7614:15;;;;8122:49;8150:4;8156;8162:8;8122:27;:49::i;:::-;8110:61;7860:318;-1:-1:-1;;;;;7860:318:18:o;1219:160:208:-;1328:43;;;1343:14;3823:55:231;;1328:43:208;;;3805:74:231;3895:18;;;;3888:34;;;1328:43:208;;;;;;;;;;3778:18:231;;;;1328:43:208;;;;;;;;;;;;;;1301:71;;1321:5;;1301:19;:71::i;4231:1780:18:-;4358:20;4380:16;4493:4;4487:11;4558:66;4552:4;4545:80;4651:66;4645:4;4638:80;4744:58;4738:4;4731:72;4880:6;4876:2;4872:15;4868:2;4864:24;4841:20;4836:3;4832:30;4829:60;4823:4;4816:74;4992:4;4986;4976:21;4969:4;4966:1;4962:12;4955:43;5029:9;5025:2;5021:18;5018:1;5011:29;5064:4;5061:1;5053:16;5124:4;5117;5114:1;5110:12;5103:26;5167:4;5164:1;5154:18;5142:30;;5237:8;5225:21;5215:324;;5309:4;5303;5297;5290:5;5282:32;5270:44;;5345:8;5335:160;;5394:10;5388:4;5381:24;5468:4;5462;5455:18;5335:160;5516:5;;5215:324;5575:1;5556:20;;5603:5;5593:26;5612:5;5593:26;5705:4;5693:10;5687:4;5675:10;5668:5;5658:8;5651:5;5646:64;5636:205;;5747:10;5741:4;5734:24;5818:4;5812;5805:18;5636:205;5903:1;5897:4;5890:15;;5967:1;5961:4;5954:15;4231:1780;;;;;;:::o;2912:187:200:-;2985:16;3004:6;;;3020:17;;;;;;;;;;3052:40;;3004:6;;;;;;;3052:40;;2985:16;3052:40;2975:124;2912:187;:::o;10571:578:18:-;10701:17;10866:4;10860;10852:19;-1:-1:-1;10912:4:18;10905:18;;;10953:2;10949:17;10943:4;10936:31;10987:4;10980:18;11040:4;11034;11024:21;;;11058:15;;11024:21;10571:578::o;8370:720:208:-;8450:18;8478:19;8616:4;8613:1;8606:4;8600:11;8593:4;8587;8583:15;8580:1;8573:5;8566;8561:60;8673:7;8663:176;;8717:4;8711:11;8762:16;8759:1;8754:3;8739:40;8808:16;8803:3;8796:29;8663:176;-1:-1:-1;;8916:1:208;8910:8;8866:16;;-1:-1:-1;8942:15:208;;:68;;8994:11;9009:1;8994:16;;8942:68;;;8960:26;;;;:31;8942:68;8938:146;;;9033:40;;;;;190:42:231;178:55;;9033:40:208;;;160:74:231;133:18;;9033:40:208;14:226:231;245:154;331:42;324:5;320:54;313:5;310:65;300:93;;389:1;386;379:12;404:367;472:6;480;533:2;521:9;512:7;508:23;504:32;501:52;;;549:1;546;539:12;501:52;588:9;575:23;607:31;632:5;607:31;:::i;:::-;657:5;735:2;720:18;;;;707:32;;-1:-1:-1;;;404:367:231:o;1287:255::-;1354:6;1407:2;1395:9;1386:7;1382:23;1378:32;1375:52;;;1423:1;1420;1413:12;1375:52;1462:9;1449:23;1481:31;1506:5;1481:31;:::i;1547:516::-;1632:6;1640;1648;1701:2;1689:9;1680:7;1676:23;1672:32;1669:52;;;1717:1;1714;1707:12;1669:52;1756:9;1743:23;1775:31;1800:5;1775:31;:::i;:::-;1825:5;-1:-1:-1;1882:2:231;1867:18;;1854:32;1895:33;1854:32;1895:33;:::i;:::-;1547:516;;1947:7;;-1:-1:-1;;;2027:2:231;2012:18;;;;1999:32;;1547:516::o;2320:396::-;2387:6;2395;2448:2;2436:9;2427:7;2423:23;2419:32;2416:52;;;2464:1;2461;2454:12;2416:52;2503:9;2490:23;2553:10;2546:5;2542:22;2535:5;2532:33;2522:61;;2579:1;2576;2569:12;2721:251;2791:6;2844:2;2832:9;2823:7;2819:23;2815:32;2812:52;;;2860:1;2857;2850:12;2812:52;2892:9;2886:16;2911:31;2936:5;2911:31;:::i",
    linkReferences: {},
    immutableReferences: {
      "666": [
        {
          start: 248,
          length: 32,
        },
        {
          start: 721,
          length: 32,
        },
        {
          start: 1109,
          length: 32,
        },
        {
          start: 1175,
          length: 32,
        },
      ],
      "2732": [
        {
          start: 485,
          length: 32,
        },
        {
          start: 1329,
          length: 32,
        },
        {
          start: 1606,
          length: 32,
        },
        {
          start: 2209,
          length: 32,
        },
      ],
    },
  },
  methodIdentifiers: {
    "ACCOUNT_BEACON()": "1ada1701",
    "ENTRY_POINT()": "94430fa5",
    "acceptOwnership()": "79ba5097",
    "addStake(uint32,uint256)": "fbb1c3d4",
    "createAccount(address,uint256)": "5fbfb9cf",
    "getAccountImplementation()": "9d825bc5",
    "getAddress(address,uint256)": "8cb84e18",
    "owner()": "8da5cb5b",
    "pendingOwner()": "e30c3978",
    "renounceOwnership()": "715018a6",
    "transferOwnership(address)": "f2fde38b",
    "unlockStake()": "bb9fe6bf",
    "withdraw(address,address,uint256)": "d9caed12",
    "withdrawStake(address)": "c23a5cea",
  },
  rawMetadata:
    '{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"accountBeacon","type":"address"},{"internalType":"contract IEntryPoint","name":"entryPoint","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InvalidAction","type":"error"},{"inputs":[{"internalType":"address","name":"entryPoint","type":"address"}],"name":"InvalidEntryPoint","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"ZeroAddressNotAllowed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"ACCOUNT_BEACON","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ENTRY_POINT","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"unstakeDelay","type":"uint32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"salt","type":"uint256"}],"name":"createAccount","outputs":[{"internalType":"contract FlashAccount","name":"account","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getAccountImplementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"salt","type":"uint256"}],"name":"getAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"to","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"to","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"A UserOperations \\"initCode\\" holds the address of the factory, and a method call (`createAccount`). The factory\'s `createAccount` returns the target account address even if it is already installed. This way, `entryPoint.getSenderAddress()` can be called either before or after the account is created.","errors":{"OwnableInvalidOwner(address)":[{"details":"The owner is not a valid owner account. (eg. `address(0)`)"}],"OwnableUnauthorizedAccount(address)":[{"details":"The caller account is not authorized to perform an operation."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{"acceptOwnership()":{"details":"The new owner accepts the ownership transfer."},"addStake(uint32,uint256)":{"details":"Only callable by owner.","params":{"amount":"Amount of native currency to stake.","unstakeDelay":"Unstake delay for the stake."}},"createAccount(address,uint256)":{"details":"During UserOperation execution, this method is called only if the account is not deployed. This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation.","params":{"owner":"The owner of the account to be created.","salt":"A salt, which can be changed to create multiple accounts with the same owner."},"returns":{"account":"The address of either the newly deployed account or an existing account with this owner and salt."}},"getAccountImplementation()":{"returns":{"_0":"The address provided by the beacon."}},"getAddress(address,uint256)":{"params":{"owner":"The owner of the account to be created.","salt":"A salt, which can be changed to create multiple accounts with the same owner."},"returns":{"_0":"The address of the account that would be created with `createAccount`."}},"owner()":{"details":"Returns the address of the current owner."},"pendingOwner()":{"details":"Returns the address of the pending owner."},"transferOwnership(address)":{"details":"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer."},"unlockStake()":{"details":"Only callable by owner."},"withdraw(address,address,uint256)":{"details":"Can withdraw stuck erc20s or native currency.","params":{"amount":"Amount of the token to withdraw in case of rebasing tokens.","to":"Address to send erc20s or native currency to.","token":"Address of the token to withdraw, 0 address for native currency."}},"withdrawStake(address)":{"details":"Only callable by owner.","params":{"to":"Address to send native currency to."}}},"title":"A factory contract for FlashAccount, baed on LightAccountFactory by Alchemy.","version":1},"userdoc":{"kind":"user","methods":{"addStake(uint32,uint256)":{"notice":"Add stake to an entry point."},"createAccount(address,uint256)":{"notice":"Create an account, and return its address. Returns the address even if the account is already deployed."},"getAccountImplementation()":{"notice":"Get the account implementation provided by the beacon."},"getAddress(address,uint256)":{"notice":"Calculate the counterfactual address of this account as it would be returned by `createAccount`."},"renounceOwnership()":{"notice":"Overriding to disable renounce ownership in Ownable."},"unlockStake()":{"notice":"Start unlocking stake for an entry point."},"withdraw(address,address,uint256)":{"notice":"Withdraw funds from this contract."},"withdrawStake(address)":{"notice":"Withdraw stake from an entry point."}},"version":1}},"settings":{"compilationTarget":{"contracts/1delta/flash-account/FlashAccountFactory.sol":"FlashAccountFactory"},"evmVersion":"cancun","libraries":{},"metadata":{"bytecodeHash":"ipfs"},"optimizer":{"enabled":true,"runs":9950},"remappings":[":@chainlink/contracts/=node_modules/@chainlink/contracts/",":@flash-account/=contracts/1delta/flash-account/",":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",":account-abstraction/=lib/account-abstraction/contracts/",":base64-sol/=lib/base64/",":base64/=lib/base64/",":ds-test/=contracts/ds-test/",":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",":forge-std/=lib/forge-std/src/",":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",":hardhat/=node_modules/hardhat/",":openzeppelin-contracts/=lib/openzeppelin-contracts/"]},"sources":{"contracts/1delta/flash-account/FlashAccount.sol":{"keccak256":"0xf52cc45af1d15d718a9aed977d2c0b7e28e6ab45f8b2ce2adbfe890e853f3010","license":"GPL-3.0","urls":["bzz-raw://dc9b11b5e3a1db5e59aaef970e48baa86244c34db592fa4cd6a0940957f21983","dweb:/ipfs/QmYW7CCU9sXS2C5AmNuN8VkYnmkq4e9pLQLrKR712QVZfB"]},"contracts/1delta/flash-account/FlashAccountBase.sol":{"keccak256":"0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb","license":"GPL-3.0","urls":["bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7","dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11"]},"contracts/1delta/flash-account/FlashAccountFactory.sol":{"keccak256":"0x55710aeef2c452edb298d4993b3067fcf007a2c8cc0f9a6e40098ac1309304e1","license":"GPL-3.0","urls":["bzz-raw://b9d2fda34b5c5e026ee3844caf57eddbc432eaca767cb930c3e5a302bf411005","dweb:/ipfs/QmcL29CAQuVS2p3axrjrNwwSWzamo56rJx128YSVHwPT9Q"]},"contracts/1delta/flash-account/common/BaseLightAccount.sol":{"keccak256":"0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869","license":"GPL-3.0","urls":["bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de","dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T"]},"contracts/1delta/flash-account/common/BaseLightAccountFactory.sol":{"keccak256":"0x51ea9fe995d6edb55d035df8d9b340d02f600238dfe9688e00cb79050a6a613d","license":"GPL-3.0","urls":["bzz-raw://14e59a07ec07e28d25f8cfcee48abcec0b6ba4be2c40f2d9b5c04844fef04710","dweb:/ipfs/QmXHaf7ACQD9NRXWrsfqQ3CJWyigFE4QvYL2LBaZUxM53d"]},"contracts/1delta/flash-account/common/CustomSlotInitializable.sol":{"keccak256":"0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6","license":"MIT","urls":["bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c","dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny"]},"contracts/1delta/flash-account/common/EIP712.sol":{"keccak256":"0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3","license":"MIT","urls":["bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783","dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK"]},"contracts/1delta/flash-account/common/ERC1271.sol":{"keccak256":"0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a","license":"MIT","urls":["bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1","dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1"]},"contracts/1delta/flash-account/common/ExecutionLock.sol":{"keccak256":"0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e","license":"GPL-3.0","urls":["bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd","dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq"]},"contracts/1delta/flash-account/proxy/IBeacon.sol":{"keccak256":"0x1f5d6e5e3ed41745c91221727d5de58a779e1aa83347d375f34203f3bcc4d757","license":"MIT","urls":["bzz-raw://166d7f47e1a313cbe1155fc800cf3c95e532451ea7fd12e888335acc0b1b03d2","dweb:/ipfs/QmaEYqBkmFyjNr9iSrLQHBBwynqkruEJLgNMUt9Gp9it2z"]},"contracts/1delta/flash-account/proxy/LibClone.sol":{"keccak256":"0x226151012faaff800114b3424350f5815430a455c631393418d52e28aa567e1a","license":"MIT","urls":["bzz-raw://542d094e5bd7a4b9335c22f2a1f23b3031a84e8ac95d9d1e5bc9b4d256778875","dweb:/ipfs/QmTLWL1Nwxmzq6uKAThsNXcqe8AWRXy5vQP6uo8ptGPh4e"]},"lib/account-abstraction/contracts/core/BaseAccount.sol":{"keccak256":"0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358","license":"GPL-3.0","urls":["bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07","dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj"]},"lib/account-abstraction/contracts/core/Helpers.sol":{"keccak256":"0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6","license":"GPL-3.0","urls":["bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e","dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc"]},"lib/account-abstraction/contracts/core/UserOperationLib.sol":{"keccak256":"0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b","license":"GPL-3.0","urls":["bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc","dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS"]},"lib/account-abstraction/contracts/interfaces/IAccount.sol":{"keccak256":"0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78","license":"GPL-3.0","urls":["bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020","dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP"]},"lib/account-abstraction/contracts/interfaces/IAggregator.sol":{"keccak256":"0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588","license":"GPL-3.0","urls":["bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155","dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5"]},"lib/account-abstraction/contracts/interfaces/IEntryPoint.sol":{"keccak256":"0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4","license":"GPL-3.0","urls":["bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9","dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe"]},"lib/account-abstraction/contracts/interfaces/INonceManager.sol":{"keccak256":"0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb","license":"GPL-3.0","urls":["bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3","dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk"]},"lib/account-abstraction/contracts/interfaces/IStakeManager.sol":{"keccak256":"0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04","license":"GPL-3.0-only","urls":["bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00","dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj"]},"lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol":{"keccak256":"0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359","license":"GPL-3.0","urls":["bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be","dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3"]},"lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":{"keccak256":"0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7","license":"GPL-3.0","urls":["bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe","dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi"]},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"keccak256":"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb","license":"MIT","urls":["bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6","dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"]},"lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol":{"keccak256":"0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c","license":"MIT","urls":["bzz-raw://e2c9d517f0c136d54bd00cd57959d25681d4d6273f5bbbc263afe228303772f0","dweb:/ipfs/QmReNFjXBiufByiAAzfSQ2SM5r3qeUErn46BmN3yVRvrek"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol":{"keccak256":"0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e","license":"MIT","urls":["bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2","dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"keccak256":"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7","license":"MIT","urls":["bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b","dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"keccak256":"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724","license":"MIT","urls":["bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a","dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS"]},"lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"keccak256":"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c","license":"MIT","urls":["bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba","dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1"]},"lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":{"keccak256":"0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715","license":"MIT","urls":["bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20","dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK"]},"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"keccak256":"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7","license":"MIT","urls":["bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db","dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"]},"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"keccak256":"0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e","license":"MIT","urls":["bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15","dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV"]},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol":{"keccak256":"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d","license":"MIT","urls":["bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34","dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p"]},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"keccak256":"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2","license":"MIT","urls":["bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12","dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"]},"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","license":"MIT","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"]},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865","license":"MIT","urls":["bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68","dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol":{"keccak256":"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84","license":"MIT","urls":["bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9","dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7","license":"MIT","urls":["bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0","dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U"]},"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":{"keccak256":"0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f","license":"MIT","urls":["bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8","dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7"]},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol":{"keccak256":"0x27c3c648062924bd44cd6f38541c78e6de145dd49515ee62321e42fc1b72e5c2","license":"MIT","urls":["bzz-raw://1cce2ebc0392b5a96f5c7bbaaf5c3d23c0e7190e64cfa05a49978badc1496141","dweb:/ipfs/QmYQC1U12igR1osVyjRHaHiiTgYYuPjncAxwmjbZ452dCL"]},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"keccak256":"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8","license":"MIT","urls":["bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621","dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL"]},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c","license":"MIT","urls":["bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654","dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe"]},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","license":"MIT","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"]},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3","license":"MIT","urls":["bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03","dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"]}},"version":1}',
  metadata: {
    compiler: {
      version: "0.8.28+commit.7893614a",
    },
    language: "Solidity",
    output: {
      abi: [
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "address",
              name: "accountBeacon",
              type: "address",
            },
            {
              internalType: "contract IEntryPoint",
              name: "entryPoint",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "constructor",
        },
        {
          inputs: [],
          type: "error",
          name: "InvalidAction",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "entryPoint",
              type: "address",
            },
          ],
          type: "error",
          name: "InvalidEntryPoint",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
          ],
          type: "error",
          name: "OwnableInvalidOwner",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "account",
              type: "address",
            },
          ],
          type: "error",
          name: "OwnableUnauthorizedAccount",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "token",
              type: "address",
            },
          ],
          type: "error",
          name: "SafeERC20FailedOperation",
        },
        {
          inputs: [],
          type: "error",
          name: "TransferFailed",
        },
        {
          inputs: [],
          type: "error",
          name: "ZeroAddressNotAllowed",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "previousOwner",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
              indexed: true,
            },
          ],
          type: "event",
          name: "OwnershipTransferStarted",
          anonymous: false,
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "previousOwner",
              type: "address",
              indexed: true,
            },
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
              indexed: true,
            },
          ],
          type: "event",
          name: "OwnershipTransferred",
          anonymous: false,
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ACCOUNT_BEACON",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "ENTRY_POINT",
          outputs: [
            {
              internalType: "contract IEntryPoint",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "function",
          name: "acceptOwnership",
        },
        {
          inputs: [
            {
              internalType: "uint32",
              name: "unstakeDelay",
              type: "uint32",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "payable",
          type: "function",
          name: "addStake",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "salt",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "createAccount",
          outputs: [
            {
              internalType: "contract FlashAccount",
              name: "account",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "getAccountImplementation",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "owner",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "salt",
              type: "uint256",
            },
          ],
          stateMutability: "view",
          type: "function",
          name: "getAddress",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "owner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "pendingOwner",
          outputs: [
            {
              internalType: "address",
              name: "",
              type: "address",
            },
          ],
        },
        {
          inputs: [],
          stateMutability: "view",
          type: "function",
          name: "renounceOwnership",
        },
        {
          inputs: [
            {
              internalType: "address",
              name: "newOwner",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "transferOwnership",
        },
        {
          inputs: [],
          stateMutability: "nonpayable",
          type: "function",
          name: "unlockStake",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "to",
              type: "address",
            },
            {
              internalType: "address",
              name: "token",
              type: "address",
            },
            {
              internalType: "uint256",
              name: "amount",
              type: "uint256",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "withdraw",
        },
        {
          inputs: [
            {
              internalType: "address payable",
              name: "to",
              type: "address",
            },
          ],
          stateMutability: "nonpayable",
          type: "function",
          name: "withdrawStake",
        },
        {
          inputs: [],
          stateMutability: "payable",
          type: "receive",
        },
      ],
      devdoc: {
        kind: "dev",
        methods: {
          "acceptOwnership()": {
            details: "The new owner accepts the ownership transfer.",
          },
          "addStake(uint32,uint256)": {
            details: "Only callable by owner.",
            params: {
              amount: "Amount of native currency to stake.",
              unstakeDelay: "Unstake delay for the stake.",
            },
          },
          "createAccount(address,uint256)": {
            details:
              "During UserOperation execution, this method is called only if the account is not deployed. This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation.",
            params: {
              owner: "The owner of the account to be created.",
              salt: "A salt, which can be changed to create multiple accounts with the same owner.",
            },
            returns: {
              account:
                "The address of either the newly deployed account or an existing account with this owner and salt.",
            },
          },
          "getAccountImplementation()": {
            returns: {
              _0: "The address provided by the beacon.",
            },
          },
          "getAddress(address,uint256)": {
            params: {
              owner: "The owner of the account to be created.",
              salt: "A salt, which can be changed to create multiple accounts with the same owner.",
            },
            returns: {
              _0: "The address of the account that would be created with `createAccount`.",
            },
          },
          "owner()": {
            details: "Returns the address of the current owner.",
          },
          "pendingOwner()": {
            details: "Returns the address of the pending owner.",
          },
          "transferOwnership(address)": {
            details:
              "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner. Setting `newOwner` to the zero address is allowed; this can be used to cancel an initiated ownership transfer.",
          },
          "unlockStake()": {
            details: "Only callable by owner.",
          },
          "withdraw(address,address,uint256)": {
            details: "Can withdraw stuck erc20s or native currency.",
            params: {
              amount:
                "Amount of the token to withdraw in case of rebasing tokens.",
              to: "Address to send erc20s or native currency to.",
              token:
                "Address of the token to withdraw, 0 address for native currency.",
            },
          },
          "withdrawStake(address)": {
            details: "Only callable by owner.",
            params: {
              to: "Address to send native currency to.",
            },
          },
        },
        version: 1,
      },
      userdoc: {
        kind: "user",
        methods: {
          "addStake(uint32,uint256)": {
            notice: "Add stake to an entry point.",
          },
          "createAccount(address,uint256)": {
            notice:
              "Create an account, and return its address. Returns the address even if the account is already deployed.",
          },
          "getAccountImplementation()": {
            notice: "Get the account implementation provided by the beacon.",
          },
          "getAddress(address,uint256)": {
            notice:
              "Calculate the counterfactual address of this account as it would be returned by `createAccount`.",
          },
          "renounceOwnership()": {
            notice: "Overriding to disable renounce ownership in Ownable.",
          },
          "unlockStake()": {
            notice: "Start unlocking stake for an entry point.",
          },
          "withdraw(address,address,uint256)": {
            notice: "Withdraw funds from this contract.",
          },
          "withdrawStake(address)": {
            notice: "Withdraw stake from an entry point.",
          },
        },
        version: 1,
      },
    },
    settings: {
      remappings: [
        "@chainlink/contracts/=node_modules/@chainlink/contracts/",
        "@flash-account/=contracts/1delta/flash-account/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "account-abstraction/=lib/account-abstraction/contracts/",
        "base64-sol/=lib/base64/",
        "base64/=lib/base64/",
        "ds-test/=contracts/ds-test/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/",
        "hardhat/=node_modules/hardhat/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      ],
      optimizer: {
        enabled: true,
        runs: 9950,
      },
      metadata: {
        bytecodeHash: "ipfs",
      },
      compilationTarget: {
        "contracts/1delta/flash-account/FlashAccountFactory.sol":
          "FlashAccountFactory",
      },
      evmVersion: "cancun",
      libraries: {},
    },
    sources: {
      "contracts/1delta/flash-account/FlashAccount.sol": {
        keccak256:
          "0xf52cc45af1d15d718a9aed977d2c0b7e28e6ab45f8b2ce2adbfe890e853f3010",
        urls: [
          "bzz-raw://dc9b11b5e3a1db5e59aaef970e48baa86244c34db592fa4cd6a0940957f21983",
          "dweb:/ipfs/QmYW7CCU9sXS2C5AmNuN8VkYnmkq4e9pLQLrKR712QVZfB",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/FlashAccountBase.sol": {
        keccak256:
          "0x28210148ee56833e2209306c02123eae79f18a536ac6cb05fc932df5a09ac4bb",
        urls: [
          "bzz-raw://2d19aedbf9fdbe87b05fbc35039deec4bf605c9cff74684c0701fb12572693c7",
          "dweb:/ipfs/QmdZwha9n9xkzfToJpZmu6hWmZXXY1VhmtRADBCwuS3i11",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/FlashAccountFactory.sol": {
        keccak256:
          "0x55710aeef2c452edb298d4993b3067fcf007a2c8cc0f9a6e40098ac1309304e1",
        urls: [
          "bzz-raw://b9d2fda34b5c5e026ee3844caf57eddbc432eaca767cb930c3e5a302bf411005",
          "dweb:/ipfs/QmcL29CAQuVS2p3axrjrNwwSWzamo56rJx128YSVHwPT9Q",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/BaseLightAccount.sol": {
        keccak256:
          "0xdb86b8493ec3edfb4df0e49c9d784888378df1dbacfd8c4e390aa6e537f50869",
        urls: [
          "bzz-raw://2535907efa4eb4228d0d43af0a35c851bdf7b8453a570a9d1f5e4ea90142a0de",
          "dweb:/ipfs/QmanATSdWVcDuJjCJocsJQAnPmCbyWxXz31RQCfN7oqR7T",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/BaseLightAccountFactory.sol": {
        keccak256:
          "0x51ea9fe995d6edb55d035df8d9b340d02f600238dfe9688e00cb79050a6a613d",
        urls: [
          "bzz-raw://14e59a07ec07e28d25f8cfcee48abcec0b6ba4be2c40f2d9b5c04844fef04710",
          "dweb:/ipfs/QmXHaf7ACQD9NRXWrsfqQ3CJWyigFE4QvYL2LBaZUxM53d",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/common/CustomSlotInitializable.sol": {
        keccak256:
          "0xc0ab88d8c4382428d6fdd6890f143773caf9623bce52a459c02a14f01b9210d6",
        urls: [
          "bzz-raw://362fab071b94cb5ad4db2a06e8ec33a580563c19a047b0fd1802e596d961cb8c",
          "dweb:/ipfs/QmVV9iCVrRtg6e7aYWaFkVUcT2EK9yxvwNod1R1fAA9Rny",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/EIP712.sol": {
        keccak256:
          "0xc256c8769c2aa92fa192d21f5f4bd4387dfc6ef095d1a18476a3c6ea2e43f4f3",
        urls: [
          "bzz-raw://ce6386477e8f74d89e68071c000bd98ebdab9f0ad154615b84492ff94d17a783",
          "dweb:/ipfs/QmZMX8Pivh7sJxX72pjPn2PcMREcRz1AM4oKNNgPf6bndK",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ERC1271.sol": {
        keccak256:
          "0x8844db3fbde5549e3921afc7afd6fceed8f0f9224b1f73dd278f1523d3140e9a",
        urls: [
          "bzz-raw://547b60f10840a810da6fa00b303cdaa827ba6018e214563ddd127417cd5186e1",
          "dweb:/ipfs/QmbTbABANZqKAMJFhsbH2S7JaYbYASNzdWftuTAmJCTKk1",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/common/ExecutionLock.sol": {
        keccak256:
          "0xe4191855944f71b2fa334c2b3c7fa16a7f8eb313bc6d00392be7c3f5d58d123e",
        urls: [
          "bzz-raw://17bb8876a40594432714fedb214643913c779a97c1694ca934cbd9fda88712cd",
          "dweb:/ipfs/QmZ1hk4djnSduZh5Hhz4W93pE7vnH98VY22Yrv8TCGzMHq",
        ],
        license: "GPL-3.0",
      },
      "contracts/1delta/flash-account/proxy/IBeacon.sol": {
        keccak256:
          "0x1f5d6e5e3ed41745c91221727d5de58a779e1aa83347d375f34203f3bcc4d757",
        urls: [
          "bzz-raw://166d7f47e1a313cbe1155fc800cf3c95e532451ea7fd12e888335acc0b1b03d2",
          "dweb:/ipfs/QmaEYqBkmFyjNr9iSrLQHBBwynqkruEJLgNMUt9Gp9it2z",
        ],
        license: "MIT",
      },
      "contracts/1delta/flash-account/proxy/LibClone.sol": {
        keccak256:
          "0x226151012faaff800114b3424350f5815430a455c631393418d52e28aa567e1a",
        urls: [
          "bzz-raw://542d094e5bd7a4b9335c22f2a1f23b3031a84e8ac95d9d1e5bc9b4d256778875",
          "dweb:/ipfs/QmTLWL1Nwxmzq6uKAThsNXcqe8AWRXy5vQP6uo8ptGPh4e",
        ],
        license: "MIT",
      },
      "lib/account-abstraction/contracts/core/BaseAccount.sol": {
        keccak256:
          "0x2736272f077d1699b8b8bf8be18d1c20e506668fc52b3293da70d17e63794358",
        urls: [
          "bzz-raw://35744475cf48405d7fd6edf6a96c84ef9da3ce844d8dfe3e2e1ffc30edf21d07",
          "dweb:/ipfs/QmUdau9VjVQ7iuRbdTmFSrXP7Hcasd9Cc57LP9thK78bwj",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/Helpers.sol": {
        keccak256:
          "0x6247e011a6cb0b263b3aa098822977181674d91b62e5bdfe04c6e66f72da25d6",
        urls: [
          "bzz-raw://ca829a69b3fbc74fec8e140d42a2bf93bc3512609272f031c846470f61f0ab7e",
          "dweb:/ipfs/QmP3r3MBgAN39KeVB1rCGJWwcBcotNt26ALtAR54poQ1Jc",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/core/UserOperationLib.sol": {
        keccak256:
          "0x9d50ece985d35f82e33e5da417595c86fac10449e3d10895d08363d33aad454b",
        urls: [
          "bzz-raw://b1d11cc364c8bf7ed5388268c895b5ffed16e87dfbcb320ddeeba5e7974315dc",
          "dweb:/ipfs/QmYSpvjxEjweietQrYZagwQ52ipy7eXx4rwvnTzXKeGeMS",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAccount.sol": {
        keccak256:
          "0x38710bec0cb20ff4ceef46a80475b5bdabc27b7efd2687fd473db68332f61b78",
        urls: [
          "bzz-raw://dea7a723e1ef852e8764e69914a345d2e8bc5e13facfc9d5c29d791cb4ab0020",
          "dweb:/ipfs/QmU8dYgyF4DBJXFqjwLAtnE3q8q259ChfoEk9a6wyhHzEP",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IAggregator.sol": {
        keccak256:
          "0xf100d6fcc0c3b450b13e979b6a42c628c292a1bc340eccc2e7796b80e3975588",
        urls: [
          "bzz-raw://192938b5b27234d35c8098a319e879363c79f750eea4d0e409dc889a8ce5b155",
          "dweb:/ipfs/QmURpaJFPqEtkKP2ngBsgZhAGN8wAWh5XQpYmCkiz4Urz5",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IEntryPoint.sol": {
        keccak256:
          "0x1972a5fcb3a808b58c85af5741949ef6af11ab0debd3ae8c708171ae1ae0d0c4",
        urls: [
          "bzz-raw://baa9837ae73b9e2362a47d42d081d7c0f3d8e878e5edb381117d94a6968949c9",
          "dweb:/ipfs/QmUmo6FUE7fv5z1WzW1YFjxp8PqaeN2JrEee9au59w3Xhe",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/INonceManager.sol": {
        keccak256:
          "0xd575af0f6ebbd5f0b2933307d44cd7b4e03a69f4b817a67db5409bd3c89aeecb",
        urls: [
          "bzz-raw://3b1e2dea9b05cfba9d13339ed16d96457dc861013cc4f3f35b71a80f82448db3",
          "dweb:/ipfs/QmVaGy5uGDMSiU2SzyokTjoHFyb39VVG5wtaM9KTnHyZSk",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/interfaces/IStakeManager.sol": {
        keccak256:
          "0xbe5ca9e7f254d031687419e7b96ef48c9c63e9398bbe992dc72ffc6dc14e0a04",
        urls: [
          "bzz-raw://1fffec71c38627a26fabb423350148009579f092623fb02b471a12d973763a00",
          "dweb:/ipfs/QmRBi31QEYXHj3x1AnQ2jKa2eziZH1b9av396P3b4dw6bj",
        ],
        license: "GPL-3.0-only",
      },
      "lib/account-abstraction/contracts/interfaces/PackedUserOperation.sol": {
        keccak256:
          "0x1129b46381db68eddbc5cb49e50664667b66b03c480453858e7b25eabe444359",
        urls: [
          "bzz-raw://499a948aba60480dba6e25c763b8d918f1c246eb7a3302e04f493e080f3295be",
          "dweb:/ipfs/QmeRhhswf4NACcBKam2PyjpTP2ddSm648kah5kkQJsvwz3",
        ],
        license: "GPL-3.0",
      },
      "lib/account-abstraction/contracts/samples/callback/TokenCallbackHandler.sol":
        {
          keccak256:
            "0x7770340a57c4be2b718b6ac2b031722074c0d795e0f4e1a6740ca1aa3d85e9d7",
          urls: [
            "bzz-raw://2228ef19911d6ff9cfc3a9177335468f2c504a0e9015b6257233a7f915d2b6fe",
            "dweb:/ipfs/QmbTydBiSHzhJUhR6AgNQ7HcWitKr1BoHy3ii1YpVS7rfi",
          ],
          license: "GPL-3.0",
        },
      "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
        keccak256:
          "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
        urls: [
          "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
          "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/access/Ownable2Step.sol": {
        keccak256:
          "0xdcad8898fda432696597752e8ec361b87d85c82cb258115427af006dacf7128c",
        urls: [
          "bzz-raw://e2c9d517f0c136d54bd00cd57959d25681d4d6273f5bbbc263afe228303772f0",
          "dweb:/ipfs/QmReNFjXBiufByiAAzfSQ2SM5r3qeUErn46BmN3yVRvrek",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol": {
        keccak256:
          "0xc92e946b954f185c3ca5ee56f9721aa73d64464456a46459384cb0ccf3c3856e",
        urls: [
          "bzz-raw://ae178b4e7b259557d8b93f3dd4f6f909ac72f914a9e92676e59b8d737f0423e2",
          "dweb:/ipfs/QmXeqyUJYzn6w8wyivQAtSzmwwFQnHaFYPvGad66RW1sPf",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol": {
        keccak256:
          "0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7",
        urls: [
          "bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b",
          "dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol": {
        keccak256:
          "0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724",
        urls: [
          "bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a",
          "dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol": {
        keccak256:
          "0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c",
        urls: [
          "bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba",
          "dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC1155/IERC1155Receiver.sol":
        {
          keccak256:
            "0x61a23d601c2ab69dd726ac55058604cbda98e1d728ba31a51c379a3f9eeea715",
          urls: [
            "bzz-raw://d8cbb06152d82ebdd5ba1d33454e5759492040f309a82637c7e99c948a04fa20",
            "dweb:/ipfs/QmQQuLr6WSfLu97pMEh6XLefk99TSj9k5Qu1zXGPepwGiK",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        keccak256:
          "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
        urls: [
          "bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
          "dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
        keccak256:
          "0x6dd0cb67846da3fa1241c520faaa215d6bec8226e37beac6056c51e8af44d24e",
        urls: [
          "bzz-raw://650e533e62b30dcc6edea2b6c91358d5659da3bde42e56adf7316c493b916a15",
          "dweb:/ipfs/QmYkmK2vPE6FjdAoQVpZSJxamTLGno9wzGS495TcMNFViV",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
        keccak256:
          "0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d",
        urls: [
          "bzz-raw://78586466c424f076c6a2a551d848cfbe3f7c49e723830807598484a1047b3b34",
          "dweb:/ipfs/Qmb717ovcFxm7qgNKEShiV6M9SPR3v1qnNpAGH84D6w29p",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
        keccak256:
          "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
        urls: [
          "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
          "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Panic.sol": {
        keccak256:
          "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
        urls: [
          "bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
          "dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
        keccak256:
          "0xdcc9bd8f769fdf5951281dcd4e03f651674ad4061ef4bdc9946df12de979a865",
        urls: [
          "bzz-raw://e05b5b4463c67a3f831f2f6b2edf0b46e2503847e90e67bccc7e0b8fad7c3a68",
          "dweb:/ipfs/QmW46c35vZD48MkwHbsMNjDgkwFLguTTsRpNwxaw8zNUvF",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
        keccak256:
          "0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84",
        urls: [
          "bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9",
          "dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":
        {
          keccak256:
            "0x8b2e492a62de1334a04bb8cc8104750cbc6ca4b339c7808cd14da8492d4bfbd7",
          urls: [
            "bzz-raw://bc671bac8e9a810f7c51214398282e6449ef7e4dfe8e2635a0dc8516c812fef0",
            "dweb:/ipfs/QmPr1KkJ8Fq1zbdDYsCQWbHn9B7GKxWHhsgFUXtxYM7b7U",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol":
        {
          keccak256:
            "0xbdc3bb48ccedb818cd75a6d74a16df55a822e9f6d3cc54c59f576f10aab67b5f",
          urls: [
            "bzz-raw://2284f25f2478f419d7781573b17a89d0e7c5589a865d55e2d6ed5163aee23aa8",
            "dweb:/ipfs/QmNsr2625APBQiNKpYnX5VcSnYgfUHR9Uzzp9pRXjoDqK7",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol":
        {
          keccak256:
            "0x27c3c648062924bd44cd6f38541c78e6de145dd49515ee62321e42fc1b72e5c2",
          urls: [
            "bzz-raw://1cce2ebc0392b5a96f5c7bbaaf5c3d23c0e7190e64cfa05a49978badc1496141",
            "dweb:/ipfs/QmYQC1U12igR1osVyjRHaHiiTgYYuPjncAxwmjbZ452dCL",
          ],
          license: "MIT",
        },
      "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
        keccak256:
          "0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8",
        urls: [
          "bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621",
          "dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
        keccak256:
          "0x6f61a65c733690afafb4cf528b5677e704828c8350b60b948dbc1d3bb6d7689c",
        urls: [
          "bzz-raw://00265b985b303af62ee243e10db819fa8cf890d9f122f82f4f03f55b02f62654",
          "dweb:/ipfs/QmNneFqZn2uKK6dECxatH6aENk1EMCTETi58dGaz5NCWQe",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol": {
        keccak256:
          "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
        urls: [
          "bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
          "dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy",
        ],
        license: "MIT",
      },
      "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
        keccak256:
          "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
        urls: [
          "bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
          "dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ",
        ],
        license: "MIT",
      },
    },
    version: 1,
  },
  id: 2,
} as const as Abi;
export type { FlashAccountFactoryAbiType } from "./FlashAccountFactory";
export { getFlashAccountFactoryContract } from "./FlashAccountFactory";
export { abi as AaveV3PoolAbi } from "@aave/core-v3/artifacts/contracts/protocol/pool/Pool.sol/Pool.json";
